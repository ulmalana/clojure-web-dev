["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/core-js-pure/modules/es.symbol.key-for.js"],"~:js","shadow$provide.module$node_modules$core_js_pure$modules$es_symbol_key_for=function(global,require,module,exports){global=require(\"module$node_modules$core_js_pure$internals$export\");var hasOwn=require(\"module$node_modules$core_js_pure$internals$has_own_property\"),isSymbol=require(\"module$node_modules$core_js_pure$internals$is_symbol\"),tryToString=require(\"module$node_modules$core_js_pure$internals$try_to_string\");module=require(\"module$node_modules$core_js_pure$internals$shared\");require=require(\"module$node_modules$core_js_pure$internals$symbol_registry_detection\");\nvar SymbolToStringRegistry=module(\"symbol-to-string-registry\");global({target:\"Symbol\",stat:!0,forced:!require},{keyFor:function(sym){if(!isSymbol(sym))throw TypeError(tryToString(sym)+\" is not a symbol\");if(hasOwn(SymbolToStringRegistry,sym))return SymbolToStringRegistry[sym]}})}","~:source","shadow$provide[\"module$node_modules$core_js_pure$modules$es_symbol_key_for\"] = function(global,require,module,exports) {\nvar $ = require('../internals/export');\nvar hasOwn = require('../internals/has-own-property');\nvar isSymbol = require('../internals/is-symbol');\nvar tryToString = require('../internals/try-to-string');\nvar shared = require('../internals/shared');\nvar NATIVE_SYMBOL_REGISTRY = require('../internals/symbol-registry-detection');\n\nvar SymbolToStringRegistry = shared('symbol-to-string-registry');\n\n// `Symbol.keyFor` method\n// https://tc39.es/ecma262/#sec-symbol.keyfor\n$({ target: 'Symbol', stat: true, forced: !NATIVE_SYMBOL_REGISTRY }, {\n  keyFor: function keyFor(sym) {\n    if (!isSymbol(sym)) throw TypeError(tryToString(sym) + ' is not a symbol');\n    if (hasOwn(SymbolToStringRegistry, sym)) return SymbolToStringRegistry[sym];\n  }\n});\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$core_js_pure$internals$export","~$module$node_modules$core_js_pure$internals$is_symbol","~$module$node_modules$core_js_pure$internals$has_own_property","~$module$node_modules$core_js_pure$internals$symbol_registry_detection","~$module$node_modules$core_js_pure$internals$try_to_string","~$module$node_modules$core_js_pure$internals$shared"]],"~:properties",["^5",["forced","stat","keyFor","target"]],"~:compiled-at",1668744300383,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$core_js_pure$modules$es_symbol_key_for.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAe,0DAAf,CAA+E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CACnHC,MAAAA,CAAIH,OAAA,CAAQ,mDAAR,CACR,KAAII,OAASJ,OAAA,CAAQ,6DAAR,CAAb,CACIK,SAAWL,OAAA,CAAQ,sDAAR,CADf,CAEIM,YAAcN,OAAA,CAAQ,0DAAR,CACdO,OAAAA,CAASP,OAAA,CAAQ,mDAAR,CACTQ,QAAAA,CAAyBR,OAAA,CAAQ,sEAAR,CAE7B;IAAIS,uBAAyBF,MAAA,CAAO,2BAAP,CAI7BJ,OAAA,CAAE,CAAEO,OAAQ,QAAV,CAAoBC,KAAM,CAAA,CAA1B,CAAgCC,OAAQ,CAACJ,OAAzC,CAAF,CAAqE,CACnEK,OAAQA,QAAe,CAACC,GAAD,CAAM,CAC3B,GAAI,CAACT,QAAA,CAASS,GAAT,CAAL,CAAoB,KAAMC,UAAA,CAAUT,WAAA,CAAYQ,GAAZ,CAAV,CAA6B,kBAA7B,CAAN,CACpB,GAAIV,MAAA,CAAOK,sBAAP,CAA+BK,GAA/B,CAAJ,CAAyC,MAAOL,uBAAA,CAAuBK,GAAvB,CAFrB,CADsC,CAArE,CAZuH;\",\n\"sources\":[\"node_modules/core-js-pure/modules/es.symbol.key-for.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$core_js_pure$modules$es_symbol_key_for\\\"] = function(global,require,module,exports) {\\nvar $ = require('../internals/export');\\nvar hasOwn = require('../internals/has-own-property');\\nvar isSymbol = require('../internals/is-symbol');\\nvar tryToString = require('../internals/try-to-string');\\nvar shared = require('../internals/shared');\\nvar NATIVE_SYMBOL_REGISTRY = require('../internals/symbol-registry-detection');\\n\\nvar SymbolToStringRegistry = shared('symbol-to-string-registry');\\n\\n// `Symbol.keyFor` method\\n// https://tc39.es/ecma262/#sec-symbol.keyfor\\n$({ target: 'Symbol', stat: true, forced: !NATIVE_SYMBOL_REGISTRY }, {\\n  keyFor: function keyFor(sym) {\\n    if (!isSymbol(sym)) throw TypeError(tryToString(sym) + ' is not a symbol');\\n    if (hasOwn(SymbolToStringRegistry, sym)) return SymbolToStringRegistry[sym];\\n  }\\n});\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"$\",\"hasOwn\",\"isSymbol\",\"tryToString\",\"shared\",\"NATIVE_SYMBOL_REGISTRY\",\"SymbolToStringRegistry\",\"target\",\"stat\",\"forced\",\"keyFor\",\"sym\",\"TypeError\"]\n}\n"]