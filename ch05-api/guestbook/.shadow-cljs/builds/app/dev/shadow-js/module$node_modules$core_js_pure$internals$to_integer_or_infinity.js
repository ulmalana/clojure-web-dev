["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/core-js-pure/internals/to-integer-or-infinity.js"],"~:js","shadow$provide.module$node_modules$core_js_pure$internals$to_integer_or_infinity=function(global,require,module,exports){var trunc=require(\"module$node_modules$core_js_pure$internals$math_trunc\");module.exports=function(argument){argument=+argument;return argument!==argument||0===argument?0:trunc(argument)}}","~:source","shadow$provide[\"module$node_modules$core_js_pure$internals$to_integer_or_infinity\"] = function(global,require,module,exports) {\nvar trunc = require('../internals/math-trunc');\n\n// `ToIntegerOrInfinity` abstract operation\n// https://tc39.es/ecma262/#sec-tointegerorinfinity\nmodule.exports = function (argument) {\n  var number = +argument;\n  // eslint-disable-next-line no-self-compare -- NaN check\n  return number !== number || number === 0 ? 0 : trunc(number);\n};\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$core_js_pure$internals$math_trunc"]],"~:properties",["^5",[]],"~:compiled-at",1668744300334,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$core_js_pure$internals$to_integer_or_infinity.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAe,iEAAf,CAAsF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAC9H,IAAIC,MAAQH,OAAA,CAAQ,uDAAR,CAIZC,OAAA,CAAOC,OAAP,CAAiBE,QAAS,CAACC,QAAD,CAAW,CAC/BC,QAAAA,CAAS,CAACD,QAEd,OAAOC,SAAA,GAAWA,QAAX,EAAgC,CAAhC,GAAqBA,QAArB,CAAoC,CAApC,CAAwCH,KAAA,CAAMG,QAAN,CAHZ,CALyF;\",\n\"sources\":[\"node_modules/core-js-pure/internals/to-integer-or-infinity.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$core_js_pure$internals$to_integer_or_infinity\\\"] = function(global,require,module,exports) {\\nvar trunc = require('../internals/math-trunc');\\n\\n// `ToIntegerOrInfinity` abstract operation\\n// https://tc39.es/ecma262/#sec-tointegerorinfinity\\nmodule.exports = function (argument) {\\n  var number = +argument;\\n  // eslint-disable-next-line no-self-compare -- NaN check\\n  return number !== number || number === 0 ? 0 : trunc(number);\\n};\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"trunc\",\"module.exports\",\"argument\",\"number\"]\n}\n"]