["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/highlight_DOT_js/lib/languages/handlebars.js"],"~:js","shadow$provide.module$node_modules$highlight_DOT_js$lib$languages$handlebars=function(global,require,module,exports){function concat(args){for(var $jscomp$restParams=[],$jscomp$restIndex=0;$jscomp$restIndex<arguments.length;++$jscomp$restIndex)$jscomp$restParams[$jscomp$restIndex-0]=arguments[$jscomp$restIndex];return $jscomp$restParams.map(function(x){return x?\"string\"===typeof x?x:x.source:null}).join(\"\")}function stripOptionsFromArgs(args){var opts=args[args.length-1];return\"object\"===typeof opts&&\nopts.constructor===Object?(args.splice(args.length-1,1),opts):{}}function either(args){for(var $jscomp$restParams=[],$jscomp$restIndex=0;$jscomp$restIndex<arguments.length;++$jscomp$restIndex)$jscomp$restParams[$jscomp$restIndex-0]=arguments[$jscomp$restIndex];return\"(\"+(stripOptionsFromArgs($jscomp$restParams).capture?\"\":\"?:\")+$jscomp$restParams.map(function(x){return x?\"string\"===typeof x?x:x.source:null}).join(\"|\")+\")\"}module.exports=function(hljs){var BUILT_INS={$pattern:/[\\w.\\/]+/,built_in:\"action bindattr collection component concat debugger each each-in get hash if in input link-to loc log lookup mut outlet partial query-params render template textarea unbound unless view with yield\".split(\" \")},\nBRACKET_QUOTED_ID_REGEX=/\\[\\]|\\[[^\\]]+\\]/,PLAIN_ID_REGEX=/[^\\s!\"#%&'()*+,.\\/;<=>@\\[\\\\\\]^`{|}~]+/,ANY_ID=either(/\"\"|\"[^\"]+\"/,/''|'[^']+'/,BRACKET_QUOTED_ID_REGEX,PLAIN_ID_REGEX),IDENTIFIER_REGEX=concat(concat(\"(?:\",/\\.|\\.\\/|\\//,\")?\"),ANY_ID,concat(\"(?:\",concat(/(\\.|\\/)/,ANY_ID),\")*\"));ANY_ID=concat(\"(\",BRACKET_QUOTED_ID_REGEX,\"|\",PLAIN_ID_REGEX,\")(?\\x3d\\x3d)\");BRACKET_QUOTED_ID_REGEX={begin:IDENTIFIER_REGEX};IDENTIFIER_REGEX=hljs.inherit(BRACKET_QUOTED_ID_REGEX,{keywords:{$pattern:/[\\w.\\/]+/,literal:[\"true\",\n\"false\",\"undefined\",\"null\"]}});PLAIN_ID_REGEX={begin:/\\(/,end:/\\)/};ANY_ID={contains:[hljs.NUMBER_MODE,hljs.QUOTE_STRING_MODE,hljs.APOS_STRING_MODE,{begin:/as\\s+\\|/,keywords:{keyword:\"as\"},end:/\\|/,contains:[{begin:/\\w+/}]},{className:\"attr\",begin:ANY_ID,relevance:0,starts:{begin:/=/,end:/=/,starts:{contains:[hljs.NUMBER_MODE,hljs.QUOTE_STRING_MODE,hljs.APOS_STRING_MODE,IDENTIFIER_REGEX,PLAIN_ID_REGEX]}}},IDENTIFIER_REGEX,PLAIN_ID_REGEX],returnEnd:!0};IDENTIFIER_REGEX=hljs.inherit(BRACKET_QUOTED_ID_REGEX,\n{className:\"name\",keywords:BUILT_INS,starts:hljs.inherit(ANY_ID,{end:/\\)/})});PLAIN_ID_REGEX.contains=[IDENTIFIER_REGEX];PLAIN_ID_REGEX=hljs.inherit(BRACKET_QUOTED_ID_REGEX,{keywords:BUILT_INS,className:\"name\",starts:hljs.inherit(ANY_ID,{end:/\\}\\}/})});IDENTIFIER_REGEX=hljs.inherit(BRACKET_QUOTED_ID_REGEX,{keywords:BUILT_INS,className:\"name\"});BUILT_INS=hljs.inherit(BRACKET_QUOTED_ID_REGEX,{className:\"name\",keywords:BUILT_INS,starts:hljs.inherit(ANY_ID,{end:/\\}\\}/})});return{name:\"Handlebars\",aliases:[\"hbs\",\n\"html.hbs\",\"html.handlebars\",\"htmlbars\"],case_insensitive:!0,subLanguage:\"xml\",contains:[{begin:/\\\\\\{\\{/,skip:!0},{begin:/\\\\\\\\(?=\\{\\{)/,skip:!0},hljs.COMMENT(/\\{\\{!--/,/--\\}\\}/),hljs.COMMENT(/\\{\\{!/,/\\}\\}/),{className:\"template-tag\",begin:/\\{\\{\\{\\{(?!\\/)/,end:/\\}\\}\\}\\}/,contains:[PLAIN_ID_REGEX],starts:{end:/\\{\\{\\{\\{\\//,returnEnd:!0,subLanguage:\"xml\"}},{className:\"template-tag\",begin:/\\{\\{\\{\\{\\//,end:/\\}\\}\\}\\}/,contains:[IDENTIFIER_REGEX]},{className:\"template-tag\",begin:/\\{\\{#/,end:/\\}\\}/,contains:[PLAIN_ID_REGEX]},\n{className:\"template-tag\",begin:/\\{\\{(?=else\\}\\})/,end:/\\}\\}/,keywords:\"else\"},{className:\"template-tag\",begin:/\\{\\{(?=else if)/,end:/\\}\\}/,keywords:\"else if\"},{className:\"template-tag\",begin:/\\{\\{\\//,end:/\\}\\}/,contains:[IDENTIFIER_REGEX]},{className:\"template-variable\",begin:/\\{\\{\\{/,end:/\\}\\}\\}/,contains:[BUILT_INS]},{className:\"template-variable\",begin:/\\{\\{/,end:/\\}\\}/,contains:[BUILT_INS]}]}}}","~:source","shadow$provide[\"module$node_modules$highlight_DOT_js$lib$languages$handlebars\"] = function(global,require,module,exports) {\n/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n\n  return re.source;\n}\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction anyNumberOfTimes(re) {\n  return concat('(?:', re, ')*');\n}\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction optional(re) {\n  return concat('(?:', re, ')?');\n}\n\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\nfunction concat(...args) {\n  const joined = args.map((x) => source(x)).join(\"\");\n  return joined;\n}\n\nfunction stripOptionsFromArgs(args) {\n  const opts = args[args.length - 1];\n\n  if (typeof opts === 'object' && opts.constructor === Object) {\n    args.splice(args.length - 1, 1);\n    return opts;\n  } else {\n    return {};\n  }\n}\n\n/**\n * Any of the passed expresssions may match\n *\n * Creates a huge this | this | that | that match\n * @param {(RegExp | string)[] } args\n * @returns {string}\n */\nfunction either(...args) {\n  const opts = stripOptionsFromArgs(args);\n  const joined = '(' +\n    (opts.capture ? \"\" : \"?:\") +\n    args.map((x) => source(x)).join(\"|\") + \")\";\n  return joined;\n}\n\n/*\nLanguage: Handlebars\nRequires: xml.js\nAuthor: Robin Ward <robin.ward@gmail.com>\nDescription: Matcher for Handlebars as well as EmberJS additions.\nWebsite: https://handlebarsjs.com\nCategory: template\n*/\n\nfunction handlebars(hljs) {\n  const BUILT_INS = {\n    $pattern: /[\\w.\\/]+/,\n    built_in: [\n      'action',\n      'bindattr',\n      'collection',\n      'component',\n      'concat',\n      'debugger',\n      'each',\n      'each-in',\n      'get',\n      'hash',\n      'if',\n      'in',\n      'input',\n      'link-to',\n      'loc',\n      'log',\n      'lookup',\n      'mut',\n      'outlet',\n      'partial',\n      'query-params',\n      'render',\n      'template',\n      'textarea',\n      'unbound',\n      'unless',\n      'view',\n      'with',\n      'yield'\n    ]\n  };\n\n  const LITERALS = {\n    $pattern: /[\\w.\\/]+/,\n    literal: [\n      'true',\n      'false',\n      'undefined',\n      'null'\n    ]\n  };\n\n  // as defined in https://handlebarsjs.com/guide/expressions.html#literal-segments\n  // this regex matches literal segments like ' abc ' or [ abc ] as well as helpers and paths\n  // like a/b, ./abc/cde, and abc.bcd\n\n  const DOUBLE_QUOTED_ID_REGEX = /\"\"|\"[^\"]+\"/;\n  const SINGLE_QUOTED_ID_REGEX = /''|'[^']+'/;\n  const BRACKET_QUOTED_ID_REGEX = /\\[\\]|\\[[^\\]]+\\]/;\n  const PLAIN_ID_REGEX = /[^\\s!\"#%&'()*+,.\\/;<=>@\\[\\\\\\]^`{|}~]+/;\n  const PATH_DELIMITER_REGEX = /(\\.|\\/)/;\n  const ANY_ID = either(\n    DOUBLE_QUOTED_ID_REGEX,\n    SINGLE_QUOTED_ID_REGEX,\n    BRACKET_QUOTED_ID_REGEX,\n    PLAIN_ID_REGEX\n    );\n\n  const IDENTIFIER_REGEX = concat(\n    optional(/\\.|\\.\\/|\\//), // relative or absolute path\n    ANY_ID,\n    anyNumberOfTimes(concat(\n      PATH_DELIMITER_REGEX,\n      ANY_ID\n    ))\n  );\n\n  // identifier followed by a equal-sign (without the equal sign)\n  const HASH_PARAM_REGEX = concat(\n    '(',\n    BRACKET_QUOTED_ID_REGEX, '|',\n    PLAIN_ID_REGEX,\n    ')(?==)'\n  );\n\n  const HELPER_NAME_OR_PATH_EXPRESSION = {\n    begin: IDENTIFIER_REGEX\n  };\n\n  const HELPER_PARAMETER = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {\n    keywords: LITERALS\n  });\n\n  const SUB_EXPRESSION = {\n    begin: /\\(/,\n    end: /\\)/\n    // the \"contains\" is added below when all necessary sub-modes are defined\n  };\n\n  const HASH = {\n    // fka \"attribute-assignment\", parameters of the form 'key=value'\n    className: 'attr',\n    begin: HASH_PARAM_REGEX,\n    relevance: 0,\n    starts: {\n      begin: /=/,\n      end: /=/,\n      starts: {\n        contains: [\n          hljs.NUMBER_MODE,\n          hljs.QUOTE_STRING_MODE,\n          hljs.APOS_STRING_MODE,\n          HELPER_PARAMETER,\n          SUB_EXPRESSION\n        ]\n      }\n    }\n  };\n\n  const BLOCK_PARAMS = {\n    // parameters of the form '{{#with x as | y |}}...{{/with}}'\n    begin: /as\\s+\\|/,\n    keywords: {\n      keyword: 'as'\n    },\n    end: /\\|/,\n    contains: [\n      {\n        // define sub-mode in order to prevent highlighting of block-parameter named \"as\"\n        begin: /\\w+/\n      }\n    ]\n  };\n\n  const HELPER_PARAMETERS = {\n    contains: [\n      hljs.NUMBER_MODE,\n      hljs.QUOTE_STRING_MODE,\n      hljs.APOS_STRING_MODE,\n      BLOCK_PARAMS,\n      HASH,\n      HELPER_PARAMETER,\n      SUB_EXPRESSION\n    ],\n    returnEnd: true\n    // the property \"end\" is defined through inheritance when the mode is used. If depends\n    // on the surrounding mode, but \"endsWithParent\" does not work here (i.e. it includes the\n    // end-token of the surrounding mode)\n  };\n\n  const SUB_EXPRESSION_CONTENTS = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {\n    className: 'name',\n    keywords: BUILT_INS,\n    starts: hljs.inherit(HELPER_PARAMETERS, {\n      end: /\\)/\n    })\n  });\n\n  SUB_EXPRESSION.contains = [SUB_EXPRESSION_CONTENTS];\n\n  const OPENING_BLOCK_MUSTACHE_CONTENTS = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {\n    keywords: BUILT_INS,\n    className: 'name',\n    starts: hljs.inherit(HELPER_PARAMETERS, {\n      end: /\\}\\}/\n    })\n  });\n\n  const CLOSING_BLOCK_MUSTACHE_CONTENTS = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {\n    keywords: BUILT_INS,\n    className: 'name'\n  });\n\n  const BASIC_MUSTACHE_CONTENTS = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {\n    className: 'name',\n    keywords: BUILT_INS,\n    starts: hljs.inherit(HELPER_PARAMETERS, {\n      end: /\\}\\}/\n    })\n  });\n\n  const ESCAPE_MUSTACHE_WITH_PRECEEDING_BACKSLASH = {\n    begin: /\\\\\\{\\{/,\n    skip: true\n  };\n  const PREVENT_ESCAPE_WITH_ANOTHER_PRECEEDING_BACKSLASH = {\n    begin: /\\\\\\\\(?=\\{\\{)/,\n    skip: true\n  };\n\n  return {\n    name: 'Handlebars',\n    aliases: [\n      'hbs',\n      'html.hbs',\n      'html.handlebars',\n      'htmlbars'\n    ],\n    case_insensitive: true,\n    subLanguage: 'xml',\n    contains: [\n      ESCAPE_MUSTACHE_WITH_PRECEEDING_BACKSLASH,\n      PREVENT_ESCAPE_WITH_ANOTHER_PRECEEDING_BACKSLASH,\n      hljs.COMMENT(/\\{\\{!--/, /--\\}\\}/),\n      hljs.COMMENT(/\\{\\{!/, /\\}\\}/),\n      {\n        // open raw block \"{{{{raw}}}} content not evaluated {{{{/raw}}}}\"\n        className: 'template-tag',\n        begin: /\\{\\{\\{\\{(?!\\/)/,\n        end: /\\}\\}\\}\\}/,\n        contains: [OPENING_BLOCK_MUSTACHE_CONTENTS],\n        starts: {\n          end: /\\{\\{\\{\\{\\//,\n          returnEnd: true,\n          subLanguage: 'xml'\n        }\n      },\n      {\n        // close raw block\n        className: 'template-tag',\n        begin: /\\{\\{\\{\\{\\//,\n        end: /\\}\\}\\}\\}/,\n        contains: [CLOSING_BLOCK_MUSTACHE_CONTENTS]\n      },\n      {\n        // open block statement\n        className: 'template-tag',\n        begin: /\\{\\{#/,\n        end: /\\}\\}/,\n        contains: [OPENING_BLOCK_MUSTACHE_CONTENTS]\n      },\n      {\n        className: 'template-tag',\n        begin: /\\{\\{(?=else\\}\\})/,\n        end: /\\}\\}/,\n        keywords: 'else'\n      },\n      {\n        className: 'template-tag',\n        begin: /\\{\\{(?=else if)/,\n        end: /\\}\\}/,\n        keywords: 'else if'\n      },\n      {\n        // closing block statement\n        className: 'template-tag',\n        begin: /\\{\\{\\//,\n        end: /\\}\\}/,\n        contains: [CLOSING_BLOCK_MUSTACHE_CONTENTS]\n      },\n      {\n        // template variable or helper-call that is NOT html-escaped\n        className: 'template-variable',\n        begin: /\\{\\{\\{/,\n        end: /\\}\\}\\}/,\n        contains: [BASIC_MUSTACHE_CONTENTS]\n      },\n      {\n        // template variable or helper-call that is html-escaped\n        className: 'template-variable',\n        begin: /\\{\\{/,\n        end: /\\}\\}/,\n        contains: [BASIC_MUSTACHE_CONTENTS]\n      }\n    ]\n  };\n}\n\nmodule.exports = handlebars;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["skip","case_insensitive","begin","aliases","returnEnd","subLanguage","className","contains","$pattern","relevance","name","built_in","keyword","keywords","starts","literal","end"]],"~:compiled-at",1668750081508,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$highlight_DOT_js$lib$languages$handlebars.js\",\n\"lineCount\":7,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/highlight_DOT_js/lib/languages/handlebars.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$highlight_DOT_js$lib$languages$handlebars\\\"] = function(global,require,module,exports) {\\n/**\\n * @param {string} value\\n * @returns {RegExp}\\n * */\\n\\n/**\\n * @param {RegExp | string } re\\n * @returns {string}\\n */\\nfunction source(re) {\\n  if (!re) return null;\\n  if (typeof re === \\\"string\\\") return re;\\n\\n  return re.source;\\n}\\n\\n/**\\n * @param {RegExp | string } re\\n * @returns {string}\\n */\\nfunction anyNumberOfTimes(re) {\\n  return concat('(?:', re, ')*');\\n}\\n\\n/**\\n * @param {RegExp | string } re\\n * @returns {string}\\n */\\nfunction optional(re) {\\n  return concat('(?:', re, ')?');\\n}\\n\\n/**\\n * @param {...(RegExp | string) } args\\n * @returns {string}\\n */\\nfunction concat(...args) {\\n  const joined = args.map((x) => source(x)).join(\\\"\\\");\\n  return joined;\\n}\\n\\nfunction stripOptionsFromArgs(args) {\\n  const opts = args[args.length - 1];\\n\\n  if (typeof opts === 'object' && opts.constructor === Object) {\\n    args.splice(args.length - 1, 1);\\n    return opts;\\n  } else {\\n    return {};\\n  }\\n}\\n\\n/**\\n * Any of the passed expresssions may match\\n *\\n * Creates a huge this | this | that | that match\\n * @param {(RegExp | string)[] } args\\n * @returns {string}\\n */\\nfunction either(...args) {\\n  const opts = stripOptionsFromArgs(args);\\n  const joined = '(' +\\n    (opts.capture ? \\\"\\\" : \\\"?:\\\") +\\n    args.map((x) => source(x)).join(\\\"|\\\") + \\\")\\\";\\n  return joined;\\n}\\n\\n/*\\nLanguage: Handlebars\\nRequires: xml.js\\nAuthor: Robin Ward <robin.ward@gmail.com>\\nDescription: Matcher for Handlebars as well as EmberJS additions.\\nWebsite: https://handlebarsjs.com\\nCategory: template\\n*/\\n\\nfunction handlebars(hljs) {\\n  const BUILT_INS = {\\n    $pattern: /[\\\\w.\\\\/]+/,\\n    built_in: [\\n      'action',\\n      'bindattr',\\n      'collection',\\n      'component',\\n      'concat',\\n      'debugger',\\n      'each',\\n      'each-in',\\n      'get',\\n      'hash',\\n      'if',\\n      'in',\\n      'input',\\n      'link-to',\\n      'loc',\\n      'log',\\n      'lookup',\\n      'mut',\\n      'outlet',\\n      'partial',\\n      'query-params',\\n      'render',\\n      'template',\\n      'textarea',\\n      'unbound',\\n      'unless',\\n      'view',\\n      'with',\\n      'yield'\\n    ]\\n  };\\n\\n  const LITERALS = {\\n    $pattern: /[\\\\w.\\\\/]+/,\\n    literal: [\\n      'true',\\n      'false',\\n      'undefined',\\n      'null'\\n    ]\\n  };\\n\\n  // as defined in https://handlebarsjs.com/guide/expressions.html#literal-segments\\n  // this regex matches literal segments like ' abc ' or [ abc ] as well as helpers and paths\\n  // like a/b, ./abc/cde, and abc.bcd\\n\\n  const DOUBLE_QUOTED_ID_REGEX = /\\\"\\\"|\\\"[^\\\"]+\\\"/;\\n  const SINGLE_QUOTED_ID_REGEX = /''|'[^']+'/;\\n  const BRACKET_QUOTED_ID_REGEX = /\\\\[\\\\]|\\\\[[^\\\\]]+\\\\]/;\\n  const PLAIN_ID_REGEX = /[^\\\\s!\\\"#%&'()*+,.\\\\/;<=>@\\\\[\\\\\\\\\\\\]^`{|}~]+/;\\n  const PATH_DELIMITER_REGEX = /(\\\\.|\\\\/)/;\\n  const ANY_ID = either(\\n    DOUBLE_QUOTED_ID_REGEX,\\n    SINGLE_QUOTED_ID_REGEX,\\n    BRACKET_QUOTED_ID_REGEX,\\n    PLAIN_ID_REGEX\\n    );\\n\\n  const IDENTIFIER_REGEX = concat(\\n    optional(/\\\\.|\\\\.\\\\/|\\\\//), // relative or absolute path\\n    ANY_ID,\\n    anyNumberOfTimes(concat(\\n      PATH_DELIMITER_REGEX,\\n      ANY_ID\\n    ))\\n  );\\n\\n  // identifier followed by a equal-sign (without the equal sign)\\n  const HASH_PARAM_REGEX = concat(\\n    '(',\\n    BRACKET_QUOTED_ID_REGEX, '|',\\n    PLAIN_ID_REGEX,\\n    ')(?==)'\\n  );\\n\\n  const HELPER_NAME_OR_PATH_EXPRESSION = {\\n    begin: IDENTIFIER_REGEX\\n  };\\n\\n  const HELPER_PARAMETER = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {\\n    keywords: LITERALS\\n  });\\n\\n  const SUB_EXPRESSION = {\\n    begin: /\\\\(/,\\n    end: /\\\\)/\\n    // the \\\"contains\\\" is added below when all necessary sub-modes are defined\\n  };\\n\\n  const HASH = {\\n    // fka \\\"attribute-assignment\\\", parameters of the form 'key=value'\\n    className: 'attr',\\n    begin: HASH_PARAM_REGEX,\\n    relevance: 0,\\n    starts: {\\n      begin: /=/,\\n      end: /=/,\\n      starts: {\\n        contains: [\\n          hljs.NUMBER_MODE,\\n          hljs.QUOTE_STRING_MODE,\\n          hljs.APOS_STRING_MODE,\\n          HELPER_PARAMETER,\\n          SUB_EXPRESSION\\n        ]\\n      }\\n    }\\n  };\\n\\n  const BLOCK_PARAMS = {\\n    // parameters of the form '{{#with x as | y |}}...{{/with}}'\\n    begin: /as\\\\s+\\\\|/,\\n    keywords: {\\n      keyword: 'as'\\n    },\\n    end: /\\\\|/,\\n    contains: [\\n      {\\n        // define sub-mode in order to prevent highlighting of block-parameter named \\\"as\\\"\\n        begin: /\\\\w+/\\n      }\\n    ]\\n  };\\n\\n  const HELPER_PARAMETERS = {\\n    contains: [\\n      hljs.NUMBER_MODE,\\n      hljs.QUOTE_STRING_MODE,\\n      hljs.APOS_STRING_MODE,\\n      BLOCK_PARAMS,\\n      HASH,\\n      HELPER_PARAMETER,\\n      SUB_EXPRESSION\\n    ],\\n    returnEnd: true\\n    // the property \\\"end\\\" is defined through inheritance when the mode is used. If depends\\n    // on the surrounding mode, but \\\"endsWithParent\\\" does not work here (i.e. it includes the\\n    // end-token of the surrounding mode)\\n  };\\n\\n  const SUB_EXPRESSION_CONTENTS = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {\\n    className: 'name',\\n    keywords: BUILT_INS,\\n    starts: hljs.inherit(HELPER_PARAMETERS, {\\n      end: /\\\\)/\\n    })\\n  });\\n\\n  SUB_EXPRESSION.contains = [SUB_EXPRESSION_CONTENTS];\\n\\n  const OPENING_BLOCK_MUSTACHE_CONTENTS = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {\\n    keywords: BUILT_INS,\\n    className: 'name',\\n    starts: hljs.inherit(HELPER_PARAMETERS, {\\n      end: /\\\\}\\\\}/\\n    })\\n  });\\n\\n  const CLOSING_BLOCK_MUSTACHE_CONTENTS = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {\\n    keywords: BUILT_INS,\\n    className: 'name'\\n  });\\n\\n  const BASIC_MUSTACHE_CONTENTS = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {\\n    className: 'name',\\n    keywords: BUILT_INS,\\n    starts: hljs.inherit(HELPER_PARAMETERS, {\\n      end: /\\\\}\\\\}/\\n    })\\n  });\\n\\n  const ESCAPE_MUSTACHE_WITH_PRECEEDING_BACKSLASH = {\\n    begin: /\\\\\\\\\\\\{\\\\{/,\\n    skip: true\\n  };\\n  const PREVENT_ESCAPE_WITH_ANOTHER_PRECEEDING_BACKSLASH = {\\n    begin: /\\\\\\\\\\\\\\\\(?=\\\\{\\\\{)/,\\n    skip: true\\n  };\\n\\n  return {\\n    name: 'Handlebars',\\n    aliases: [\\n      'hbs',\\n      'html.hbs',\\n      'html.handlebars',\\n      'htmlbars'\\n    ],\\n    case_insensitive: true,\\n    subLanguage: 'xml',\\n    contains: [\\n      ESCAPE_MUSTACHE_WITH_PRECEEDING_BACKSLASH,\\n      PREVENT_ESCAPE_WITH_ANOTHER_PRECEEDING_BACKSLASH,\\n      hljs.COMMENT(/\\\\{\\\\{!--/, /--\\\\}\\\\}/),\\n      hljs.COMMENT(/\\\\{\\\\{!/, /\\\\}\\\\}/),\\n      {\\n        // open raw block \\\"{{{{raw}}}} content not evaluated {{{{/raw}}}}\\\"\\n        className: 'template-tag',\\n        begin: /\\\\{\\\\{\\\\{\\\\{(?!\\\\/)/,\\n        end: /\\\\}\\\\}\\\\}\\\\}/,\\n        contains: [OPENING_BLOCK_MUSTACHE_CONTENTS],\\n        starts: {\\n          end: /\\\\{\\\\{\\\\{\\\\{\\\\//,\\n          returnEnd: true,\\n          subLanguage: 'xml'\\n        }\\n      },\\n      {\\n        // close raw block\\n        className: 'template-tag',\\n        begin: /\\\\{\\\\{\\\\{\\\\{\\\\//,\\n        end: /\\\\}\\\\}\\\\}\\\\}/,\\n        contains: [CLOSING_BLOCK_MUSTACHE_CONTENTS]\\n      },\\n      {\\n        // open block statement\\n        className: 'template-tag',\\n        begin: /\\\\{\\\\{#/,\\n        end: /\\\\}\\\\}/,\\n        contains: [OPENING_BLOCK_MUSTACHE_CONTENTS]\\n      },\\n      {\\n        className: 'template-tag',\\n        begin: /\\\\{\\\\{(?=else\\\\}\\\\})/,\\n        end: /\\\\}\\\\}/,\\n        keywords: 'else'\\n      },\\n      {\\n        className: 'template-tag',\\n        begin: /\\\\{\\\\{(?=else if)/,\\n        end: /\\\\}\\\\}/,\\n        keywords: 'else if'\\n      },\\n      {\\n        // closing block statement\\n        className: 'template-tag',\\n        begin: /\\\\{\\\\{\\\\//,\\n        end: /\\\\}\\\\}/,\\n        contains: [CLOSING_BLOCK_MUSTACHE_CONTENTS]\\n      },\\n      {\\n        // template variable or helper-call that is NOT html-escaped\\n        className: 'template-variable',\\n        begin: /\\\\{\\\\{\\\\{/,\\n        end: /\\\\}\\\\}\\\\}/,\\n        contains: [BASIC_MUSTACHE_CONTENTS]\\n      },\\n      {\\n        // template variable or helper-call that is html-escaped\\n        className: 'template-variable',\\n        begin: /\\\\{\\\\{/,\\n        end: /\\\\}\\\\}/,\\n        contains: [BASIC_MUSTACHE_CONTENTS]\\n      }\\n    ]\\n  };\\n}\\n\\nmodule.exports = handlebars;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"concat\",\"args\",\"map\",\"x\",\"source\",\"joined\",\"join\",\"stripOptionsFromArgs\",\"opts\",\"length\",\"constructor\",\"Object\",\"splice\",\"either\",\"capture\",\"handlebars\",\"hljs\",\"BUILT_INS\",\"$pattern\",\"built_in\",\"BRACKET_QUOTED_ID_REGEX\",\"PLAIN_ID_REGEX\",\"ANY_ID\",\"DOUBLE_QUOTED_ID_REGEX\",\"SINGLE_QUOTED_ID_REGEX\",\"IDENTIFIER_REGEX\",\"re\",\"PATH_DELIMITER_REGEX\",\"HASH_PARAM_REGEX\",\"HELPER_NAME_OR_PATH_EXPRESSION\",\"begin\",\"HELPER_PARAMETER\",\"inherit\",\"keywords\",\"LITERALS\",\"literal\",\"SUB_EXPRESSION\",\"end\",\"HELPER_PARAMETERS\",\"contains\",\"NUMBER_MODE\",\"QUOTE_STRING_MODE\",\"APOS_STRING_MODE\",\"BLOCK_PARAMS\",\"keyword\",\"HASH\",\"className\",\"relevance\",\"starts\",\"returnEnd\",\"SUB_EXPRESSION_CONTENTS\",\"OPENING_BLOCK_MUSTACHE_CONTENTS\",\"CLOSING_BLOCK_MUSTACHE_CONTENTS\",\"BASIC_MUSTACHE_CONTENTS\",\"name\",\"aliases\",\"case_insensitive\",\"subLanguage\",\"ESCAPE_MUSTACHE_WITH_PRECEEDING_BACKSLASH\",\"skip\",\"PREVENT_ESCAPE_WITH_ANOTHER_PRECEEDING_BACKSLASH\",\"COMMENT\"]\n}\n"]