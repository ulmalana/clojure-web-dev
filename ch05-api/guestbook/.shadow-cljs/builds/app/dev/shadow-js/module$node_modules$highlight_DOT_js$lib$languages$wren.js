["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/highlight_DOT_js/lib/languages/wren.js"],"~:js","shadow$provide.module$node_modules$highlight_DOT_js$lib$languages$wren=function(global,require,module,exports){function concat(args){for(var $jscomp$restParams=[],$jscomp$restIndex=0;$jscomp$restIndex<arguments.length;++$jscomp$restIndex)$jscomp$restParams[$jscomp$restIndex-0]=arguments[$jscomp$restIndex];return $jscomp$restParams.map(function(x){return x?\"string\"===typeof x?x:x.source:null}).join(\"\")}function stripOptionsFromArgs(args){var opts=args[args.length-1];return\"object\"===typeof opts&&opts.constructor===\nObject?(args.splice(args.length-1,1),opts):{}}function either(args){for(var $jscomp$restParams=[],$jscomp$restIndex=0;$jscomp$restIndex<arguments.length;++$jscomp$restIndex)$jscomp$restParams[$jscomp$restIndex-0]=arguments[$jscomp$restIndex];return\"(\"+(stripOptionsFromArgs($jscomp$restParams).capture?\"\":\"?:\")+$jscomp$restParams.map(function(x){return x?\"string\"===typeof x?x:x.source:null}).join(\"|\")+\")\"}module.exports=function(hljs){var IDENT_RE=/[a-zA-Z]\\w*/,KEYWORDS=\"as break class construct continue else for foreign if import in is return static var while\".split(\" \"),\nLITERALS=[\"true\",\"false\",\"null\"],LANGUAGE_VARS=[\"this\",\"super\"],OPERATORS=[\"-\",\"~\",/\\*/,\"%\",/\\.\\.\\./,/\\.\\./,/\\+/,\"\\x3c\\x3c\",\"\\x3e\\x3e\",\"\\x3e\\x3d\",\"\\x3c\\x3d\",\"\\x3c\",\"\\x3e\",/\\^/,/!=/,/!/,/\\bis\\b/,\"\\x3d\\x3d\",\"\\x26\\x26\",\"\\x26\",/\\|\\|/,/\\|/,/\\?:/,\"\\x3d\"],FUNCTION={relevance:0,match:concat(/\\b(?!(if|while|for|else|super)\\b)/,IDENT_RE,/(?=\\s*[({])/),className:\"title.function\"},FUNCTION_DEFINITION={match:concat(either(concat(/\\b(?!(if|while|for|else|super)\\b)/,IDENT_RE),either.apply(null,$jscomp.arrayFromIterable(OPERATORS))),\n/(?=\\s*\\([^)]+\\)\\s*\\{)/),className:\"title.function\",starts:{contains:[{begin:/\\(/,end:/\\)/,contains:[{relevance:0,scope:\"params\",match:IDENT_RE}]}]}},CLASS_DEFINITION={variants:[{match:[/class\\s+/,IDENT_RE,/\\s+is\\s+/,IDENT_RE]},{match:[/class\\s+/,IDENT_RE]}],scope:{2:\"title.class\",4:\"title.class.inherited\"},keywords:KEYWORDS};OPERATORS={relevance:0,match:either.apply(null,$jscomp.arrayFromIterable(OPERATORS)),className:\"operator\"};var PROPERTY={className:\"property\",begin:concat(/\\./,concat(\"(?\\x3d\",\nIDENT_RE,\")\")),end:IDENT_RE,excludeBegin:!0,relevance:0},FIELD={relevance:0,match:concat(/\\b_/,IDENT_RE),scope:\"variable\"},CLASS_REFERENCE={relevance:0,match:/\\b[A-Z]+[a-z]+([A-Z]+[a-z]+)*/,scope:\"title.class\",keywords:{_:\"Bool Class Fiber Fn List Map Null Num Object Range Sequence String System\".split(\" \")}},NUMBER=hljs.C_NUMBER_MODE;IDENT_RE={match:[IDENT_RE,/\\s*/,/=/,/\\s*/,/\\(/,IDENT_RE,/\\)\\s*\\{/],scope:{1:\"title.function\",3:\"operator\",6:\"params\"}};var COMMENT_DOCS=hljs.COMMENT(/\\/\\*\\*/,/\\*\\//,\n{contains:[{match:/@[a-z]+/,scope:\"doctag\"},\"self\"]}),SUBST={scope:\"subst\",begin:/%\\(/,end:/\\)/,contains:[NUMBER,CLASS_REFERENCE,FUNCTION,FIELD,OPERATORS]},STRING={scope:\"string\",begin:/\"/,end:/\"/,contains:[SUBST,{scope:\"char.escape\",variants:[{match:/\\\\\\\\|\\\\[\"0%abefnrtv]/},{match:/\\\\x[0-9A-F]{2}/},{match:/\\\\u[0-9A-F]{4}/},{match:/\\\\U[0-9A-F]{8}/}]}]};SUBST.contains.push(STRING);SUBST=[].concat($jscomp.arrayFromIterable(KEYWORDS),$jscomp.arrayFromIterable(LANGUAGE_VARS),$jscomp.arrayFromIterable(LITERALS));\nSUBST={relevance:0,match:concat(\"\\\\b(?!\",SUBST.join(\"|\"),\"\\\\b)\",/[a-zA-Z_]\\w*(?:[?!]|\\b)/),className:\"variable\"};return{name:\"Wren\",keywords:{keyword:KEYWORDS,\"variable.language\":LANGUAGE_VARS,literal:LITERALS},contains:[{scope:\"comment\",variants:[{begin:[/#!?/,/[A-Za-z_]+(?=\\()/],beginScope:{},keywords:{literal:LITERALS},contains:[],end:/\\)/},{begin:[/#!?/,/[A-Za-z_]+/],beginScope:{},end:/$/}]},NUMBER,STRING,{className:\"string\",begin:/\"\"\"/,end:/\"\"\"/},COMMENT_DOCS,hljs.C_LINE_COMMENT_MODE,hljs.C_BLOCK_COMMENT_MODE,\nCLASS_REFERENCE,CLASS_DEFINITION,IDENT_RE,FUNCTION_DEFINITION,FUNCTION,OPERATORS,FIELD,PROPERTY,SUBST]}}}","~:source","shadow$provide[\"module$node_modules$highlight_DOT_js$lib$languages$wren\"] = function(global,require,module,exports) {\n/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n\n  return re.source;\n}\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction lookahead(re) {\n  return concat('(?=', re, ')');\n}\n\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\nfunction concat(...args) {\n  const joined = args.map((x) => source(x)).join(\"\");\n  return joined;\n}\n\nfunction stripOptionsFromArgs(args) {\n  const opts = args[args.length - 1];\n\n  if (typeof opts === 'object' && opts.constructor === Object) {\n    args.splice(args.length - 1, 1);\n    return opts;\n  } else {\n    return {};\n  }\n}\n\n/**\n * Any of the passed expresssions may match\n *\n * Creates a huge this | this | that | that match\n * @param {(RegExp | string)[] } args\n * @returns {string}\n */\nfunction either(...args) {\n  const opts = stripOptionsFromArgs(args);\n  const joined = '(' +\n    (opts.capture ? \"\" : \"?:\") +\n    args.map((x) => source(x)).join(\"|\") + \")\";\n  return joined;\n}\n\n/*\nLanguage: Wren\nDescription: Think Smalltalk in a Lua-sized package with a dash of Erlang and wrapped up in a familiar, modern syntax.\nCategory: scripting\nAuthor: @joshgoebel\nMaintainer: @joshgoebel\nWebsite: https://wren.io/\n*/\n\n/** @type LanguageFn */\nfunction wren(hljs) {\n  const IDENT_RE = /[a-zA-Z]\\w*/;\n  const KEYWORDS = [\n    \"as\",\n    \"break\",\n    \"class\",\n    \"construct\",\n    \"continue\",\n    \"else\",\n    \"for\",\n    \"foreign\",\n    \"if\",\n    \"import\",\n    \"in\",\n    \"is\",\n    \"return\",\n    \"static\",\n    \"var\",\n    \"while\"\n  ];\n  const LITERALS = [\n    \"true\",\n    \"false\",\n    \"null\"\n  ];\n  const LANGUAGE_VARS = [\n    \"this\",\n    \"super\"\n  ];\n  const CORE_CLASSES = [\n    \"Bool\",\n    \"Class\",\n    \"Fiber\",\n    \"Fn\",\n    \"List\",\n    \"Map\",\n    \"Null\",\n    \"Num\",\n    \"Object\",\n    \"Range\",\n    \"Sequence\",\n    \"String\",\n    \"System\"\n  ];\n  const OPERATORS = [\n    \"-\",\n    \"~\",\n    /\\*/,\n    \"%\",\n    /\\.\\.\\./,\n    /\\.\\./,\n    /\\+/,\n    \"<<\", \">>\",\n    \">=\", \"<=\",\n    \"<\", \">\",\n    /\\^/,\n    /!=/,\n    /!/,\n    /\\bis\\b/,\n    \"==\",\n    \"&&\",\n    \"&\",\n    /\\|\\|/,\n    /\\|/,\n    /\\?:/,\n    \"=\"\n  ];\n  const FUNCTION = {\n    relevance: 0,\n    match: concat(/\\b(?!(if|while|for|else|super)\\b)/, IDENT_RE, /(?=\\s*[({])/),\n    className: \"title.function\"\n  };\n  const FUNCTION_DEFINITION = {\n    match: concat(\n      either(\n        concat(/\\b(?!(if|while|for|else|super)\\b)/, IDENT_RE),\n        either(...OPERATORS)\n      ),\n      /(?=\\s*\\([^)]+\\)\\s*\\{)/),\n    className: \"title.function\",\n    starts: {\n      contains: [\n        {\n          begin: /\\(/,\n          end: /\\)/,\n          contains: [\n            {\n              relevance: 0,\n              scope: \"params\",\n              match: IDENT_RE\n            }\n          ]\n        }\n      ]\n    }\n  };\n  const CLASS_DEFINITION = {\n    variants: [\n      {\n        match: [\n          /class\\s+/,\n          IDENT_RE,\n          /\\s+is\\s+/,\n          IDENT_RE\n        ]\n      },\n      {\n        match: [\n          /class\\s+/,\n          IDENT_RE\n        ]\n      }\n    ],\n    scope: {\n      2: \"title.class\",\n      4: \"title.class.inherited\"\n    },\n    keywords: KEYWORDS\n  };\n\n  const OPERATOR = {\n    relevance: 0,\n    match: either(...OPERATORS),\n    className: \"operator\"\n  };\n\n  const TRIPLE_STRING = {\n    className: \"string\",\n    begin: /\"\"\"/,\n    end: /\"\"\"/\n  };\n\n  const PROPERTY = {\n    className: \"property\",\n    begin: concat(/\\./, lookahead(IDENT_RE)),\n    end: IDENT_RE,\n    excludeBegin: true,\n    relevance: 0\n  };\n\n  const FIELD = {\n    relevance: 0,\n    match: concat(/\\b_/, IDENT_RE),\n    scope: \"variable\"\n  };\n\n  // CamelCase\n  const CLASS_REFERENCE = {\n    relevance: 0,\n    match: /\\b[A-Z]+[a-z]+([A-Z]+[a-z]+)*/,\n    scope: \"title.class\",\n    keywords: {\n      _: CORE_CLASSES\n    }\n  };\n\n  // TODO: add custom number modes\n  const NUMBER = hljs.C_NUMBER_MODE;\n\n  const SETTER = {\n    match: [\n      IDENT_RE, /\\s*/,\n      /=/, /\\s*/,\n      /\\(/, IDENT_RE, /\\)\\s*\\{/\n    ],\n    scope: {\n      1: \"title.function\",\n      3: \"operator\",\n      6: \"params\"\n    }\n  };\n\n  const COMMENT_DOCS = hljs.COMMENT(\n    /\\/\\*\\*/,\n    /\\*\\//,\n    {\n      contains: [\n        {\n          match: /@[a-z]+/,\n          scope: \"doctag\"\n        },\n        \"self\"\n      ]\n    }\n  );\n  const SUBST = {\n    scope: \"subst\",\n    begin: /%\\(/,\n    end: /\\)/,\n    contains: [\n      NUMBER,\n      CLASS_REFERENCE,\n      FUNCTION,\n      FIELD,\n      OPERATOR\n    ]\n  };\n  const STRING = {\n    scope: \"string\",\n    begin: /\"/,\n    end: /\"/,\n    contains: [\n      SUBST,\n      {\n        scope: \"char.escape\",\n        variants: [\n          { match: /\\\\\\\\|\\\\[\"0%abefnrtv]/ },\n          { match: /\\\\x[0-9A-F]{2}/ },\n          { match: /\\\\u[0-9A-F]{4}/ },\n          { match: /\\\\U[0-9A-F]{8}/ }\n        ]\n      }\n    ]\n  };\n  SUBST.contains.push(STRING);\n\n  const ALL_KWS = [...KEYWORDS, ...LANGUAGE_VARS, ...LITERALS];\n  const VARIABLE = {\n    relevance: 0,\n    match: concat(\n      \"\\\\b(?!\",\n      ALL_KWS.join(\"|\"),\n      \"\\\\b)\",\n      /[a-zA-Z_]\\w*(?:[?!]|\\b)/\n    ),\n    className: \"variable\"\n  };\n\n  // TODO: reconsider this in the future\n  const ATTRIBUTE = {\n    // scope: \"meta\",\n    scope: \"comment\",\n    variants: [\n      {\n        begin: [/#!?/, /[A-Za-z_]+(?=\\()/],\n        beginScope: {\n          // 2: \"attr\"\n        },\n        keywords: {\n          literal: LITERALS\n        },\n        contains: [\n          // NUMBER,\n          // VARIABLE\n        ],\n        end: /\\)/\n      },\n      {\n        begin: [/#!?/, /[A-Za-z_]+/],\n        beginScope: {\n          // 2: \"attr\"\n        },\n        end: /$/\n      }\n    ]\n  };\n\n  return {\n    name: \"Wren\",\n    keywords: {\n      keyword: KEYWORDS,\n      \"variable.language\": LANGUAGE_VARS,\n      literal: LITERALS\n    },\n    contains: [\n      ATTRIBUTE,\n      NUMBER,\n      STRING,\n      TRIPLE_STRING,\n      COMMENT_DOCS,\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      CLASS_REFERENCE,\n      CLASS_DEFINITION,\n      SETTER,\n      FUNCTION_DEFINITION,\n      FUNCTION,\n      OPERATOR,\n      FIELD,\n      PROPERTY,\n      VARIABLE\n    ]\n  };\n}\n\nmodule.exports = wren;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["variants","excludeBegin","begin","className","contains","relevance","name","keyword","scope","_","keywords","beginScope","match","starts","literal","end"]],"~:compiled-at",1668750081717,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$highlight_DOT_js$lib$languages$wren.js\",\n\"lineCount\":8,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/highlight_DOT_js/lib/languages/wren.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$highlight_DOT_js$lib$languages$wren\\\"] = function(global,require,module,exports) {\\n/**\\n * @param {string} value\\n * @returns {RegExp}\\n * */\\n\\n/**\\n * @param {RegExp | string } re\\n * @returns {string}\\n */\\nfunction source(re) {\\n  if (!re) return null;\\n  if (typeof re === \\\"string\\\") return re;\\n\\n  return re.source;\\n}\\n\\n/**\\n * @param {RegExp | string } re\\n * @returns {string}\\n */\\nfunction lookahead(re) {\\n  return concat('(?=', re, ')');\\n}\\n\\n/**\\n * @param {...(RegExp | string) } args\\n * @returns {string}\\n */\\nfunction concat(...args) {\\n  const joined = args.map((x) => source(x)).join(\\\"\\\");\\n  return joined;\\n}\\n\\nfunction stripOptionsFromArgs(args) {\\n  const opts = args[args.length - 1];\\n\\n  if (typeof opts === 'object' && opts.constructor === Object) {\\n    args.splice(args.length - 1, 1);\\n    return opts;\\n  } else {\\n    return {};\\n  }\\n}\\n\\n/**\\n * Any of the passed expresssions may match\\n *\\n * Creates a huge this | this | that | that match\\n * @param {(RegExp | string)[] } args\\n * @returns {string}\\n */\\nfunction either(...args) {\\n  const opts = stripOptionsFromArgs(args);\\n  const joined = '(' +\\n    (opts.capture ? \\\"\\\" : \\\"?:\\\") +\\n    args.map((x) => source(x)).join(\\\"|\\\") + \\\")\\\";\\n  return joined;\\n}\\n\\n/*\\nLanguage: Wren\\nDescription: Think Smalltalk in a Lua-sized package with a dash of Erlang and wrapped up in a familiar, modern syntax.\\nCategory: scripting\\nAuthor: @joshgoebel\\nMaintainer: @joshgoebel\\nWebsite: https://wren.io/\\n*/\\n\\n/** @type LanguageFn */\\nfunction wren(hljs) {\\n  const IDENT_RE = /[a-zA-Z]\\\\w*/;\\n  const KEYWORDS = [\\n    \\\"as\\\",\\n    \\\"break\\\",\\n    \\\"class\\\",\\n    \\\"construct\\\",\\n    \\\"continue\\\",\\n    \\\"else\\\",\\n    \\\"for\\\",\\n    \\\"foreign\\\",\\n    \\\"if\\\",\\n    \\\"import\\\",\\n    \\\"in\\\",\\n    \\\"is\\\",\\n    \\\"return\\\",\\n    \\\"static\\\",\\n    \\\"var\\\",\\n    \\\"while\\\"\\n  ];\\n  const LITERALS = [\\n    \\\"true\\\",\\n    \\\"false\\\",\\n    \\\"null\\\"\\n  ];\\n  const LANGUAGE_VARS = [\\n    \\\"this\\\",\\n    \\\"super\\\"\\n  ];\\n  const CORE_CLASSES = [\\n    \\\"Bool\\\",\\n    \\\"Class\\\",\\n    \\\"Fiber\\\",\\n    \\\"Fn\\\",\\n    \\\"List\\\",\\n    \\\"Map\\\",\\n    \\\"Null\\\",\\n    \\\"Num\\\",\\n    \\\"Object\\\",\\n    \\\"Range\\\",\\n    \\\"Sequence\\\",\\n    \\\"String\\\",\\n    \\\"System\\\"\\n  ];\\n  const OPERATORS = [\\n    \\\"-\\\",\\n    \\\"~\\\",\\n    /\\\\*/,\\n    \\\"%\\\",\\n    /\\\\.\\\\.\\\\./,\\n    /\\\\.\\\\./,\\n    /\\\\+/,\\n    \\\"<<\\\", \\\">>\\\",\\n    \\\">=\\\", \\\"<=\\\",\\n    \\\"<\\\", \\\">\\\",\\n    /\\\\^/,\\n    /!=/,\\n    /!/,\\n    /\\\\bis\\\\b/,\\n    \\\"==\\\",\\n    \\\"&&\\\",\\n    \\\"&\\\",\\n    /\\\\|\\\\|/,\\n    /\\\\|/,\\n    /\\\\?:/,\\n    \\\"=\\\"\\n  ];\\n  const FUNCTION = {\\n    relevance: 0,\\n    match: concat(/\\\\b(?!(if|while|for|else|super)\\\\b)/, IDENT_RE, /(?=\\\\s*[({])/),\\n    className: \\\"title.function\\\"\\n  };\\n  const FUNCTION_DEFINITION = {\\n    match: concat(\\n      either(\\n        concat(/\\\\b(?!(if|while|for|else|super)\\\\b)/, IDENT_RE),\\n        either(...OPERATORS)\\n      ),\\n      /(?=\\\\s*\\\\([^)]+\\\\)\\\\s*\\\\{)/),\\n    className: \\\"title.function\\\",\\n    starts: {\\n      contains: [\\n        {\\n          begin: /\\\\(/,\\n          end: /\\\\)/,\\n          contains: [\\n            {\\n              relevance: 0,\\n              scope: \\\"params\\\",\\n              match: IDENT_RE\\n            }\\n          ]\\n        }\\n      ]\\n    }\\n  };\\n  const CLASS_DEFINITION = {\\n    variants: [\\n      {\\n        match: [\\n          /class\\\\s+/,\\n          IDENT_RE,\\n          /\\\\s+is\\\\s+/,\\n          IDENT_RE\\n        ]\\n      },\\n      {\\n        match: [\\n          /class\\\\s+/,\\n          IDENT_RE\\n        ]\\n      }\\n    ],\\n    scope: {\\n      2: \\\"title.class\\\",\\n      4: \\\"title.class.inherited\\\"\\n    },\\n    keywords: KEYWORDS\\n  };\\n\\n  const OPERATOR = {\\n    relevance: 0,\\n    match: either(...OPERATORS),\\n    className: \\\"operator\\\"\\n  };\\n\\n  const TRIPLE_STRING = {\\n    className: \\\"string\\\",\\n    begin: /\\\"\\\"\\\"/,\\n    end: /\\\"\\\"\\\"/\\n  };\\n\\n  const PROPERTY = {\\n    className: \\\"property\\\",\\n    begin: concat(/\\\\./, lookahead(IDENT_RE)),\\n    end: IDENT_RE,\\n    excludeBegin: true,\\n    relevance: 0\\n  };\\n\\n  const FIELD = {\\n    relevance: 0,\\n    match: concat(/\\\\b_/, IDENT_RE),\\n    scope: \\\"variable\\\"\\n  };\\n\\n  // CamelCase\\n  const CLASS_REFERENCE = {\\n    relevance: 0,\\n    match: /\\\\b[A-Z]+[a-z]+([A-Z]+[a-z]+)*/,\\n    scope: \\\"title.class\\\",\\n    keywords: {\\n      _: CORE_CLASSES\\n    }\\n  };\\n\\n  // TODO: add custom number modes\\n  const NUMBER = hljs.C_NUMBER_MODE;\\n\\n  const SETTER = {\\n    match: [\\n      IDENT_RE, /\\\\s*/,\\n      /=/, /\\\\s*/,\\n      /\\\\(/, IDENT_RE, /\\\\)\\\\s*\\\\{/\\n    ],\\n    scope: {\\n      1: \\\"title.function\\\",\\n      3: \\\"operator\\\",\\n      6: \\\"params\\\"\\n    }\\n  };\\n\\n  const COMMENT_DOCS = hljs.COMMENT(\\n    /\\\\/\\\\*\\\\*/,\\n    /\\\\*\\\\//,\\n    {\\n      contains: [\\n        {\\n          match: /@[a-z]+/,\\n          scope: \\\"doctag\\\"\\n        },\\n        \\\"self\\\"\\n      ]\\n    }\\n  );\\n  const SUBST = {\\n    scope: \\\"subst\\\",\\n    begin: /%\\\\(/,\\n    end: /\\\\)/,\\n    contains: [\\n      NUMBER,\\n      CLASS_REFERENCE,\\n      FUNCTION,\\n      FIELD,\\n      OPERATOR\\n    ]\\n  };\\n  const STRING = {\\n    scope: \\\"string\\\",\\n    begin: /\\\"/,\\n    end: /\\\"/,\\n    contains: [\\n      SUBST,\\n      {\\n        scope: \\\"char.escape\\\",\\n        variants: [\\n          { match: /\\\\\\\\\\\\\\\\|\\\\\\\\[\\\"0%abefnrtv]/ },\\n          { match: /\\\\\\\\x[0-9A-F]{2}/ },\\n          { match: /\\\\\\\\u[0-9A-F]{4}/ },\\n          { match: /\\\\\\\\U[0-9A-F]{8}/ }\\n        ]\\n      }\\n    ]\\n  };\\n  SUBST.contains.push(STRING);\\n\\n  const ALL_KWS = [...KEYWORDS, ...LANGUAGE_VARS, ...LITERALS];\\n  const VARIABLE = {\\n    relevance: 0,\\n    match: concat(\\n      \\\"\\\\\\\\b(?!\\\",\\n      ALL_KWS.join(\\\"|\\\"),\\n      \\\"\\\\\\\\b)\\\",\\n      /[a-zA-Z_]\\\\w*(?:[?!]|\\\\b)/\\n    ),\\n    className: \\\"variable\\\"\\n  };\\n\\n  // TODO: reconsider this in the future\\n  const ATTRIBUTE = {\\n    // scope: \\\"meta\\\",\\n    scope: \\\"comment\\\",\\n    variants: [\\n      {\\n        begin: [/#!?/, /[A-Za-z_]+(?=\\\\()/],\\n        beginScope: {\\n          // 2: \\\"attr\\\"\\n        },\\n        keywords: {\\n          literal: LITERALS\\n        },\\n        contains: [\\n          // NUMBER,\\n          // VARIABLE\\n        ],\\n        end: /\\\\)/\\n      },\\n      {\\n        begin: [/#!?/, /[A-Za-z_]+/],\\n        beginScope: {\\n          // 2: \\\"attr\\\"\\n        },\\n        end: /$/\\n      }\\n    ]\\n  };\\n\\n  return {\\n    name: \\\"Wren\\\",\\n    keywords: {\\n      keyword: KEYWORDS,\\n      \\\"variable.language\\\": LANGUAGE_VARS,\\n      literal: LITERALS\\n    },\\n    contains: [\\n      ATTRIBUTE,\\n      NUMBER,\\n      STRING,\\n      TRIPLE_STRING,\\n      COMMENT_DOCS,\\n      hljs.C_LINE_COMMENT_MODE,\\n      hljs.C_BLOCK_COMMENT_MODE,\\n      CLASS_REFERENCE,\\n      CLASS_DEFINITION,\\n      SETTER,\\n      FUNCTION_DEFINITION,\\n      FUNCTION,\\n      OPERATOR,\\n      FIELD,\\n      PROPERTY,\\n      VARIABLE\\n    ]\\n  };\\n}\\n\\nmodule.exports = wren;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"concat\",\"args\",\"map\",\"x\",\"source\",\"joined\",\"join\",\"stripOptionsFromArgs\",\"opts\",\"length\",\"constructor\",\"Object\",\"splice\",\"either\",\"capture\",\"wren\",\"hljs\",\"IDENT_RE\",\"KEYWORDS\",\"LITERALS\",\"LANGUAGE_VARS\",\"OPERATORS\",\"FUNCTION\",\"relevance\",\"match\",\"className\",\"FUNCTION_DEFINITION\",\"starts\",\"contains\",\"begin\",\"end\",\"scope\",\"CLASS_DEFINITION\",\"variants\",\"keywords\",\"OPERATOR\",\"PROPERTY\",\"excludeBegin\",\"FIELD\",\"CLASS_REFERENCE\",\"_\",\"CORE_CLASSES\",\"NUMBER\",\"C_NUMBER_MODE\",\"SETTER\",\"COMMENT_DOCS\",\"COMMENT\",\"SUBST\",\"STRING\",\"push\",\"ALL_KWS\",\"VARIABLE\",\"name\",\"keyword\",\"literal\",\"ATTRIBUTE\",\"beginScope\",\"TRIPLE_STRING\",\"C_LINE_COMMENT_MODE\",\"C_BLOCK_COMMENT_MODE\"]\n}\n"]