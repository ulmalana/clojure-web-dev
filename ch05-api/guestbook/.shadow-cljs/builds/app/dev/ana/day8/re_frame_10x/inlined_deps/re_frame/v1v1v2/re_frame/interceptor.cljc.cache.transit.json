["^ ","~:output",["^ ","~:js","goog.provide('day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interceptor');\nday8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interceptor.mandatory_interceptor_keys = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"after\",\"after\",594996914),null,new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),null,new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),null], null), null);\nday8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interceptor.interceptor_QMARK_ = (function day8$re_frame_10x$inlined_deps$re_frame$v1v1v2$re_frame$interceptor$interceptor_QMARK_(m){\nreturn ((cljs.core.map_QMARK_(m)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interceptor.mandatory_interceptor_keys,cljs.core.set(cljs.core.keys(m)))));\n});\nday8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interceptor.__GT_interceptor = (function day8$re_frame_10x$inlined_deps$re_frame$v1v1v2$re_frame$interceptor$__GT_interceptor(var_args){\nvar args__4742__auto__ = [];\nvar len__4736__auto___64940 = arguments.length;\nvar i__4737__auto___64941 = (0);\nwhile(true){\nif((i__4737__auto___64941 < len__4736__auto___64940)){\nargs__4742__auto__.push((arguments[i__4737__auto___64941]));\n\nvar G__64942 = (i__4737__auto___64941 + (1));\ni__4737__auto___64941 = G__64942;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4743__auto__ = ((((0) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((0)),(0),null)):null);\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(argseq__4743__auto__);\n});\n\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic = (function (p__64889){\nvar map__64890 = p__64889;\nvar map__64890__$1 = (((((!((map__64890 == null))))?(((((map__64890.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__64890.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__64890):map__64890);\nvar m = map__64890__$1;\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64890__$1,new cljs.core.Keyword(null,\"id\",\"id\",-1388402092));\nvar before = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64890__$1,new cljs.core.Keyword(null,\"before\",\"before\",-1633692388));\nvar after = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64890__$1,new cljs.core.Keyword(null,\"after\",\"after\",594996914));\nif(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interop.debug_enabled_QMARK_){\nvar temp__5733__auto___64957 = cljs.core.seq(clojure.set.difference.cljs$core$IFn$_invoke$arity$2(cljs.core.set(cljs.core.keys(m)),day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interceptor.mandatory_interceptor_keys));\nif(temp__5733__auto___64957){\nvar unknown_keys_64958 = temp__5733__auto___64957;\nday8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: ->interceptor\",m,\"has unknown keys:\",unknown_keys_64958], 0));\n} else {\n}\n} else {\n}\n\nreturn new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),(function (){var or__4126__auto__ = id;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn new cljs.core.Keyword(null,\"unnamed\",\"unnamed\",-26044928);\n}\n})(),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),before,new cljs.core.Keyword(null,\"after\",\"after\",594996914),after], null);\n}));\n\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interceptor.__GT_interceptor.cljs$lang$maxFixedArity = (0));\n\n/** @this {Function} */\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interceptor.__GT_interceptor.cljs$lang$applyTo = (function (seq64871){\nvar self__4724__auto__ = this;\nreturn self__4724__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq64871));\n}));\n\nday8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interceptor.get_effect = (function day8$re_frame_10x$inlined_deps$re_frame$v1v1v2$re_frame$interceptor$get_effect(var_args){\nvar G__64898 = arguments.length;\nswitch (G__64898) {\ncase 1:\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1 = (function (context){\nreturn new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292).cljs$core$IFn$_invoke$arity$1(context);\n}));\n\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$2 = (function (context,key){\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),key], null));\n}));\n\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$3 = (function (context,key,not_found){\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),key], null),not_found);\n}));\n\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interceptor.get_effect.cljs$lang$maxFixedArity = 3);\n\nday8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interceptor.assoc_effect = (function day8$re_frame_10x$inlined_deps$re_frame$v1v1v2$re_frame$interceptor$assoc_effect(context,key,value){\nreturn cljs.core.assoc_in(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),key], null),value);\n});\nday8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interceptor.update_effect = (function day8$re_frame_10x$inlined_deps$re_frame$v1v1v2$re_frame$interceptor$update_effect(var_args){\nvar args__4742__auto__ = [];\nvar len__4736__auto___64970 = arguments.length;\nvar i__4737__auto___64971 = (0);\nwhile(true){\nif((i__4737__auto___64971 < len__4736__auto___64970)){\nargs__4742__auto__.push((arguments[i__4737__auto___64971]));\n\nvar G__64972 = (i__4737__auto___64971 + (1));\ni__4737__auto___64971 = G__64972;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4743__auto__ = ((((3) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((3)),(0),null)):null);\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interceptor.update_effect.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__4743__auto__);\n});\n\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interceptor.update_effect.cljs$core$IFn$_invoke$arity$variadic = (function (context,key,f,args){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$5(cljs.core.update_in,context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),key], null),f,args);\n}));\n\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interceptor.update_effect.cljs$lang$maxFixedArity = (3));\n\n/** @this {Function} */\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interceptor.update_effect.cljs$lang$applyTo = (function (seq64899){\nvar G__64900 = cljs.core.first(seq64899);\nvar seq64899__$1 = cljs.core.next(seq64899);\nvar G__64901 = cljs.core.first(seq64899__$1);\nvar seq64899__$2 = cljs.core.next(seq64899__$1);\nvar G__64902 = cljs.core.first(seq64899__$2);\nvar seq64899__$3 = cljs.core.next(seq64899__$2);\nvar self__4723__auto__ = this;\nreturn self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__64900,G__64901,G__64902,seq64899__$3);\n}));\n\nday8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interceptor.get_coeffect = (function day8$re_frame_10x$inlined_deps$re_frame$v1v1v2$re_frame$interceptor$get_coeffect(var_args){\nvar G__64908 = arguments.length;\nswitch (G__64908) {\ncase 1:\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1 = (function (context){\nreturn new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985).cljs$core$IFn$_invoke$arity$1(context);\n}));\n\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2 = (function (context,key){\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),key], null));\n}));\n\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$3 = (function (context,key,not_found){\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),key], null),not_found);\n}));\n\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interceptor.get_coeffect.cljs$lang$maxFixedArity = 3);\n\nday8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interceptor.assoc_coeffect = (function day8$re_frame_10x$inlined_deps$re_frame$v1v1v2$re_frame$interceptor$assoc_coeffect(context,key,value){\nreturn cljs.core.assoc_in(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),key], null),value);\n});\nday8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interceptor.update_coeffect = (function day8$re_frame_10x$inlined_deps$re_frame$v1v1v2$re_frame$interceptor$update_coeffect(var_args){\nvar args__4742__auto__ = [];\nvar len__4736__auto___65007 = arguments.length;\nvar i__4737__auto___65008 = (0);\nwhile(true){\nif((i__4737__auto___65008 < len__4736__auto___65007)){\nargs__4742__auto__.push((arguments[i__4737__auto___65008]));\n\nvar G__65011 = (i__4737__auto___65008 + (1));\ni__4737__auto___65008 = G__65011;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4743__auto__ = ((((3) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((3)),(0),null)):null);\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interceptor.update_coeffect.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__4743__auto__);\n});\n\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interceptor.update_coeffect.cljs$core$IFn$_invoke$arity$variadic = (function (context,key,f,args){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$5(cljs.core.update_in,context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),key], null),f,args);\n}));\n\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interceptor.update_coeffect.cljs$lang$maxFixedArity = (3));\n\n/** @this {Function} */\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interceptor.update_coeffect.cljs$lang$applyTo = (function (seq64918){\nvar G__64919 = cljs.core.first(seq64918);\nvar seq64918__$1 = cljs.core.next(seq64918);\nvar G__64920 = cljs.core.first(seq64918__$1);\nvar seq64918__$2 = cljs.core.next(seq64918__$1);\nvar G__64921 = cljs.core.first(seq64918__$2);\nvar seq64918__$3 = cljs.core.next(seq64918__$2);\nvar self__4723__auto__ = this;\nreturn self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__64919,G__64920,G__64921,seq64918__$3);\n}));\n\nday8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interceptor.invoke_interceptor_fn = (function day8$re_frame_10x$inlined_deps$re_frame$v1v1v2$re_frame$interceptor$invoke_interceptor_fn(context,interceptor,direction){\nvar temp__5733__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(interceptor,direction);\nif(cljs.core.truth_(temp__5733__auto__)){\nvar f = temp__5733__auto__;\nreturn (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(context) : f.call(null,context));\n} else {\nreturn context;\n}\n});\n/**\n * Loop over all interceptors, calling `direction` function on each,\n *   threading the value of `context` through every call.\n * \n *   `direction` is one of `:before` or `:after`.\n * \n *   Each iteration, the next interceptor to process is obtained from\n *   context's `:queue`. After they are processed, interceptors are popped\n *   from `:queue` and added to `:stack`.\n * \n *   After sufficient iteration, `:queue` will be empty, and `:stack` will\n *   contain all interceptors processed.\n * \n *   Returns updated `context`. Ie. the `context` which has been threaded\n *   through all interceptor functions.\n * \n *   Generally speaking, an interceptor's `:before` function will (if present)\n *   add to a `context's` `:coeffects`, while it's `:after` function\n *   will modify the `context`'s `:effects`.  Very approximately.\n * \n *   But because all interceptor functions are given `context`, and can\n *   return a modified version of it, the way is clear for an interceptor\n *   to introspect the stack or queue, or even modify the queue\n *   (add new interceptors via `enqueue`?). This is a very fluid arrangement.\n */\nday8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interceptor.invoke_interceptors = (function day8$re_frame_10x$inlined_deps$re_frame$v1v1v2$re_frame$interceptor$invoke_interceptors(context,direction){\nvar context__$1 = context;\nwhile(true){\nvar queue = new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879).cljs$core$IFn$_invoke$arity$1(context__$1);\nif(cljs.core.empty_QMARK_(queue)){\nreturn context__$1;\n} else {\nvar interceptor = cljs.core.peek(queue);\nvar stack = new cljs.core.Keyword(null,\"stack\",\"stack\",-793405930).cljs$core$IFn$_invoke$arity$1(context__$1);\nvar G__65019 = day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interceptor.invoke_interceptor_fn(cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(context__$1,new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879),cljs.core.pop(queue),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"stack\",\"stack\",-793405930),cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack,interceptor)], 0)),interceptor,direction);\ncontext__$1 = G__65019;\ncontinue;\n}\nbreak;\n}\n});\nday8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interceptor.enqueue = (function day8$re_frame_10x$inlined_deps$re_frame$v1v1v2$re_frame$interceptor$enqueue(context,interceptors){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(context,new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879),cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.into,day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interop.empty_queue),interceptors);\n});\n/**\n * Create a fresh context\n */\nday8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interceptor.context = (function day8$re_frame_10x$inlined_deps$re_frame$v1v1v2$re_frame$interceptor$context(var_args){\nvar G__64934 = arguments.length;\nswitch (G__64934) {\ncase 2:\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2 = (function (event,interceptors){\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interceptor.enqueue(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interceptor.assoc_coeffect(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interceptor.assoc_coeffect(cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Keyword(null,\"event\",\"event\",301435442),event),new cljs.core.Keyword(null,\"original-event\",\"original-event\",2121330403),event),interceptors);\n}));\n\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$3 = (function (event,interceptors,db){\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interceptor.assoc_coeffect(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2(event,interceptors),new cljs.core.Keyword(null,\"db\",\"db\",993250759),db);\n}));\n\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interceptor.context.cljs$lang$maxFixedArity = 3);\n\n/**\n * Called on completion of `:before` processing, this function prepares/modifies\n * `context` for the backwards sweep of processing in which an interceptor\n * chain's `:after` fns are called.\n * \n *   At this point in processing, the `:queue` is empty and `:stack` holds all\n *   the previously run interceptors. So this function enables the backwards walk\n *   by priming `:queue` with what's currently in `:stack`\n */\nday8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interceptor.change_direction = (function day8$re_frame_10x$inlined_deps$re_frame$v1v1v2$re_frame$interceptor$change_direction(context){\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interceptor.enqueue(cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879)),new cljs.core.Keyword(null,\"stack\",\"stack\",-793405930).cljs$core$IFn$_invoke$arity$1(context));\n});\n/**\n * Executes the given chain (coll) of interceptors.\n * \n * Each interceptor has this form:\n *     {:before  (fn [context] ...)     ;; returns possibly modified context\n *      :after   (fn [context] ...)}    ;; `identity` would be a noop\n * \n * Walks the queue of interceptors from beginning to end, calling the\n * `:before` fn on each, then reverse direction and walk backwards,\n * calling the `:after` fn on each.\n * \n * The last interceptor in the chain presumably wraps an event\n * handler fn. So the overall goal of the process is to \"handle\n * the given event\".\n * \n * Thread a `context` through all calls. `context` has this form:\n * \n *   {:coeffects {:event [:a-query-id :some-param]\n *                :db    <original contents of app-db>}\n *    :effects   {:db    <new value for app-db>\n *                :dispatch  [:an-event-id :param1]}\n *    :queue     <a collection of further interceptors>\n *    :stack     <a collection of interceptors already walked>}\n * \n * `context` has `:coeffects` and `:effects` which, if this was a web\n * server, would be somewhat analogous to `request` and `response`\n * respectively.\n * \n * `coeffects` will contain data like `event` and the initial\n * state of `db` -  the inputs required by the event handler\n * (sitting presumably on the end of the chain), while handler-returned\n * side effects are put into `:effects` including, but not limited to,\n * new values for `db`.\n * \n * The first few interceptors in a chain will likely have `:before`\n * functions which \"prime\" the `context` by adding the event, and\n * the current state of app-db into `:coeffects`. But interceptors can\n * add whatever they want to `:coeffects` - perhaps the event handler needs\n * some information from localstore, or a random number, or access to\n * a DataScript connection.\n * \n * Equally, some interceptors in the chain will have `:after` fn\n * which can process the side effects accumulated into `:effects`\n * including but, not limited to, updates to app-db.\n * \n * Through both stages (before and after), `context` contains a `:queue`\n * of interceptors yet to be processed, and a `:stack` of interceptors\n * already done.  In advanced cases, these values can be modified by the\n * functions through which the context is threaded.\n */\nday8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interceptor.execute = (function day8$re_frame_10x$inlined_deps$re_frame$v1v1v2$re_frame$interceptor$execute(event_v,interceptors){\nif(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__64816__auto___65025 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"interceptors\",\"interceptors\",-1546782951),interceptors], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"interceptors\",\"interceptors\",-1546782951),interceptors], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\n(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.trace._STAR_current_trace_STAR_ = new_trace__64816__auto___65025);\n\n} else {\n}\n\nreturn day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interceptor.invoke_interceptors(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interceptor.change_direction(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interceptor.invoke_interceptors(day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2(event_v,interceptors),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388))),new cljs.core.Keyword(null,\"after\",\"after\",594996914));\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/interceptor.cljc","~:line",1,"~:column",33,"~:end-line",1,"~:end-column",100,"~:mranderson/inlined",true],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index","~$highlight.js","~$module$node_modules$highlight_DOT_js$lib$index","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.interceptor","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.loggers","^R","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.interop","^S","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.trace","^T","~$trace","^T","~$clojure.set","^V","~$set","^V","~$cljs.core","^X","~$goog","^Y"],"~:seen",["^K",["~:require"]],"~:uses",["^ ","~$console","^R","~$empty-queue","^S","~$debug-enabled?","^S"],"~:require-macros",["^ ","^T","^T","^U","^T","^X","^X"],"~:form",["~#list",["~$ns","^M",["^16",["^[",["^R","~:refer",["^11"]],["^S","^18",["^12","^13"]],["^T","~:as","^U","~:include-macros",true],["^V","^19","^W"]]]]],"~:flags",["^ ","^[",["^K",[]]],"~:js-deps",["^ "],"~:deps",["^Y","^X","^R","^S","^T","^V"]],"^O","^M","~:resource-id",["~:shadow.build.classpath/resource","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/interceptor.cljc"],"~:compiled-at",1668750084759,"~:resource-name","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/interceptor.cljc","~:warnings",[],"~:source","(ns ^{:mranderson/inlined true} day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.interceptor\n  (:require\n    [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.loggers :refer [console]]\n    [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.interop :refer [empty-queue debug-enabled?]]\n    [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.trace :as trace :include-macros true]\n    [clojure.set :as set]))\n\n\n(def mandatory-interceptor-keys #{:id :after :before})\n\n(defn interceptor?\n  [m]\n  (and (map? m)\n       (= mandatory-interceptor-keys (-> m keys set))))\n\n\n(defn ->interceptor\n  [& {:as m :keys [id before after]}]\n  (when debug-enabled?\n    (if-let [unknown-keys (seq (set/difference\n                                (-> m keys set)\n                                mandatory-interceptor-keys))]\n      (console :error \"re-frame: ->interceptor\" m \"has unknown keys:\" unknown-keys)))\n  {:id     (or id :unnamed)\n   :before before\n   :after  after})\n\n;; -- Effect Helpers  -----------------------------------------------------------------------------\n\n(defn get-effect\n  ([context]\n   (:effects context))\n  ([context key]\n   (get-in context [:effects key]))\n  ([context key not-found]\n   (get-in context [:effects key] not-found)))\n\n(defn assoc-effect\n  [context key value]\n  (assoc-in context [:effects key] value))\n\n(defn update-effect\n  [context key f & args]\n  (apply update-in context [:effects key] f args))\n\n;; -- CoEffect Helpers  ---------------------------------------------------------------------------\n\n(defn get-coeffect\n  ([context]\n   (:coeffects context))\n  ([context key]\n   (get-in context [:coeffects key]))\n  ([context key not-found]\n   (get-in context [:coeffects key] not-found)))\n\n(defn assoc-coeffect\n  [context key value]\n  (assoc-in context [:coeffects key] value))\n\n(defn update-coeffect\n  [context key f & args]\n  (apply update-in context [:coeffects key] f args))\n\n;; -- Execute Interceptor Chain  ------------------------------------------------------------------\n\n\n(defn- invoke-interceptor-fn\n  [context interceptor direction]\n  (if-let [f (get interceptor direction)]\n    (f context)\n    context))\n\n\n(defn- invoke-interceptors\n  \"Loop over all interceptors, calling `direction` function on each,\n  threading the value of `context` through every call.\n\n  `direction` is one of `:before` or `:after`.\n\n  Each iteration, the next interceptor to process is obtained from\n  context's `:queue`. After they are processed, interceptors are popped\n  from `:queue` and added to `:stack`.\n\n  After sufficient iteration, `:queue` will be empty, and `:stack` will\n  contain all interceptors processed.\n\n  Returns updated `context`. Ie. the `context` which has been threaded\n  through all interceptor functions.\n\n  Generally speaking, an interceptor's `:before` function will (if present)\n  add to a `context's` `:coeffects`, while it's `:after` function\n  will modify the `context`'s `:effects`.  Very approximately.\n\n  But because all interceptor functions are given `context`, and can\n  return a modified version of it, the way is clear for an interceptor\n  to introspect the stack or queue, or even modify the queue\n  (add new interceptors via `enqueue`?). This is a very fluid arrangement.\"\n  ([context direction]\n   (loop [context context]\n     (let [queue (:queue context)]        ;; future interceptors\n       (if (empty? queue)\n         context\n         (let [interceptor (peek queue)   ;; next interceptor to call\n               stack (:stack context)]    ;; already completed interceptors\n           (recur (-> context\n                      (assoc :queue (pop queue)\n                             :stack (conj stack interceptor))\n                      (invoke-interceptor-fn interceptor direction)))))))))\n\n\n(defn enqueue\n  [context interceptors]\n  (update context :queue\n          (fnil into empty-queue)\n          interceptors))\n\n\n(defn- context\n  \"Create a fresh context\"\n  ([event interceptors]\n   (-> {}\n      (assoc-coeffect :event event)\n      ;; Some interceptors, like `trim-v` and `unwrap`, alter event so capture\n      ;; the original for use cases such as tracing.\n      (assoc-coeffect :original-event event)\n      (enqueue interceptors)))\n  ([event interceptors db]      ;; only used in tests, probably a hack, remove ?  XXX\n   (-> (context event interceptors)\n       (assoc-coeffect :db db))))\n\n\n(defn- change-direction\n  \"Called on completion of `:before` processing, this function prepares/modifies\n   `context` for the backwards sweep of processing in which an interceptor\n   chain's `:after` fns are called.\n\n  At this point in processing, the `:queue` is empty and `:stack` holds all\n  the previously run interceptors. So this function enables the backwards walk\n  by priming `:queue` with what's currently in `:stack`\"\n  [context]\n  (-> context\n      (dissoc :queue)\n      (enqueue (:stack context))))\n\n\n(defn execute\n  \"Executes the given chain (coll) of interceptors.\n\n   Each interceptor has this form:\n       {:before  (fn [context] ...)     ;; returns possibly modified context\n        :after   (fn [context] ...)}    ;; `identity` would be a noop\n\n   Walks the queue of interceptors from beginning to end, calling the\n   `:before` fn on each, then reverse direction and walk backwards,\n   calling the `:after` fn on each.\n\n   The last interceptor in the chain presumably wraps an event\n   handler fn. So the overall goal of the process is to \\\"handle\n   the given event\\\".\n\n   Thread a `context` through all calls. `context` has this form:\n\n     {:coeffects {:event [:a-query-id :some-param]\n                  :db    <original contents of app-db>}\n      :effects   {:db    <new value for app-db>\n                  :dispatch  [:an-event-id :param1]}\n      :queue     <a collection of further interceptors>\n      :stack     <a collection of interceptors already walked>}\n\n   `context` has `:coeffects` and `:effects` which, if this was a web\n   server, would be somewhat analogous to `request` and `response`\n   respectively.\n\n   `coeffects` will contain data like `event` and the initial\n   state of `db` -  the inputs required by the event handler\n   (sitting presumably on the end of the chain), while handler-returned\n   side effects are put into `:effects` including, but not limited to,\n   new values for `db`.\n\n   The first few interceptors in a chain will likely have `:before`\n   functions which \\\"prime\\\" the `context` by adding the event, and\n   the current state of app-db into `:coeffects`. But interceptors can\n   add whatever they want to `:coeffects` - perhaps the event handler needs\n   some information from localstore, or a random number, or access to\n   a DataScript connection.\n\n   Equally, some interceptors in the chain will have `:after` fn\n   which can process the side effects accumulated into `:effects`\n   including but, not limited to, updates to app-db.\n\n   Through both stages (before and after), `context` contains a `:queue`\n   of interceptors yet to be processed, and a `:stack` of interceptors\n   already done.  In advanced cases, these values can be modified by the\n   functions through which the context is threaded.\"\n  [event-v interceptors]\n  (trace/merge-trace!\n    {:tags {:interceptors interceptors}})\n  (-> (context event-v interceptors)\n      (invoke-interceptors :before)\n      change-direction\n      (invoke-interceptors :after)))\n","~:reader-features",["^K",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings",";AAQA,AAAA,AAAA,AAAA,AAAA,AAAKA;AAEL,AAAA,AAAMC,AACHC;AADH,AAEE,AAAK,AAACC,AAAKD,AACN,AAACE,AAAEJ,AAA2B,AAAA,AAAIE,AAAEG,AAAKC;;AAGhD,AAAA,AAAA,AAAAC,AAAMM;AAAN,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAK,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAAG,AAAMD;AAAN,AAAA,AAAAE,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAAA,AACUb;AADV,AAAAiB,AAAAJ,AAAA,AACmBQ;AADnB,AAAAJ,AAAAJ,AAAA,AACsBS;AADtB,AAAAL,AAAAJ,AAAA,AAC6BU;AAD7B,AAEE,AAAMC;AAAN,AACE,AAAAC,AAAsB,AAACL,AAAI,AAACO,AACA,AAAA,AAAI3B,AAAEG,AAAKC,AACXN;AAF5B,AAAA,AAAA2B;AAAA,AAAAA,AAASC;AAAT,AAGE,AAAA,AAAA,AAAA,AAACE,AAAyC5B,AAAsB0B;;AAHlE;;AADF;;AAFF,AAAA,AAOW,AAAAG,AAAIR;AAAJ,AAAA,AAAAQ;AAAAA;;AAAA;;AAPX,AAAA,AAQWP,AACAC;;;AATX,AAAA,AAAA,AAAMZ;;AAAN;AAAA,AAAA,AAAA,AAAAO,AAAMP;AAAN,AAAA,AAAAQ,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAC,AAAAF;;;AAAA,AAaA,AAAA,AAAA,AAAAb,AAAM0B;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMD,AACFE;AADJ,AAEG,AAAA,AAAUA;;;AAFb,AAAA,AAAA,AAAMF,AAGFE,AAAQC;AAHZ,AAIG,AAAA,AAAA,AAACC,AAAOF,AAAkBC;;;AAJ7B,AAAA,AAAA,AAAMH,AAKFE,AAAQC,AAAIE;AALhB,AAMG,AAAA,AAAA,AAACD,AAAOF,AAAkBC,AAAKE;;;AANlC,AAAA,AAAA,AAAML;;AAAN,AAQA,AAAA,AAAMM,AACHJ,AAAQC,AAAII;AADf,AAEE,AAAA,AAAA,AAACC,AAASN,AAAkBC,AAAKI;;AAEnC,AAAA,AAAA,AAAAjC,AAAMmC;AAAN,AAAA,AAAAlC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAkC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA/B;;;AAAA,AAAA,AAAA,AAAA,AAAM+B,AACHP,AAAQC,AAAIc,AAAIC;AADnB,AAEE,AAAA,AAAA,AAAClC,AAAMmC,AAAUjB,AAAkBC,AAAKc,AAAEC;;;AAF5C,AAAA,AAAA,AAAMT;;AAAN;AAAA,AAAA,AAAA,AAAAC,AAAMD;AAAN,AAAA,AAAAE,AAAA,AAAAC,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAAI,AAAA,AAAAF,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAAK,AAAA,AAAAH,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAA,AAAA,AAAAM,AAAA;AAAA,AAAA,AAAAA,AAAAL,AAAAG,AAAAC,AAAAL;;;AAAA,AAMA,AAAA,AAAA,AAAApC,AAAM+C;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAApB,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMoB,AACFnB;AADJ,AAEG,AAAA,AAAYA;;;AAFf,AAAA,AAAA,AAAMmB,AAGFnB,AAAQC;AAHZ,AAIG,AAAA,AAAA,AAACC,AAAOF,AAAoBC;;;AAJ/B,AAAA,AAAA,AAAMkB,AAKFnB,AAAQC,AAAIE;AALhB,AAMG,AAAA,AAAA,AAACD,AAAOF,AAAoBC,AAAKE;;;AANpC,AAAA,AAAA,AAAMgB;;AAAN,AAQA,AAAA,AAAMC,AACHpB,AAAQC,AAAII;AADf,AAEE,AAAA,AAAA,AAACC,AAASN,AAAoBC,AAAKI;;AAErC,AAAA,AAAA,AAAAjC,AAAMiD;AAAN,AAAA,AAAAhD,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAgD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA7C;;;AAAA,AAAA,AAAA,AAAA,AAAM6C,AACHrB,AAAQC,AAAIc,AAAIC;AADnB,AAEE,AAAA,AAAA,AAAClC,AAAMmC,AAAUjB,AAAoBC,AAAKc,AAAEC;;;AAF9C,AAAA,AAAA,AAAMK;;AAAN;AAAA,AAAA,AAAA,AAAAC,AAAMD;AAAN,AAAA,AAAAE,AAAA,AAAAb,AAAAY;AAAAA,AAAA,AAAAX,AAAAW;AAAAE,AAAA,AAAAd,AAAAY;AAAAA,AAAA,AAAAX,AAAAW;AAAAG,AAAA,AAAAf,AAAAY;AAAAA,AAAA,AAAAX,AAAAW;AAAA,AAAA,AAAAR,AAAA;AAAA,AAAA,AAAAA,AAAAS,AAAAC,AAAAC,AAAAH;;;AAAA,AAOA,AAAA,AAAOI,AACJ1B,AAAQ2B,AAAYC;AADvB,AAEE,AAAApC,AAAW,AAACR,AAAI2C,AAAYC;AAA5B,AAAA,AAAApC;AAAA,AAAAA,AAASuB;AAAT,AACE,AAACA,AAAAA,AAAAA,AAAEf,AAAAA;;AACHA;;;AAGJ;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,AAAO6B,AAwBH7B,AAAQ4B;AAxBZ,AAyBG,AAAO5B,AAAQA;;AAAf,AACE,AAAM8B,AAAM,AAAA,AAAQ9B;AAApB,AACE,AAAI,AAAC+B,AAAOD;AACV9B;;AACA,AAAM2B,AAAY,AAACK,AAAKF;AAClBG,AAAM,AAAA,AAAQjC;AADpB,AAEE,AAAWA,AACA,AAAA,AAAA,AAACkC,AAAa,AAACC,AAAIL,AACL,AAACM,AAAKH,AAAMN,AAC1B,AAACD,AAAsBC,AAAYC;;;;;;;AAGzD,AAAA,AAAMS,AACHrC,AAAQsC;AADX,AAEE,AAAA,AAACC,AAAOvC,AACA,AAACwC,AAAKC,AAAKC,AACXJ;;AAGV,AAAA;;;AAAA,AAAAlE,AAAOwE;AAAP,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAA7C,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAO6C,AAEHC,AAAMP;AAFV,AAIM,AAAA,AAAA,AAAClB,AAAsByB,AAGvB,AAAA,AAACzB,AAA+ByB,AAChC,AAACR,AAAQC;;;AARf,AAAA,AAAA,AAAOM,AASHC,AAAMP,AAAaQ;AATvB,AAUO,AAACC,AAAQF,AAAMP,AACf,AAAA,AAAClB,AAAmB0B;;;AAX3B,AAAA,AAAA,AAAOF;;AAAP,AAcA;;;;;;;;;AAAA,AAAOI,AAQJhD;AARH,AASMA,AACA,AAAA,AAACiD,AACD,AAACZ,AAAQ,AAAA,AAAQrC;;AAGvB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,AAAMkD,AAiDHC,AAAQb;AAjDX,AAkDE,AAAA,AAAAc;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAf,AAAAgB,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAP,AAAA,AAAA,AAAA,AAAA,AAAA,AACwBX,AAAAA;AADxB,AAAA,AAAAiB,AAAAF;;AAAA;AAAA;;AAEI,AAACN,AAAQI,AAAQb,AACjB,AAAA,AAACT,AACDmB,AACA,AAAA,AAAA,AAACnB","names",["day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.interceptor/mandatory-interceptor-keys","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.interceptor/interceptor?","m","cljs.core/map?","cljs.core._EQ_","cljs.core/keys","cljs.core/set","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.interceptor/->interceptor","p__64889","map__64890","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","seq64871","self__4724__auto__","cljs.core/seq","id","before","after","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.interop/debug-enabled?","temp__5733__auto__","unknown-keys","clojure.set.difference","day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.loggers.console","or__4126__auto__","G__64898","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.interceptor/get-effect","js/Error","context","key","cljs.core.get_in","not-found","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.interceptor/assoc-effect","value","cljs.core/assoc-in","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.interceptor/update-effect","seq64899","G__64900","cljs.core/first","cljs.core/next","G__64901","G__64902","self__4723__auto__","f","args","cljs.core/update-in","G__64908","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.interceptor/get-coeffect","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.interceptor/assoc-coeffect","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.interceptor/update-coeffect","seq64918","G__64919","G__64920","G__64921","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.interceptor/invoke-interceptor-fn","interceptor","direction","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.interceptor/invoke-interceptors","queue","cljs.core/empty?","cljs.core/peek","stack","cljs.core.assoc","cljs.core/pop","cljs.core.conj","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.interceptor/enqueue","interceptors","cljs.core.update","cljs.core.fnil","cljs.core/into","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.interop/empty-queue","G__64934","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.interceptor/context","event","db","day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interceptor.context","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.interceptor/change-direction","cljs.core.dissoc","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.interceptor/execute","event-v","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.trace/is-trace-enabled?","new-trace__64816__auto__","cljs.core.merge","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.trace/*current-trace*","cljs.core/merge"]],"~:used-vars",["^K",["~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.interceptor/change-direction","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.interceptor/invoke-interceptor-fn","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.interceptor/get-coeffect","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.interop/empty-queue","~$cljs.core/=","~$cljs.core/keys","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.trace/is-trace-enabled?","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.interceptor/assoc-effect","~$cljs.core/seq","~$cljs.core/apply","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.interop/debug-enabled?","~$cljs.core/dissoc","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.interceptor/execute","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.interceptor/mandatory-interceptor-keys","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.trace/*current-trace*","~$cljs.core/pop","~$cljs.core/set","~$cljs.core/empty?","~$cljs.core/fnil","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.interceptor/interceptor?","~$cljs.core/into","~$cljs.core/map?","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.interceptor/update-coeffect","~$cljs.core/conj","~$cljs.core/update","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.interceptor/assoc-coeffect","~$cljs.core/get-in","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.loggers/console","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.interceptor/context","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.interceptor/get-effect","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.interceptor/enqueue","~$cljs.core/assoc","~$cljs.core/assoc-in","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.interceptor/->interceptor","~$cljs.core/update-in","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.interceptor/invoke-interceptors","~$js/Error","~$day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.interceptor/update-effect"]]],"~:cache-keys",["~#cmap",[["^1?","goog/dom/tagname.js"],["6025affb7181cd40418600864f58eed1ea80055d","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^K",[]],"~:deps-syms",["^Y","~$goog.dom.HtmlElement"]]],["^1?","goog/labs/useragent/platform.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^K",[]],"^2J",["^Y","~$goog.labs.userAgent.util","~$goog.string"]]],["^1?","goog/math/math.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^K",[]],"^2J",["^Y","~$goog.array","~$goog.asserts"]]],["^1?","goog/html/trustedtypes.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^K",[]],"^2J",["^Y"]]],["^1?","goog/events/eventtype.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^K",[]],"^2J",["^Y","~$goog.events.BrowserFeature","~$goog.userAgent"]]],["^1?","goog/labs/useragent/browser.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^K",[]],"^2J",["^Y","^2N","^2L","~$goog.object","~$goog.string.internal"]]],["^1?","goog/html/safeurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^K",[]],"^2J",["^Y","^2O","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^2S"]]],["^1?","goog/array/array.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^K",[]],"^2J",["^Y","^2O"]]],["^1?","goog/useragent/useragent.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^K",[]],"^2J",["^Y","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^2L","~$goog.reflect","^2M"]]],["^1?","day8/re_frame_10x/inlined_deps/reagent/v1v0v0/reagent/ratom.cljs"],["b62e3632bcb12831abdceed273b41eefc80e66c4","^2G",["^ ","^2H",null,"^2I",["^K",[]],"^2J",["^Y","^X","~$day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.impl.util","~$day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.debug","~$day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.impl.batching","^V","^2R"]]],["^1?","goog/debug/error.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^K",[]],"^2J",["^Y"]]],["^1?","goog/events/events.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^K",[]],"^2J",["^Y","^2O","~$goog.debug.entryPointRegistry","~$goog.events.BrowserEvent","^2P","~$goog.events.Listenable","~$goog.events.ListenerMap"]]],["^1?","goog/events/browserfeature.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^K",[]],"^2J",["^Y","^2Q"]]],["^1?","goog/dom/nodetype.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^K",[]],"^2J",["^Y"]]],["^1?","day8/re_frame_10x/inlined_deps/reagent/v1v0v0/reagent/impl/protocols.cljs"],["b62e3632bcb12831abdceed273b41eefc80e66c4","^2G",["^ ","^2H",null,"^2I",["^K",[]],"^2J",["^Y","^X"]]],["^1?","goog/disposable/disposable.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^K",[]],"^2J",["^Y","~$goog.disposable.IDisposable"]]],["^1?","day8/re_frame_10x/inlined_deps/reagent/v1v0v0/reagent/impl/input.cljs"],["b62e3632bcb12831abdceed273b41eefc80e66c4","^2G",["^ ","^2H",null,"^2I",["^K",[]],"^2J",["^Y","^X","~$day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.impl.component","^34","~$day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.impl.protocols"]]],["^1?","goog/string/typedstring.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^K",[]],"^2J",["^Y"]]],["~:shadow.build.npm/resource","node_modules/react/index.js"],["d2b3d9e8fa8186b8aeddfc91d01d70689433d1f4","ec51811aee0e84dcb5ca27e77681d692f87bd8e2","a69a7f3d4a4636bf9035bc53c05b2d99a7b8af7f","^2G",["^ ","^2H",null,"^2I",["^K",[]],"^2J",["~$shadow.js","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"]]],["^1?","shadow/js.js"],["fa1e82c50ca54c81300cceeb10716bdd3f414429","^2G",["^ ","^2H",null,"^2I",["^K",[]],"^2J",["^Y"]]],["^1?","goog/object/object.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^K",[]],"^2J",["^Y"]]],["^1?","goog/dom/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^K",[]],"^2J",["^Y","^2O"]]],"~:SHADOW-TIMESTAMP",[1668744077000,1668744077000,1668745156000],["^3<","node_modules/react/cjs/react.development.js"],["d2b3d9e8fa8186b8aeddfc91d01d70689433d1f4","ec51811aee0e84dcb5ca27e77681d692f87bd8e2","2d5bc5b3fb2e19279e31e634b0695b1fd96a54f3","^2G",["^ ","^2H",null,"^2I",["^K",[]],"^2J",["^3=","~$module$node_modules$object_assign$index"]]],["^1?","goog/math/long.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^K",[]],"^2J",["^Y","^2O","^31"]]],["^1?","goog/events/listener.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^K",[]],"^2J",["^Y","~$goog.events.ListenableKey"]]],["^1?","goog/html/trustedresourceurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^K",[]],"^2J",["^Y","^2O","~$goog.html.trustedtypes","^2V","^2W","^2X","^2Y"]]],["^1?","goog/events/listenermap.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^K",[]],"^2J",["^Y","^2N","~$goog.events.Listener","^2R"]]],["^1?","goog/events/eventid.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^K",[]],"^2J",["^Y"]]],["^1?","goog/string/internal.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^K",[]],"^2J",["^Y"]]],["^1?","day8/re_frame_10x/inlined_deps/reagent/v1v0v0/reagent/impl/template.cljs"],["b62e3632bcb12831abdceed273b41eefc80e66c4","^2G",["^ ","^2H",null,"^2I",["^K",[]],"^2J",["^Y","^X","^@","~$clojure.string","^32","^3:","^34","~$day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.impl.input","^3;","~$day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.ratom","^33","^2R"]]],["^1?","goog/functions/functions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^K",[]],"^2J",["^Y"]]],["^1?","goog/html/safestyle.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^K",[]],"^2J",["^Y","^2N","^2O","~$goog.html.SafeUrl","^2X","^2Y","^2S"]]],["^1?","goog/dom/safe.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^K",[]],"^2J",["^Y","^2O","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","~$goog.html.SafeScript","~$goog.html.SafeStyle","^3H","^2U","~$goog.html.uncheckedconversions","^2X","^2S"]]],["^1?","clojure/walk.cljs"],["16d93c2274e5f02773c418ade96d56ba9a02d17e","^2G",["^ ","^2H",null,"^2I",["^K",[]],"^2J",["^Y","^X"]]],["^1?","goog/structs/map.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^K",[]],"^2J",["^Y","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1?","goog/html/safehtml.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^K",[]],"^2J",["^Y","^2N","^2O","~$goog.dom.TagName","~$goog.dom.tags","^3L","^3M","~$goog.html.SafeStyleSheet","^3H","^2U","^3C","^2V","^2W","^2Z","^2R","^2X","^2Y","^2S"]]],["^1?","goog/dom/tags.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^K",[]],"^2J",["^Y","^2R"]]],["^1?","goog/math/size.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^K",[]],"^2J",["^Y"]]],["^1?","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/interceptor.cljc"],["b62e3632bcb12831abdceed273b41eefc80e66c4","^2G",["^ ","^2H",null,"^2I",["^K",[]],"^2J",["^Y","^X","^R","^S","^T","^V"]]],["^1?","goog/labs/useragent/engine.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^K",[]],"^2J",["^Y","^2N","^2L","^2M"]]],["^1?","goog/dom/dom.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^K",[]],"^2J",["^Y","^2N","^2O","~$goog.dom.BrowserFeature","~$goog.dom.NodeType","^3Q","~$goog.dom.safe","^3K","^3N","~$goog.math.Coordinate","~$goog.math.Size","^2R","^2M","~$goog.string.Unicode","^2Q"]]],["^1?","goog/asserts/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^K",[]],"^2J",["^Y","~$goog.debug.Error","^3U"]]],["^1?","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/loggers.cljc"],["b62e3632bcb12831abdceed273b41eefc80e66c4","^2G",["^ ","^2H",null,"^2I",["^K",[]],"^2J",["^Y","^X","^V"]]],["^1?","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/interop.cljs"],["b62e3632bcb12831abdceed273b41eefc80e66c4","^2G",["^ ","^2H",null,"^2I",["^K",[]],"^2J",["^Y","^X","~$goog.async.nextTick","~$goog.events","~$day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.core","^3G"]]],["^1?","goog/uri/uri.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^K",[]],"^2J",["^Y","^2N","^2O","^2M","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1?","day8/re_frame_10x/inlined_deps/reagent/v1v0v0/reagent/core.cljs"],["b62e3632bcb12831abdceed273b41eefc80e66c4","^2G",["^ ","^2H",null,"^2I",["^K",[]],"^2J",["^Y","^X","^@","~$day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.impl.template","^3:","^32","^34","^3;","^3G","^33"]]],["^1?","goog/i18n/bidi.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^K",[]],"^2J",["^Y"]]],["^3<","node_modules/object-assign/index.js"],["d2b3d9e8fa8186b8aeddfc91d01d70689433d1f4","ec51811aee0e84dcb5ca27e77681d692f87bd8e2","519ffd5a4c91b67302cc9947b794966d629860cd","^2G",["^ ","^2H",null,"^2I",["^K",[]],"^2J",["^3="]]],["^1?","goog/disposable/idisposable.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^K",[]],"^2J",["^Y"]]],["^1?","goog/fs/url.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^K",[]],"^2J",["^Y"]]],["^1?","goog/base.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^K",[]],"^2J",[]]],["^1?","goog/structs/structs.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^K",[]],"^2J",["^Y","^2N","^2R"]]],["^1?","clojure/string.cljs"],["16d93c2274e5f02773c418ade96d56ba9a02d17e","^2G",["^ ","^2H",null,"^2I",["^K",[]],"^2J",["^Y","^X","^2M","~$goog.string.StringBuffer"]]],["^3<","node_modules/react/cjs/react.production.min.js"],["d2b3d9e8fa8186b8aeddfc91d01d70689433d1f4","ec51811aee0e84dcb5ca27e77681d692f87bd8e2","6093d43b27c84de58b9ce55e3a930469339c9e54","^2G",["^ ","^2H",null,"^2I",["^K",[]],"^2J",["^3=","^3A"]]],["^1?","goog/debug/entrypointregistry.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^K",[]],"^2J",["^Y","^2O"]]],["^1?","goog/string/string.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^K",[]],"^2J",["^Y","^3V","^3N","^2X","^2S"]]],["^1?","goog/reflect/reflect.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^K",[]],"^2J",["^Y"]]],["^1?","goog/labs/useragent/util.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^K",[]],"^2J",["^Y","^2S"]]],["^1?","goog/debug/debug.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^K",[]],"^2J",["^Y","^2N","~$goog.debug.errorcontext","^2Q"]]],["^1?","goog/string/stringbuffer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^K",[]],"^2J",["^Y"]]],["^1?","goog/math/coordinate.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^K",[]],"^2J",["^Y","~$goog.math"]]],["^1?","goog/debug/errorcontext.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^K",[]],"^2J",["^Y"]]],["^1?","goog/iter/iter.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^K",[]],"^2J",["^Y","^2N","^2O","^3J","^4:"]]],["^1?","goog/async/nexttick.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^K",[]],"^2J",["^Y","^35","~$goog.dom","^3Q","^3V","^3J","^3K","^2U","^2Z","^2[","^2X"]]],["^1?","goog/html/uncheckedconversions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^K",[]],"^2J",["^Y","^2O","^3K","^3L","^3M","^3S","^3H","^2U","^2X","^2S"]]],["^1?","goog/events/event.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^K",[]],"^2J",["^Y","~$goog.Disposable","~$goog.events.EventId"]]],["^1?","day8/re_frame_10x/inlined_deps/reagent/v1v0v0/reagent/debug.cljs"],["b62e3632bcb12831abdceed273b41eefc80e66c4","^2G",["^ ","^2H",null,"^2I",["^K",[]],"^2J",["^Y","^X"]]],["^1?","goog/dom/htmlelement.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^K",[]],"^2J",["^Y"]]],["^1?","cljs/core.cljs"],["16d93c2274e5f02773c418ade96d56ba9a02d17e","^2G",["^ ","^2H",null,"^2I",["^K",[]],"^2J",["^Y","~$goog.math.Long","~$goog.math.Integer","^2M","^2R","^2N","~$goog.Uri","^48"]]],["^1?","goog/html/safescript.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^K",[]],"^2J",["^Y","^2O","^3C","^2X","^2Y"]]],["^1?","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/trace.cljc"],["b62e3632bcb12831abdceed273b41eefc80e66c4","^2G",["^ ","^2H",null,"^2I",["^K",[]],"^2J",["^Y","^X","^S","^R","^3J"]]],["^1?","day8/re_frame_10x/inlined_deps/reagent/v1v0v0/reagent/impl/component.cljs"],["b62e3632bcb12831abdceed273b41eefc80e66c4","^2G",["^ ","^2H",null,"^2I",["^K",[]],"^2J",["^Y","^X","^2R","^@","^32","^34","^3;","^3G","^33"]]],["^1?","goog/html/safestylesheet.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^K",[]],"^2J",["^Y","^2N","^2O","^3M","^2R","^2X","^2Y","^2S"]]],["^1?","goog/events/browserevent.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^K",[]],"^2J",["^Y","~$goog.debug","^2P","~$goog.events.Event","~$goog.events.EventType","^31","^2Q"]]],["^1?","goog/math/integer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^K",[]],"^2J",["^Y","^31"]]],["^1?","goog/dom/browserfeature.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^K",[]],"^2J",["^Y","^2Q"]]],["^1?","day8/re_frame_10x/inlined_deps/reagent/v1v0v0/reagent/impl/batching.cljs"],["b62e3632bcb12831abdceed273b41eefc80e66c4","^2G",["^ ","^2H",null,"^2I",["^K",[]],"^2J",["^Y","^X","^33","^32"]]],["^1?","clojure/set.cljs"],["16d93c2274e5f02773c418ade96d56ba9a02d17e","^2G",["^ ","^2H",null,"^2I",["^K",[]],"^2J",["^Y","^X"]]],["^1?","goog/uri/utils.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^K",[]],"^2J",["^Y","^2N","^2O","^2M"]]],["^1?","goog/string/const.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^K",[]],"^2J",["^Y","^2O","^2Y"]]],["^1?","day8/re_frame_10x/inlined_deps/reagent/v1v0v0/reagent/impl/util.cljs"],["b62e3632bcb12831abdceed273b41eefc80e66c4","^2G",["^ ","^2H",null,"^2I",["^K",[]],"^2J",["^Y","^X","^3E","~$clojure.walk","^2R","^33"]]],["^1?","goog/events/listenable.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^K",[]],"^2J",["^Y","^4="]]]]],"~:clj-info",["^ ","jar:file:/home/riz/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/tagged_literals.cljc",1668745156000,"jar:file:/home/riz/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/source_map/base64.clj",1668745156000,"jar:file:/home/riz/.m2/repository/day8/re-frame/re-frame-10x/1.2.0/re-frame-10x-1.2.0.jar!/day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/interop.clj",1668750006000,"jar:file:/home/riz/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1652431301000,"jar:file:/home/riz/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/reader_types.clj",1659945934000,"jar:file:/home/riz/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1652431301000,"jar:file:/home/riz/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1652431301000,"jar:file:/home/riz/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/compiler.cljc",1668745156000,"jar:file:/home/riz/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/util.cljc",1668745156000,"jar:file:/home/riz/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1652431301000,"jar:file:/home/riz/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1652431301000,"jar:file:/home/riz/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader.clj",1659945934000,"jar:file:/home/riz/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/inspect.clj",1659945934000,"jar:file:/home/riz/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/env.cljc",1668745156000,"jar:file:/home/riz/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1659945905000,"jar:file:/home/riz/.m2/repository/day8/re-frame/re-frame-10x/1.2.0/re-frame-10x-1.2.0.jar!/day8/re_frame_10x/inlined_deps/reagent/v1v0v0/reagent/debug.clj",1668750006000,"jar:file:/home/riz/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/externs.clj",1668745156000,"jar:file:/home/riz/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/source_map/base64_vlq.clj",1668745156000,"jar:file:/home/riz/.m2/repository/day8/re-frame/re-frame-10x/1.2.0/re-frame-10x-1.2.0.jar!/day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/trace.cljc",1668750006000,"jar:file:/home/riz/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/js_deps.cljc",1668745156000,"jar:file:/home/riz/.m2/repository/day8/re-frame/re-frame-10x/1.2.0/re-frame-10x-1.2.0.jar!/day8/re_frame_10x/inlined_deps/reagent/v1v0v0/reagent/interop.clj",1668750006000,"jar:file:/home/riz/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/analyzer.cljc",1668745156000,"jar:file:/home/riz/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1652431301000,"jar:file:/home/riz/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/default_data_readers.clj",1659945934000,"jar:file:/home/riz/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1652431301000,"jar:file:/home/riz/.m2/repository/day8/re-frame/re-frame-10x/1.2.0/re-frame-10x-1.2.0.jar!/day8/re_frame_10x/inlined_deps/reagent/v1v0v0/reagent/core.clj",1668750006000,"jar:file:/home/riz/.m2/repository/day8/re-frame/re-frame-10x/1.2.0/re-frame-10x-1.2.0.jar!/day8/re_frame_10x/inlined_deps/reagent/v1v0v0/reagent/ratom.clj",1668750006000,"jar:file:/home/riz/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/source_map.clj",1668745156000,"jar:file:/home/riz/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/errors.clj",1659945934000,"jar:file:/home/riz/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/core.cljc",1668745156000,"jar:file:/home/riz/.m2/repository/net/cgrand/macrovich/0.2.1/macrovich-0.2.1.jar!/net/cgrand/macrovich.cljc",1668515819000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/interceptor.cljc","^7",1,"^8",33,"^9",1,"^:",100,"^;",true],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H"],"^I",null,"^J",["^K",[]],"^L","^M","^P",null,"^Q",["^ ","^R","^R","^S","^S","^T","^T","^U","^T","^V","^V","^W","^V","^X","^X","^Y","^Y"],"^Z",["^K",["^["]],"~:shadow/js-access-global",["^K",["Error"]],"^10",["^ ","^11","^R","^12","^S","^13","^S"],"~:defs",["^ ","~$update-effect",["^ ","~:protocol-inline",null,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/interceptor.cljc","^7",42,"^8",7,"^9",42,"^:",20,"~:arglists",["^16",["~$quote",["^16",[["~$context","~$key","~$f","~$&","~$args"]]]]],"~:top-fn",["^ ","~:variadic?",true,"~:fixed-arity",3,"~:max-fixed-arity",3,"~:method-params",[["^16",["^5@","^5A","~$f","^5B"]]],"^5>",["^16",[["^5@","^5A","~$f","~$&","^5B"]]],"~:arglists-meta",["^16",[null]]]],"^L","^2D","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/interceptor.cljc","^:",20,"^5C",["^ ","^5D",true,"^5E",3,"^5F",3,"^5G",[["^16",["^5@","^5A","~$f","^5B"]]],"^5>",["^16",[["^5@","^5A","~$f","~$&","^5B"]]],"^5H",["^16",[null]]],"^5G",[["^16",["^5@","^5A","~$f","^5B"]]],"~:protocol-impl",null,"^5E",3,"^5H",["^16",[null]],"^8",1,"^5D",true,"~:methods",[["^ ","^5E",3,"^5D",true,"~:tag","~$any"]],"^7",42,"~:ret-tag","^5L","^9",42,"^5F",3,"~:fn-var",true,"^5>",["^16",[["^5@","^5A","~$f","~$&","^5B"]]]],"~$invoke-interceptors",["^ ","^5=",null,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/interceptor.cljc","^7",74,"^8",8,"^9",74,"^:",27,"~:private",true,"^5>",["^16",["^5?",["^16",[["^5@","~$direction"]]]]],"~:doc","Loop over all interceptors, calling `direction` function on each,\n  threading the value of `context` through every call.\n\n  `direction` is one of `:before` or `:after`.\n\n  Each iteration, the next interceptor to process is obtained from\n  context's `:queue`. After they are processed, interceptors are popped\n  from `:queue` and added to `:stack`.\n\n  After sufficient iteration, `:queue` will be empty, and `:stack` will\n  contain all interceptors processed.\n\n  Returns updated `context`. Ie. the `context` which has been threaded\n  through all interceptor functions.\n\n  Generally speaking, an interceptor's `:before` function will (if present)\n  add to a `context's` `:coeffects`, while it's `:after` function\n  will modify the `context`'s `:effects`.  Very approximately.\n\n  But because all interceptor functions are given `context`, and can\n  return a modified version of it, the way is clear for an interceptor\n  to introspect the stack or queue, or even modify the queue\n  (add new interceptors via `enqueue`?). This is a very fluid arrangement."],"^5P",true,"^L","^2B","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/interceptor.cljc","^:",27,"^5G",["^16",[["^5@","^5Q"]]],"^5I",null,"^5H",["^16",[null,null]],"^8",1,"^5D",false,"^7",74,"^9",74,"^5F",2,"^5N",true,"^5>",["^16",["^5?",["^16",[["^5@","^5Q"]]]]],"^5R","Loop over all interceptors, calling `direction` function on each,\n  threading the value of `context` through every call.\n\n  `direction` is one of `:before` or `:after`.\n\n  Each iteration, the next interceptor to process is obtained from\n  context's `:queue`. After they are processed, interceptors are popped\n  from `:queue` and added to `:stack`.\n\n  After sufficient iteration, `:queue` will be empty, and `:stack` will\n  contain all interceptors processed.\n\n  Returns updated `context`. Ie. the `context` which has been threaded\n  through all interceptor functions.\n\n  Generally speaking, an interceptor's `:before` function will (if present)\n  add to a `context's` `:coeffects`, while it's `:after` function\n  will modify the `context`'s `:effects`.  Very approximately.\n\n  But because all interceptor functions are given `context`, and can\n  return a modified version of it, the way is clear for an interceptor\n  to introspect the stack or queue, or even modify the queue\n  (add new interceptors via `enqueue`?). This is a very fluid arrangement."],"~$assoc-coeffect",["^ ","^5=",null,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/interceptor.cljc","^7",56,"^8",7,"^9",56,"^:",21,"^5>",["^16",["^5?",["^16",[["^5@","^5A","~$value"]]]]]],"^L","^28","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/interceptor.cljc","^:",21,"^5G",["^16",[["^5@","^5A","^5T"]]],"^5I",null,"^5H",["^16",[null,null]],"^8",1,"^5D",false,"^7",56,"^5M",["^K",["~$clj","^5L"]],"^9",56,"^5F",3,"^5N",true,"^5>",["^16",["^5?",["^16",[["^5@","^5A","^5T"]]]]]],"~$update-coeffect",["^ ","^5=",null,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/interceptor.cljc","^7",60,"^8",7,"^9",60,"^:",22,"^5>",["^16",["^5?",["^16",[["^5@","^5A","~$f","~$&","^5B"]]]]],"^5C",["^ ","^5D",true,"^5E",3,"^5F",3,"^5G",[["^16",["^5@","^5A","~$f","^5B"]]],"^5>",["^16",[["^5@","^5A","~$f","~$&","^5B"]]],"^5H",["^16",[null]]]],"^L","^25","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/interceptor.cljc","^:",22,"^5C",["^ ","^5D",true,"^5E",3,"^5F",3,"^5G",[["^16",["^5@","^5A","~$f","^5B"]]],"^5>",["^16",[["^5@","^5A","~$f","~$&","^5B"]]],"^5H",["^16",[null]]],"^5G",[["^16",["^5@","^5A","~$f","^5B"]]],"^5I",null,"^5E",3,"^5H",["^16",[null]],"^8",1,"^5D",true,"^5J",[["^ ","^5E",3,"^5D",true,"^5K","^5L"]],"^7",60,"^5M","^5L","^9",60,"^5F",3,"^5N",true,"^5>",["^16",[["^5@","^5A","~$f","~$&","^5B"]]]],"~$invoke-interceptor-fn",["^ ","^5=",null,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/interceptor.cljc","^7",67,"^8",8,"^9",67,"^:",29,"^5P",true,"^5>",["^16",["^5?",["^16",[["^5@","~$interceptor","^5Q"]]]]]],"^5P",true,"^L","^1L","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/interceptor.cljc","^:",29,"^5G",["^16",[["^5@","^5X","^5Q"]]],"^5I",null,"^5H",["^16",[null,null]],"^8",1,"^5D",false,"^7",67,"^5M",["^K",[null,"^5L"]],"^9",67,"^5F",3,"^5N",true,"^5>",["^16",["^5?",["^16",[["^5@","^5X","^5Q"]]]]]],"~$get-effect",["^ ","^5=",null,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/interceptor.cljc","^7",30,"^8",7,"^9",30,"^:",17,"^5>",["^16",["^5?",["^16",[["^5@"],["^5@","^5A"],["^5@","^5A","~$not-found"]]]]],"^5C",["^ ","^5D",false,"^5E",3,"^5F",3,"^5G",[["^5@"],["^5@","^5A"],["^5@","^5A","^5Z"]],"^5>",["^16",[["^5@"],["^5@","^5A"],["^5@","^5A","^5Z"]]],"^5H",["^16",[null,null,null]]]],"^L","^2<","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/interceptor.cljc","^:",17,"^5C",["^ ","^5D",false,"^5E",3,"^5F",3,"^5G",[["^5@"],["^5@","^5A"],["^5@","^5A","^5Z"]],"^5>",["^16",[["^5@"],["^5@","^5A"],["^5@","^5A","^5Z"]]],"^5H",["^16",[null,null,null]]],"^5G",[["^5@"],["^5@","^5A"],["^5@","^5A","^5Z"]],"^5I",null,"^5E",3,"^5H",["^16",[null,null,null]],"^8",1,"^5D",false,"^5J",[["^ ","^5E",1,"^5D",false,"^5K","^5L"],["^ ","^5E",2,"^5D",false,"^5K",["^K",[null,"^5L"]]],["^ ","^5E",3,"^5D",false,"^5K",["^K",[null,"^5L"]]]],"^7",30,"^9",30,"^5F",3,"^5N",true,"^5>",["^16",[["^5@"],["^5@","^5A"],["^5@","^5A","^5Z"]]]],"~$->interceptor",["^ ","^5=",null,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/interceptor.cljc","^7",17,"^8",7,"^9",17,"^:",20,"^5>",["^16",["^5?",["^16",[["~$&",["^ ","^19","~$m","~:keys",["~$id","~$before","~$after"]]]]]]],"^5C",["^ ","^5D",true,"^5E",0,"^5F",0,"^5G",[["^16",[["^ ","^19","~$m","^60",["^61","^62","^63"]]]]],"^5>",["^16",[["~$&",["^ ","^19","~$m","^60",["^61","^62","^63"]]]]],"^5H",["^16",[null]]]],"^L","^2@","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/interceptor.cljc","^:",20,"^5C",["^ ","^5D",true,"^5E",0,"^5F",0,"^5G",[["^16",[["^ ","^19","~$m","^60",["^61","^62","^63"]]]]],"^5>",["^16",[["~$&",["^ ","^19","~$m","^60",["^61","^62","^63"]]]]],"^5H",["^16",[null]]],"^5G",[["^16",[["^ ","^19","~$m","^60",["^61","^62","^63"]]]]],"^5I",null,"^5E",0,"^5H",["^16",[null]],"^8",1,"^5D",true,"^5J",[["^ ","^5E",0,"^5D",true,"^5K","~$cljs.core/IMap"]],"^7",17,"^5M","^5L","^9",17,"^5F",0,"^5N",true,"^5>",["^16",[["~$&",["^ ","^19","~$m","^60",["^61","^62","^63"]]]]]],"~$get-coeffect",["^ ","^5=",null,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/interceptor.cljc","^7",48,"^8",7,"^9",48,"^:",19,"^5>",["^16",["^5?",["^16",[["^5@"],["^5@","^5A"],["^5@","^5A","^5Z"]]]]],"^5C",["^ ","^5D",false,"^5E",3,"^5F",3,"^5G",[["^5@"],["^5@","^5A"],["^5@","^5A","^5Z"]],"^5>",["^16",[["^5@"],["^5@","^5A"],["^5@","^5A","^5Z"]]],"^5H",["^16",[null,null,null]]]],"^L","^1M","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/interceptor.cljc","^:",19,"^5C",["^ ","^5D",false,"^5E",3,"^5F",3,"^5G",[["^5@"],["^5@","^5A"],["^5@","^5A","^5Z"]],"^5>",["^16",[["^5@"],["^5@","^5A"],["^5@","^5A","^5Z"]]],"^5H",["^16",[null,null,null]]],"^5G",[["^5@"],["^5@","^5A"],["^5@","^5A","^5Z"]],"^5I",null,"^5E",3,"^5H",["^16",[null,null,null]],"^8",1,"^5D",false,"^5J",[["^ ","^5E",1,"^5D",false,"^5K","^5L"],["^ ","^5E",2,"^5D",false,"^5K",["^K",[null,"^5L"]]],["^ ","^5E",3,"^5D",false,"^5K",["^K",[null,"^5L"]]]],"^7",48,"^9",48,"^5F",3,"^5N",true,"^5>",["^16",[["^5@"],["^5@","^5A"],["^5@","^5A","^5Z"]]]],"~$execute",["^ ","^5=",null,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/interceptor.cljc","^7",146,"^8",7,"^9",146,"^:",14,"^5>",["^16",["^5?",["^16",[["~$event-v","~$interceptors"]]]]],"^5R","Executes the given chain (coll) of interceptors.\n\n   Each interceptor has this form:\n       {:before  (fn [context] ...)     ;; returns possibly modified context\n        :after   (fn [context] ...)}    ;; `identity` would be a noop\n\n   Walks the queue of interceptors from beginning to end, calling the\n   `:before` fn on each, then reverse direction and walk backwards,\n   calling the `:after` fn on each.\n\n   The last interceptor in the chain presumably wraps an event\n   handler fn. So the overall goal of the process is to \"handle\n   the given event\".\n\n   Thread a `context` through all calls. `context` has this form:\n\n     {:coeffects {:event [:a-query-id :some-param]\n                  :db    <original contents of app-db>}\n      :effects   {:db    <new value for app-db>\n                  :dispatch  [:an-event-id :param1]}\n      :queue     <a collection of further interceptors>\n      :stack     <a collection of interceptors already walked>}\n\n   `context` has `:coeffects` and `:effects` which, if this was a web\n   server, would be somewhat analogous to `request` and `response`\n   respectively.\n\n   `coeffects` will contain data like `event` and the initial\n   state of `db` -  the inputs required by the event handler\n   (sitting presumably on the end of the chain), while handler-returned\n   side effects are put into `:effects` including, but not limited to,\n   new values for `db`.\n\n   The first few interceptors in a chain will likely have `:before`\n   functions which \"prime\" the `context` by adding the event, and\n   the current state of app-db into `:coeffects`. But interceptors can\n   add whatever they want to `:coeffects` - perhaps the event handler needs\n   some information from localstore, or a random number, or access to\n   a DataScript connection.\n\n   Equally, some interceptors in the chain will have `:after` fn\n   which can process the side effects accumulated into `:effects`\n   including but, not limited to, updates to app-db.\n\n   Through both stages (before and after), `context` contains a `:queue`\n   of interceptors yet to be processed, and a `:stack` of interceptors\n   already done.  In advanced cases, these values can be modified by the\n   functions through which the context is threaded."],"^L","^1W","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/interceptor.cljc","^:",14,"^5G",["^16",[["^67","^68"]]],"^5I",null,"^5H",["^16",[null,null]],"^8",1,"^5D",false,"^7",146,"^5M","^5L","^9",146,"^5F",2,"^5N",true,"^5>",["^16",["^5?",["^16",[["^67","^68"]]]]],"^5R","Executes the given chain (coll) of interceptors.\n\n   Each interceptor has this form:\n       {:before  (fn [context] ...)     ;; returns possibly modified context\n        :after   (fn [context] ...)}    ;; `identity` would be a noop\n\n   Walks the queue of interceptors from beginning to end, calling the\n   `:before` fn on each, then reverse direction and walk backwards,\n   calling the `:after` fn on each.\n\n   The last interceptor in the chain presumably wraps an event\n   handler fn. So the overall goal of the process is to \"handle\n   the given event\".\n\n   Thread a `context` through all calls. `context` has this form:\n\n     {:coeffects {:event [:a-query-id :some-param]\n                  :db    <original contents of app-db>}\n      :effects   {:db    <new value for app-db>\n                  :dispatch  [:an-event-id :param1]}\n      :queue     <a collection of further interceptors>\n      :stack     <a collection of interceptors already walked>}\n\n   `context` has `:coeffects` and `:effects` which, if this was a web\n   server, would be somewhat analogous to `request` and `response`\n   respectively.\n\n   `coeffects` will contain data like `event` and the initial\n   state of `db` -  the inputs required by the event handler\n   (sitting presumably on the end of the chain), while handler-returned\n   side effects are put into `:effects` including, but not limited to,\n   new values for `db`.\n\n   The first few interceptors in a chain will likely have `:before`\n   functions which \"prime\" the `context` by adding the event, and\n   the current state of app-db into `:coeffects`. But interceptors can\n   add whatever they want to `:coeffects` - perhaps the event handler needs\n   some information from localstore, or a random number, or access to\n   a DataScript connection.\n\n   Equally, some interceptors in the chain will have `:after` fn\n   which can process the side effects accumulated into `:effects`\n   including but, not limited to, updates to app-db.\n\n   Through both stages (before and after), `context` contains a `:queue`\n   of interceptors yet to be processed, and a `:stack` of interceptors\n   already done.  In advanced cases, these values can be modified by the\n   functions through which the context is threaded."],"~$assoc-effect",["^ ","^5=",null,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/interceptor.cljc","^7",38,"^8",7,"^9",38,"^:",19,"^5>",["^16",["^5?",["^16",[["^5@","^5A","^5T"]]]]]],"^L","^1R","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/interceptor.cljc","^:",19,"^5G",["^16",[["^5@","^5A","^5T"]]],"^5I",null,"^5H",["^16",[null,null]],"^8",1,"^5D",false,"^7",38,"^5M",["^K",["^5U","^5L"]],"^9",38,"^5F",3,"^5N",true,"^5>",["^16",["^5?",["^16",[["^5@","^5A","^5T"]]]]]],"~$enqueue",["^ ","^5=",null,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/interceptor.cljc","^7",111,"^8",7,"^9",111,"^:",14,"^5>",["^16",["^5?",["^16",[["^5@","^68"]]]]]],"^L","^2=","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/interceptor.cljc","^:",14,"^5G",["^16",[["^5@","^68"]]],"^5I",null,"^5H",["^16",[null,null]],"^8",1,"^5D",false,"^7",111,"^5M",["^K",["^5U","^5L"]],"^9",111,"^5F",2,"^5N",true,"^5>",["^16",["^5?",["^16",[["^5@","^68"]]]]]],"~$mandatory-interceptor-keys",["^ ","^L","^1X","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/interceptor.cljc","^7",9,"^8",1,"^9",9,"^:",32,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/interceptor.cljc","^7",9,"^8",6,"^9",9,"^:",32],"^5K","~$cljs.core/ISet"],"~$interceptor?",["^ ","^5=",null,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/interceptor.cljc","^7",11,"^8",7,"^9",11,"^:",19,"^5>",["^16",["^5?",["^16",[["~$m"]]]]]],"^L","^22","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/interceptor.cljc","^:",19,"^5G",["^16",[["~$m"]]],"^5I",null,"^5H",["^16",[null,null]],"^8",1,"^5D",false,"^7",11,"^5M","~$boolean","^9",11,"^5F",1,"^5N",true,"^5>",["^16",["^5?",["^16",[["~$m"]]]]]],"~$change-direction",["^ ","^5=",null,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/interceptor.cljc","^7",132,"^8",8,"^9",132,"^:",24,"^5P",true,"^5>",["^16",["^5?",["^16",[["^5@"]]]]],"^5R","Called on completion of `:before` processing, this function prepares/modifies\n   `context` for the backwards sweep of processing in which an interceptor\n   chain's `:after` fns are called.\n\n  At this point in processing, the `:queue` is empty and `:stack` holds all\n  the previously run interceptors. So this function enables the backwards walk\n  by priming `:queue` with what's currently in `:stack`"],"^5P",true,"^L","^1K","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/interceptor.cljc","^:",24,"^5G",["^16",[["^5@"]]],"^5I",null,"^5H",["^16",[null,null]],"^8",1,"^5D",false,"^7",132,"^5M",["^K",["^5U","^5L"]],"^9",132,"^5F",1,"^5N",true,"^5>",["^16",["^5?",["^16",[["^5@"]]]]],"^5R","Called on completion of `:before` processing, this function prepares/modifies\n   `context` for the backwards sweep of processing in which an interceptor\n   chain's `:after` fns are called.\n\n  At this point in processing, the `:queue` is empty and `:stack` holds all\n  the previously run interceptors. So this function enables the backwards walk\n  by priming `:queue` with what's currently in `:stack`"],"^5@",["^ ","^5=",null,"^5",["^ ","^5P",true,"^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/interceptor.cljc","^:",15,"^5C",["^ ","^5D",false,"^5E",3,"^5F",3,"^5G",[["~$event","^68"],["^6@","^68","~$db"]],"^5>",["^16",[["^6@","^68"],["^6@","^68","^6A"]]],"^5H",["^16",[null,null]]],"^8",8,"^7",118,"^9",118,"^5>",["^16",["^5?",["^16",[["^6@","^68"],["^6@","^68","^6A"]]]]],"^5R","Create a fresh context"],"^5P",true,"^L","^2;","^6","day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/interceptor.cljc","^:",15,"^5C",["^ ","^5D",false,"^5E",3,"^5F",3,"^5G",[["^6@","^68"],["^6@","^68","^6A"]],"^5>",["^16",[["^6@","^68"],["^6@","^68","^6A"]]],"^5H",["^16",[null,null]]],"^5G",[["^6@","^68"],["^6@","^68","^6A"]],"^5I",null,"^5E",3,"^5H",["^16",[null,null]],"^8",1,"^5D",false,"^5J",[["^ ","^5E",2,"^5D",false,"^5K",["^K",["^5U","^5L"]]],["^ ","^5E",3,"^5D",false,"^5K",["^K",["^5U","^5L"]]]],"^7",118,"^9",118,"^5F",3,"^5N",true,"^5>",["^16",[["^6@","^68"],["^6@","^68","^6A"]]],"^5R","Create a fresh context"]],"^14",["^ ","^T","^T","^U","^T","^X","^X"],"~:cljs.analyzer/constants",["^ ","^Z",["^K",["~:unnamed","~:tags","~:original-event","~:db","~:queue","~:event","~:after","~:id","~:effects","~:stack","~:error","~:coeffects","~:interceptors","~:before"]],"~:order",["^6I","^6J","^6P","^6M","^6C","^6K","^6N","^6G","^6L","^6H","^6E","^6F","^6D","^6O"]],"^1;",["^ ","^[",["^K",[]]],"^1<",["^ "],"^1=",["^Y","^X","^R","^S","^T","^V"]],"^O","^M","~:ns-specs",["^ "],"~:ns-spec-vars",["^K",[]],"~:compiler-options",["^2F",[["^6T","~:static-fns"],true,["^6T","~:shadow-tweaks"],null,["^6T","~:source-map-inline"],null,["^6T","~:elide-asserts"],false,["^6T","~:optimize-constants"],null,["^6T","^1B"],null,["^6T","~:external-config"],null,["^6T","~:tooling-config"],null,["^6T","~:emit-constants"],null,["^6T","~:load-tests"],null,["^6T","~:form-size-threshold"],null,["^6T","~:data-readers"],null,["^6T","~:infer-externs"],"~:auto",["^6T","^1D"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^6T","~:fn-invoke-direct"],null,["^6T","~:source-map"],"/dev/null"]]]