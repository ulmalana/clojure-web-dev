["^ ","~:output",["^ ","~:js","goog.provide('edamame.core');\n/**\n * Parses first EDN value from string.\n * \n *   Supported parsing options:\n * \n *   `:deref`: parse forms starting with `@`. If `true`, the resulting\n *   expression will be parsed as `(deref expr)`.\n * \n *   `:fn`: parse function literals (`#(inc %)`). If `true`, will be parsed as `(fn [%1] (inc %))`.\n * \n *   `:quote`: parse quoted expression `'foo`. If `true`, will be parsed as `(quote foo)`.\n * \n *   `:read-eval`: parse read-eval (`=(+ 1 2 3)`). If `true`, the\n *   resulting expression will be parsed as `(read-eval (+ 1 2 3))`.\n * \n *   `:regex`: parse regex literals (`#\"foo\"`). If `true`, defaults to\n *   `re-pattern`.\n * \n *   `:syntax-quote`: parse syntax-quote (`(+ 1 2 3)`). Symbols get\n *   qualified using `:resolve-symbol` which defaults to `identity`:\n *   `(parse-string \"`x\" {:syntax-quote {:resolve-symbol #(symbol \"user\" (str %))}})\n *   ;;=> (quote user/x)`.\n * \n *   `:var`: parse var literals (`#'foo`). If `true`, the resulting\n *   expression will be parsed as `(var foo)`.\n * \n *   `:all`: when `true`, the above options will be set to `true` unless\n *   explicitly provided.\n * \n *   Supported options for processing reader conditionals:\n * \n *   `:read-cond`: - `:allow` to process reader conditionals, or\n *                `:preserve` to keep all branches\n *   `:features`: - persistent set of feature keywords for reader conditionals (e.g. `#{:clj}`).\n * \n *   `:auto-resolve`: map of alias to namespace symbols for\n *   auto-resolving keywords. Use `:current` as the alias for the current\n *   namespace.\n * \n *   `:readers`: data readers.\n * \n *   Additional arguments to tools.reader may be passed with\n *   `:tools.reader/opts`, like `:readers` for passing reader tag functions.\n * \n *   Deprecated options:\n * \n *   `:dispatch`: DEPRECATED by parsing options.\n * \n *   \n */\nedamame.core.parse_string = (function edamame$core$parse_string(var_args){\nvar G__70771 = arguments.length;\nswitch (G__70771) {\ncase 1:\nreturn edamame.core.parse_string.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn edamame.core.parse_string.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(edamame.core.parse_string.cljs$core$IFn$_invoke$arity$1 = (function (s){\nreturn edamame.impl.parser.parse_string(s,null);\n}));\n\n(edamame.core.parse_string.cljs$core$IFn$_invoke$arity$2 = (function (s,opts){\nreturn edamame.impl.parser.parse_string(s,opts);\n}));\n\n(edamame.core.parse_string.cljs$lang$maxFixedArity = 2);\n\n/**\n * Like parse-string but parses all values from string and returns them\n *   in a vector.\n */\nedamame.core.parse_string_all = (function edamame$core$parse_string_all(var_args){\nvar G__70776 = arguments.length;\nswitch (G__70776) {\ncase 1:\nreturn edamame.core.parse_string_all.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn edamame.core.parse_string_all.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(edamame.core.parse_string_all.cljs$core$IFn$_invoke$arity$1 = (function (s){\nreturn edamame.impl.parser.parse_string_all(s,null);\n}));\n\n(edamame.core.parse_string_all.cljs$core$IFn$_invoke$arity$2 = (function (s,opts){\nreturn edamame.impl.parser.parse_string_all(s,opts);\n}));\n\n(edamame.core.parse_string_all.cljs$lang$maxFixedArity = 2);\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","edamame/core.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",17],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index","~$highlight.js","~$module$node_modules$highlight_DOT_js$lib$index","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$edamame.core","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$edamame.impl.parser","^Q","~$p","^Q","~$cljs.core","^R","~$goog","^S"],"~:seen",["^J",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^R","^R"],"~:form",["~#list",["~$ns","^L",["^Y",["^U",["^Q","~:as","~$p"]]]]],"~:flags",["^ ","^U",["^J",[]]],"~:js-deps",["^ "],"~:deps",["^S","^R","^Q"]],"^N","^L","~:resource-id",["~:shadow.build.classpath/resource","edamame/core.cljc"],"~:compiled-at",1668750090107,"~:resource-name","edamame/core.cljc","~:warnings",[],"~:source","(ns edamame.core\n  (:require\n   [edamame.impl.parser :as p]))\n\n(defn parse-string\n  \"Parses first EDN value from string.\n\n  Supported parsing options:\n\n  `:deref`: parse forms starting with `@`. If `true`, the resulting\n  expression will be parsed as `(deref expr)`.\n\n  `:fn`: parse function literals (`#(inc %)`). If `true`, will be parsed as `(fn [%1] (inc %))`.\n\n  `:quote`: parse quoted expression `'foo`. If `true`, will be parsed as `(quote foo)`.\n\n  `:read-eval`: parse read-eval (`=(+ 1 2 3)`). If `true`, the\n  resulting expression will be parsed as `(read-eval (+ 1 2 3))`.\n\n  `:regex`: parse regex literals (`#\\\"foo\\\"`). If `true`, defaults to\n  `re-pattern`.\n\n  `:syntax-quote`: parse syntax-quote (`(+ 1 2 3)`). Symbols get\n  qualified using `:resolve-symbol` which defaults to `identity`:\n  `(parse-string \\\"`x\\\" {:syntax-quote {:resolve-symbol #(symbol \\\"user\\\" (str %))}})\n  ;;=> (quote user/x)`.\n\n  `:var`: parse var literals (`#'foo`). If `true`, the resulting\n  expression will be parsed as `(var foo)`.\n\n  `:all`: when `true`, the above options will be set to `true` unless\n  explicitly provided.\n\n  Supported options for processing reader conditionals:\n\n  `:read-cond`: - `:allow` to process reader conditionals, or\n                  `:preserve` to keep all branches\n  `:features`: - persistent set of feature keywords for reader conditionals (e.g. `#{:clj}`).\n\n  `:auto-resolve`: map of alias to namespace symbols for\n  auto-resolving keywords. Use `:current` as the alias for the current\n  namespace.\n\n  `:readers`: data readers.\n\n  Additional arguments to tools.reader may be passed with\n  `:tools.reader/opts`, like `:readers` for passing reader tag functions.\n\n  Deprecated options:\n\n  `:dispatch`: DEPRECATED by parsing options.\n\n  \"\n  ([s]\n   (p/parse-string s nil))\n  ([s opts]\n   (p/parse-string s opts)))\n\n(defn parse-string-all\n  \"Like parse-string but parses all values from string and returns them\n  in a vector.\"\n  ([s]\n   (p/parse-string-all s nil))\n  ([s opts]\n   (p/parse-string-all s opts)))\n\n;;;; Scratch\n\n(comment\n  (parse-string \"(1 2 3 #_4)\"))\n","~:reader-features",["^J",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings",";AAIA,AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,AAAAA,AAAME;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMD,AAiDFE;AAjDJ,AAkDG,AAAA,AAACC,AAAeD;;;AAlDnB,AAAA,AAAA,AAAMF,AAmDFE,AAAEE;AAnDN,AAoDG,AAACD,AAAeD,AAAEE;;;AApDrB,AAAA,AAAA,AAAMJ;;AAAN,AAsDA,AAAA;;;;AAAA,AAAAF,AAAMQ;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAL,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMK,AAGFJ;AAHJ,AAIG,AAAA,AAACK,AAAmBL;;;AAJvB,AAAA,AAAA,AAAMI,AAKFJ,AAAEE;AALN,AAMG,AAACG,AAAmBL,AAAEE;;;AANzB,AAAA,AAAA,AAAME;;AAAN,AAUA","names",["var_args","G__70771","edamame.core/parse-string","js/Error","s","edamame.impl.parser/parse-string","opts","G__70776","edamame.core/parse-string-all","edamame.impl.parser/parse-string-all"]],"~:used-vars",["^J",["~$edamame.core/parse-string","~$edamame.impl.parser/parse-string-all","~$edamame.impl.parser/parse-string","~$edamame.core/parse-string-all","~$js/Error"]]],"~:cache-keys",["~#cmap",[["^14","goog/dom/tagname.js"],["6025affb7181cd40418600864f58eed1ea80055d","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^J",[]],"~:deps-syms",["^S","~$goog.dom.HtmlElement"]]],["^14","edamame/core.cljc"],["8915b89bb492e9e815fdda7c1acef2683070dc2a","^1G",["^ ","^1H",null,"^1I",["^J",[]],"^1J",["^S","^R","^Q"]]],["^14","cljs/tools/reader/impl/utils.cljs"],["b4dce2f71625d60fe1fd6a95816017811dd73522","^1G",["^ ","^1H",null,"^1I",["^J",[]],"^1J",["^S","^R","~$clojure.string","~$goog.string"]]],["^14","goog/math/math.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1G",["^ ","^1H",null,"^1I",["^J",[]],"^1J",["^S","~$goog.array","~$goog.asserts"]]],["^14","goog/html/trustedtypes.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1G",["^ ","^1H",null,"^1I",["^J",[]],"^1J",["^S"]]],["^14","goog/labs/useragent/browser.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1G",["^ ","^1H",null,"^1I",["^J",[]],"^1J",["^S","^1N","~$goog.labs.userAgent.util","~$goog.object","~$goog.string.internal"]]],["^14","goog/html/safeurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1G",["^ ","^1H",null,"^1I",["^J",[]],"^1J",["^S","^1O","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^1R"]]],["^14","goog/array/array.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1G",["^ ","^1H",null,"^1I",["^J",[]],"^1J",["^S","^1O"]]],["^14","goog/debug/error.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1G",["^ ","^1H",null,"^1I",["^J",[]],"^1J",["^S"]]],["^14","cljs/tools/reader/edn.cljs"],["b4dce2f71625d60fe1fd6a95816017811dd73522","^1G",["^ ","^1H",null,"^1I",["^J",[]],"^1J",["^S","^R","~$cljs.tools.reader.impl.errors","~$cljs.tools.reader.reader-types","~$cljs.tools.reader.impl.utils","~$cljs.tools.reader.impl.commons","~$cljs.tools.reader","^1M","~$goog.string.StringBuffer"]]],["^14","goog/dom/nodetype.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1G",["^ ","^1H",null,"^1I",["^J",[]],"^1J",["^S"]]],["^14","cljs/tools/reader/impl/inspect.cljs"],["b4dce2f71625d60fe1fd6a95816017811dd73522","^1G",["^ ","^1H",null,"^1I",["^J",[]],"^1J",["^S","^R"]]],["^14","cljs/tools/reader.cljs"],["b4dce2f71625d60fe1fd6a95816017811dd73522","^1G",["^ ","^1H",null,"^1I",["^J",[]],"^1J",["^S","^R","^1Z","^1[","^20","^1Y","^1N","^1M","^22"]]],["^14","edamame/impl/parser.cljc"],["8915b89bb492e9e815fdda7c1acef2683070dc2a","^1G",["^ ","^1H",null,"^1I",["^J",[]],"^1J",["^S","^R","~$cljs.tools.reader.edn","^1Z","~$cljs.tools.reader.impl.inspect","^1[","^20","^1L","~$edamame.impl.read-fn","~$edamame.impl.syntax-quote","^22"]]],["^14","goog/string/typedstring.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1G",["^ ","^1H",null,"^1I",["^J",[]],"^1J",["^S"]]],["^14","goog/object/object.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1G",["^ ","^1H",null,"^1I",["^J",[]],"^1J",["^S"]]],["^14","goog/dom/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1G",["^ ","^1H",null,"^1I",["^J",[]],"^1J",["^S","^1O"]]],"~:SHADOW-TIMESTAMP",[1668744077000,1668744077000,1668745156000],["^14","edamame/impl/syntax_quote.cljc"],["8915b89bb492e9e815fdda7c1acef2683070dc2a","^1G",["^ ","^1H",null,"^1I",["^J",[]],"^1J",["^S","^R","^1L"]]],["^14","goog/math/long.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1G",["^ ","^1H",null,"^1I",["^J",[]],"^1J",["^S","^1O","~$goog.reflect"]]],["^14","goog/html/trustedresourceurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1G",["^ ","^1H",null,"^1I",["^J",[]],"^1J",["^S","^1O","~$goog.html.trustedtypes","^1U","^1V","^1W","^1X"]]],["^14","goog/string/internal.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1G",["^ ","^1H",null,"^1I",["^J",[]],"^1J",["^S"]]],["^14","goog/functions/functions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1G",["^ ","^1H",null,"^1I",["^J",[]],"^1J",["^S"]]],["^14","goog/html/safestyle.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1G",["^ ","^1H",null,"^1I",["^J",[]],"^1J",["^S","^1N","^1O","~$goog.html.SafeUrl","^1W","^1X","^1R"]]],["^14","goog/dom/safe.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1G",["^ ","^1H",null,"^1I",["^J",[]],"^1J",["^S","^1O","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","~$goog.html.SafeScript","~$goog.html.SafeStyle","^2:","^1T","~$goog.html.uncheckedconversions","^1W","^1R"]]],["^14","goog/structs/map.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1G",["^ ","^1H",null,"^1I",["^J",[]],"^1J",["^S","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^14","goog/html/safehtml.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1G",["^ ","^1H",null,"^1I",["^J",[]],"^1J",["^S","^1N","^1O","~$goog.dom.TagName","~$goog.dom.tags","^2>","^2?","~$goog.html.SafeStyleSheet","^2:","^1T","^29","^1U","^1V","~$goog.labs.userAgent.browser","^1Q","^1W","^1X","^1R"]]],["^14","goog/dom/tags.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1G",["^ ","^1H",null,"^1I",["^J",[]],"^1J",["^S","^1Q"]]],["^14","goog/asserts/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1G",["^ ","^1H",null,"^1I",["^J",[]],"^1J",["^S","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^14","goog/uri/uri.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1G",["^ ","^1H",null,"^1I",["^J",[]],"^1J",["^S","^1N","^1O","^1M","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^14","edamame/impl/read_fn.cljc"],["8915b89bb492e9e815fdda7c1acef2683070dc2a","^1G",["^ ","^1H",null,"^1I",["^J",[]],"^1J",["^S","^R"]]],["^14","goog/i18n/bidi.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1G",["^ ","^1H",null,"^1I",["^J",[]],"^1J",["^S"]]],["^14","goog/fs/url.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1G",["^ ","^1H",null,"^1I",["^J",[]],"^1J",["^S"]]],["^14","goog/base.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1G",["^ ","^1H",null,"^1I",["^J",[]],"^1J",[]]],["^14","goog/structs/structs.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1G",["^ ","^1H",null,"^1I",["^J",[]],"^1J",["^S","^1N","^1Q"]]],["^14","cljs/tools/reader/impl/errors.cljs"],["b4dce2f71625d60fe1fd6a95816017811dd73522","^1G",["^ ","^1H",null,"^1I",["^J",[]],"^1J",["^S","^R","^1Z","^1L","^24"]]],["^14","clojure/string.cljs"],["16d93c2274e5f02773c418ade96d56ba9a02d17e","^1G",["^ ","^1H",null,"^1I",["^J",[]],"^1J",["^S","^R","^1M","^22"]]],["^14","goog/string/string.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1G",["^ ","^1H",null,"^1I",["^J",[]],"^1J",["^S","~$goog.dom.safe","^2@","^1W","^1R"]]],["^14","goog/reflect/reflect.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1G",["^ ","^1H",null,"^1I",["^J",[]],"^1J",["^S"]]],["^14","goog/labs/useragent/util.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1G",["^ ","^1H",null,"^1I",["^J",[]],"^1J",["^S","^1R"]]],["^14","goog/string/stringbuffer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1G",["^ ","^1H",null,"^1I",["^J",[]],"^1J",["^S"]]],["^14","cljs/tools/reader/reader_types.cljs"],["b4dce2f71625d60fe1fd6a95816017811dd73522","^1G",["^ ","^1H",null,"^1I",["^J",[]],"^1J",["^S","^R","^1[","^1M","^22"]]],["^14","goog/iter/iter.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1G",["^ ","^1H",null,"^1I",["^J",[]],"^1J",["^S","^1N","^1O","^2<","~$goog.math"]]],["^14","goog/html/uncheckedconversions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1G",["^ ","^1H",null,"^1I",["^J",[]],"^1J",["^S","^1O","^2=","^2>","^2?","^2E","^2:","^1T","^1W","^1R"]]],["^14","cljs/tools/reader/impl/commons.cljs"],["b4dce2f71625d60fe1fd6a95816017811dd73522","^1G",["^ ","^1H",null,"^1I",["^J",[]],"^1J",["^S","^R","^1Y","^1Z","^1["]]],["^14","goog/dom/htmlelement.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1G",["^ ","^1H",null,"^1I",["^J",[]],"^1J",["^S"]]],["^14","cljs/core.cljs"],["16d93c2274e5f02773c418ade96d56ba9a02d17e","^1G",["^ ","^1H",null,"^1I",["^J",[]],"^1J",["^S","~$goog.math.Long","~$goog.math.Integer","^1M","^1Q","^1N","~$goog.Uri","^22"]]],["^14","goog/html/safescript.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1G",["^ ","^1H",null,"^1I",["^J",[]],"^1J",["^S","^1O","^29","^1W","^1X"]]],["^14","goog/html/safestylesheet.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1G",["^ ","^1H",null,"^1I",["^J",[]],"^1J",["^S","^1N","^1O","^2?","^1Q","^1W","^1X","^1R"]]],["^14","goog/math/integer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1G",["^ ","^1H",null,"^1I",["^J",[]],"^1J",["^S","^28"]]],["^14","goog/uri/utils.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1G",["^ ","^1H",null,"^1I",["^J",[]],"^1J",["^S","^1N","^1O","^1M"]]],["^14","goog/string/const.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1G",["^ ","^1H",null,"^1I",["^J",[]],"^1J",["^S","^1O","^1X"]]]]],"~:clj-info",["^ ","jar:file:/home/riz/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/tagged_literals.cljc",1668745156000,"jar:file:/home/riz/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/source_map/base64.clj",1668745156000,"jar:file:/home/riz/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1652431301000,"jar:file:/home/riz/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/cljs/tools/reader/reader_types.clj",1659945934000,"jar:file:/home/riz/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/reader_types.clj",1659945934000,"jar:file:/home/riz/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1652431301000,"jar:file:/home/riz/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1652431301000,"jar:file:/home/riz/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/compiler.cljc",1668745156000,"jar:file:/home/riz/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/util.cljc",1668745156000,"jar:file:/home/riz/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1652431301000,"jar:file:/home/riz/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1652431301000,"jar:file:/home/riz/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader.clj",1659945934000,"jar:file:/home/riz/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/inspect.clj",1659945934000,"jar:file:/home/riz/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/env.cljc",1668745156000,"jar:file:/home/riz/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1659945905000,"jar:file:/home/riz/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/externs.clj",1668745156000,"jar:file:/home/riz/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/source_map/base64_vlq.clj",1668745156000,"jar:file:/home/riz/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/js_deps.cljc",1668745156000,"jar:file:/home/riz/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/analyzer.cljc",1668745156000,"jar:file:/home/riz/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1652431301000,"jar:file:/home/riz/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/default_data_readers.clj",1659945934000,"jar:file:/home/riz/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1652431301000,"jar:file:/home/riz/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/source_map.clj",1668745156000,"jar:file:/home/riz/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/errors.clj",1659945934000,"jar:file:/home/riz/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/core.cljc",1668745156000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","edamame/core.cljc","^7",1,"^8",5,"^9",1,"^:",17],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G"],"^H",null,"^I",["^J",[]],"^K","^L","^O",null,"^P",["^ ","^Q","^Q","~$p","^Q","^R","^R","^S","^S"],"^T",["^J",["^U"]],"~:shadow/js-access-global",["^J",["Error"]],"^V",null,"~:defs",["^ ","~$parse-string",["^ ","~:protocol-inline",null,"^5",["^ ","^6","edamame/core.cljc","^7",5,"^8",7,"^9",5,"^:",19,"~:arglists",["^Y",["~$quote",["^Y",[["~$s"],["~$s","~$opts"]]]]],"~:doc","Parses first EDN value from string.\n\n  Supported parsing options:\n\n  `:deref`: parse forms starting with `@`. If `true`, the resulting\n  expression will be parsed as `(deref expr)`.\n\n  `:fn`: parse function literals (`#(inc %)`). If `true`, will be parsed as `(fn [%1] (inc %))`.\n\n  `:quote`: parse quoted expression `'foo`. If `true`, will be parsed as `(quote foo)`.\n\n  `:read-eval`: parse read-eval (`=(+ 1 2 3)`). If `true`, the\n  resulting expression will be parsed as `(read-eval (+ 1 2 3))`.\n\n  `:regex`: parse regex literals (`#\"foo\"`). If `true`, defaults to\n  `re-pattern`.\n\n  `:syntax-quote`: parse syntax-quote (`(+ 1 2 3)`). Symbols get\n  qualified using `:resolve-symbol` which defaults to `identity`:\n  `(parse-string \"`x\" {:syntax-quote {:resolve-symbol #(symbol \"user\" (str %))}})\n  ;;=> (quote user/x)`.\n\n  `:var`: parse var literals (`#'foo`). If `true`, the resulting\n  expression will be parsed as `(var foo)`.\n\n  `:all`: when `true`, the above options will be set to `true` unless\n  explicitly provided.\n\n  Supported options for processing reader conditionals:\n\n  `:read-cond`: - `:allow` to process reader conditionals, or\n                  `:preserve` to keep all branches\n  `:features`: - persistent set of feature keywords for reader conditionals (e.g. `#{:clj}`).\n\n  `:auto-resolve`: map of alias to namespace symbols for\n  auto-resolving keywords. Use `:current` as the alias for the current\n  namespace.\n\n  `:readers`: data readers.\n\n  Additional arguments to tools.reader may be passed with\n  `:tools.reader/opts`, like `:readers` for passing reader tag functions.\n\n  Deprecated options:\n\n  `:dispatch`: DEPRECATED by parsing options.\n\n  ","~:top-fn",["^ ","~:variadic?",false,"~:fixed-arity",2,"~:max-fixed-arity",2,"~:method-params",[["~$s"],["~$s","^3H"]],"^3F",["^Y",[["~$s"],["~$s","^3H"]]],"~:arglists-meta",["^Y",[null,null]]]],"^K","^1@","^6","edamame/core.cljc","^:",19,"^3J",["^ ","^3K",false,"^3L",2,"^3M",2,"^3N",[["~$s"],["~$s","^3H"]],"^3F",["^Y",[["~$s"],["~$s","^3H"]]],"^3O",["^Y",[null,null]]],"^3N",[["~$s"],["~$s","^3H"]],"~:protocol-impl",null,"^3L",2,"^3O",["^Y",[null,null]],"^8",1,"^3K",false,"~:methods",[["^ ","^3L",1,"^3K",false,"~:tag",["^J",[null,"~$js/RegExp","~$clj","~$any","~$cljs.core/Keyword","~$cljs.core/ISet","~$cljs.tools.reader.impl.utils/ReaderConditional","~$cljs.core/List","~$not-native","~$cljs.core/MetaFn","~$clj-nil"]]],["^ ","^3L",2,"^3K",false,"^3R",["^J",[null,"^3S","^3T","^3U","^3V","^3W","^3X","^3Y","^3Z","^3[","^40"]]]],"^7",5,"^9",5,"^3M",2,"~:fn-var",true,"^3F",["^Y",[["~$s"],["~$s","^3H"]]],"^3I","Parses first EDN value from string.\n\n  Supported parsing options:\n\n  `:deref`: parse forms starting with `@`. If `true`, the resulting\n  expression will be parsed as `(deref expr)`.\n\n  `:fn`: parse function literals (`#(inc %)`). If `true`, will be parsed as `(fn [%1] (inc %))`.\n\n  `:quote`: parse quoted expression `'foo`. If `true`, will be parsed as `(quote foo)`.\n\n  `:read-eval`: parse read-eval (`=(+ 1 2 3)`). If `true`, the\n  resulting expression will be parsed as `(read-eval (+ 1 2 3))`.\n\n  `:regex`: parse regex literals (`#\"foo\"`). If `true`, defaults to\n  `re-pattern`.\n\n  `:syntax-quote`: parse syntax-quote (`(+ 1 2 3)`). Symbols get\n  qualified using `:resolve-symbol` which defaults to `identity`:\n  `(parse-string \"`x\" {:syntax-quote {:resolve-symbol #(symbol \"user\" (str %))}})\n  ;;=> (quote user/x)`.\n\n  `:var`: parse var literals (`#'foo`). If `true`, the resulting\n  expression will be parsed as `(var foo)`.\n\n  `:all`: when `true`, the above options will be set to `true` unless\n  explicitly provided.\n\n  Supported options for processing reader conditionals:\n\n  `:read-cond`: - `:allow` to process reader conditionals, or\n                  `:preserve` to keep all branches\n  `:features`: - persistent set of feature keywords for reader conditionals (e.g. `#{:clj}`).\n\n  `:auto-resolve`: map of alias to namespace symbols for\n  auto-resolving keywords. Use `:current` as the alias for the current\n  namespace.\n\n  `:readers`: data readers.\n\n  Additional arguments to tools.reader may be passed with\n  `:tools.reader/opts`, like `:readers` for passing reader tag functions.\n\n  Deprecated options:\n\n  `:dispatch`: DEPRECATED by parsing options.\n\n  "],"~$parse-string-all",["^ ","^3E",null,"^5",["^ ","^6","edamame/core.cljc","^7",59,"^8",7,"^9",59,"^:",23,"^3F",["^Y",["^3G",["^Y",[["~$s"],["~$s","^3H"]]]]],"^3I","Like parse-string but parses all values from string and returns them\n  in a vector.","^3J",["^ ","^3K",false,"^3L",2,"^3M",2,"^3N",[["~$s"],["~$s","^3H"]],"^3F",["^Y",[["~$s"],["~$s","^3H"]]],"^3O",["^Y",[null,null]]]],"^K","^1C","^6","edamame/core.cljc","^:",23,"^3J",["^ ","^3K",false,"^3L",2,"^3M",2,"^3N",[["~$s"],["~$s","^3H"]],"^3F",["^Y",[["~$s"],["~$s","^3H"]]],"^3O",["^Y",[null,null]]],"^3N",[["~$s"],["~$s","^3H"]],"^3P",null,"^3L",2,"^3O",["^Y",[null,null]],"^8",1,"^3K",false,"^3Q",[["^ ","^3L",1,"^3K",false,"^3R","^3T"],["^ ","^3L",2,"^3K",false,"^3R","^3T"]],"^7",59,"^9",59,"^3M",2,"^41",true,"^3F",["^Y",[["~$s"],["~$s","^3H"]]],"^3I","Like parse-string but parses all values from string and returns them\n  in a vector."]],"^W",["^ ","^R","^R"],"^10",["^ ","^U",["^J",[]]],"^11",["^ "],"^12",["^S","^R","^Q"]],"^N","^L","~:ns-specs",["^ "],"~:ns-spec-vars",["^J",[]],"~:compiler-options",["^1F",[["^45","~:static-fns"],true,["^45","~:shadow-tweaks"],null,["^45","~:source-map-inline"],null,["^45","~:elide-asserts"],false,["^45","~:optimize-constants"],null,["^45","^17"],null,["^45","~:external-config"],null,["^45","~:tooling-config"],null,["^45","~:emit-constants"],null,["^45","~:load-tests"],null,["^45","~:form-size-threshold"],null,["^45","~:data-readers"],null,["^45","~:infer-externs"],"~:auto",["^45","^19"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^45","~:fn-invoke-direct"],null,["^45","~:source-map"],"/dev/null"]]]