["^ ","~:output",["^ ","~:js","goog.provide('re_frame.loggers');\n/**\n * Holds the current set of logging functions.\n * By default, re-frame uses the functions provided by js/console.\n * Use `set-loggers!` to change these defaults\n *   \n */\nre_frame.loggers.loggers = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,\"log\",\"log\",-1595516004),console.log.bind(console),new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),console.warn.bind(console),new cljs.core.Keyword(null,\"error\",\"error\",-978969032),console.error.bind(console),new cljs.core.Keyword(null,\"debug\",\"debug\",-1608172596),console.debug.bind(console),new cljs.core.Keyword(null,\"group\",\"group\",582596132),(cljs.core.truth_(console.group)?console.group.bind(console):console.log.bind(console)),new cljs.core.Keyword(null,\"groupEnd\",\"groupEnd\",-337721382),(cljs.core.truth_(console.groupEnd)?console.groupEnd.bind(console):(function (){\nreturn cljs.core.List.EMPTY;\n}))], null));\nre_frame.loggers.console = (function re_frame$loggers$console(var_args){\nvar args__4742__auto__ = [];\nvar len__4736__auto___78239 = arguments.length;\nvar i__4737__auto___78240 = (0);\nwhile(true){\nif((i__4737__auto___78240 < len__4736__auto___78239)){\nargs__4742__auto__.push((arguments[i__4737__auto___78240]));\n\nvar G__78241 = (i__4737__auto___78240 + (1));\ni__4737__auto___78240 = G__78241;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4743__auto__ = ((((1) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((1)),(0),null)):null);\nreturn re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4743__auto__);\n});\n\n(re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic = (function (level,args){\nif(cljs.core.contains_QMARK_(cljs.core.deref(re_frame.loggers.loggers),level)){\n} else {\nthrow (new Error([\"Assert failed: \",[\"re-frame: log called with unknown level: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(level)].join(''),\"\\n\",\"(contains? (clojure.core/deref loggers) level)\"].join('')));\n}\n\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2((function (){var G__78238 = cljs.core.deref(re_frame.loggers.loggers);\nreturn (level.cljs$core$IFn$_invoke$arity$1 ? level.cljs$core$IFn$_invoke$arity$1(G__78238) : level.call(null,G__78238));\n})(),args);\n}));\n\n(re_frame.loggers.console.cljs$lang$maxFixedArity = (1));\n\n/** @this {Function} */\n(re_frame.loggers.console.cljs$lang$applyTo = (function (seq78236){\nvar G__78237 = cljs.core.first(seq78236);\nvar seq78236__$1 = cljs.core.next(seq78236);\nvar self__4723__auto__ = this;\nreturn self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__78237,seq78236__$1);\n}));\n\nre_frame.loggers.set_loggers_BANG_ = (function re_frame$loggers$set_loggers_BANG_(new_loggers){\nif(cljs.core.empty_QMARK_(clojure.set.difference.cljs$core$IFn$_invoke$arity$2(cljs.core.set(cljs.core.keys(new_loggers)),cljs.core.set(cljs.core.keys(cljs.core.deref(re_frame.loggers.loggers)))))){\n} else {\nthrow (new Error([\"Assert failed: \",\"Unknown keys in new-loggers\",\"\\n\",\"(empty? (difference (set (keys new-loggers)) (-> (clojure.core/deref loggers) keys set)))\"].join('')));\n}\n\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(re_frame.loggers.loggers,cljs.core.merge,new_loggers);\n});\n/**\n * Get the current logging functions used by re-frame.\n */\nre_frame.loggers.get_loggers = (function re_frame$loggers$get_loggers(){\nreturn cljs.core.deref(re_frame.loggers.loggers);\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","re_frame/loggers.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",21],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$re-frame.loggers","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$clojure.set","^O","~$cljs.core","^P","~$goog","^Q"],"~:seen",["^H",["~:require"]],"~:uses",["^ ","~$difference","^O"],"~:require-macros",["^ ","^P","^P"],"~:form",["~#list",["~$ns","^J",["^X",["^S",["^O","~:refer",["^U"]]]]]],"~:flags",["^ ","^S",["^H",[]]],"~:js-deps",["^ "],"~:deps",["^Q","^P","^O"]],"^L","^J","~:resource-id",["~:shadow.build.classpath/resource","re_frame/loggers.cljc"],"~:compiled-at",1668745258677,"~:resource-name","re_frame/loggers.cljc","~:warnings",[],"~:source","(ns re-frame.loggers\n  (:require\n   [clojure.set :refer [difference]]\n   #?@(:clj [[clojure.string :as str]\n             [clojure.tools.logging :as log]])))\n\n#?(:clj (defn log [level & args]\n          (log/log level (if (= 1 (count args))\n                           (first args)\n                           (str/join \" \" args)))))\n\n\n;; XXX should loggers be put in the registrar ??\n(def ^:private loggers\n  \"Holds the current set of logging functions.\n   By default, re-frame uses the functions provided by js/console.\n   Use `set-loggers!` to change these defaults\n  \"\n  (atom #?(:cljs {:log       (js/console.log.bind   js/console)\n                  :warn      (js/console.warn.bind  js/console)\n                  :error     (js/console.error.bind js/console)\n                  :debug     (js/console.debug.bind js/console)\n                  :group     (if (.-group js/console)         ;; console.group does not exist  < IE 11\n                               (js/console.group.bind js/console)\n                               (js/console.log.bind   js/console))\n                  :groupEnd  (if (.-groupEnd js/console)        ;; console.groupEnd does not exist  < IE 11\n                               (js/console.groupEnd.bind js/console)\n                               #())})\n        ;; clojure versions\n        #?(:clj {:log      (partial log :info)\n                 :warn     (partial log :warn)\n                 :error    (partial log :error)\n                 :debug    (partial log :debug)\n                 :group    (partial log :info)\n                 :groupEnd  #()})))\n\n(defn console\n  [level & args]\n  (assert (contains? @loggers level) (str \"re-frame: log called with unknown level: \" level))\n  (apply (level @loggers) args))\n\n\n(defn set-loggers!\n  [new-loggers]\n  (assert  (empty? (difference (set (keys new-loggers)) (-> @loggers keys set))) \"Unknown keys in new-loggers\")\n  (swap! loggers merge new-loggers))\n\n(defn get-loggers\n  \"Get the current logging functions used by re-frame.\"\n  []\n  @loggers)\n","~:reader-features",["^H",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings",";AAaA;;;;;;AAAeA,AAKb,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AAA0B,AAACC,AAAsBC,AACvB,AAACC,AAAsBD,AACvB,AAACE,AAAsBF,AACvB,AAACG,AAAsBH,AACvB,AAAI,AAASA,AACX,AAACI,AAAsBJ,AACvB,AAACD,AAAsBC,AACzB,AAAA,AAAI,AAAYA,AACd,AAACK,AAAyBL;AAD5B,AAAA;;AAW7B,AAAA,AAAA,AAAAM,AAAMM;AAAN,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAK,AAAA,AAAA,AAAA,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAME,AACHM,AAAQC;AADX,AAEE,AAAQ,AAAA,AAAAE,AAACC,AAAWzB,AAAQqB;AAA5B;AAAA,AAAA,AAAA,AAAAE,AAAA,AAAA,AAAA,AAAA,AAAmC,AAAA,AAAiDF;;;AACpF,AAACK,AAAM,AAAAC,AAAA,AAAAH,AAAQxB;AAAR,AAAA,AAAA2B,AAAAA,AAACN,AAAAA,AAAAA;AAAgBC;;;AAH1B,AAAA,AAAA,AAAMP;;AAAN;AAAA,AAAA,AAAA,AAAAC,AAAMD;AAAN,AAAA,AAAAE,AAAA,AAAAC,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAA,AAAA,AAAAI,AAAA;AAAA,AAAA,AAAAA,AAAAH,AAAAD;;;AAAA,AAMA,AAAA,AAAMY,AACHC;AADH,AAEE,AAAS,AAACC,AAAO,AAACC,AAAW,AAACC,AAAI,AAACC,AAAKJ,AAAc,AAAA,AAAA,AAAAL,AAAKxB,AAAQiC,AAAKD;AAAxE;AAAA,AAAA,AAAA,AAAAT,AAAA,AAAA,AAAA,AAAA,AAAA;;;AACA,AAACW,AAAMlC,AAAQmC,AAAMN;;AAEvB;;;AAAA,AAAMO;AAAN,AAAA,AAAAZ,AAGGxB","names",["re-frame.loggers/loggers","cljs.core.atom","js/console.log.bind","js/console","js/console.warn.bind","js/console.error.bind","js/console.debug.bind","js/console.group.bind","js/console.groupEnd.bind","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","re-frame.loggers/console","seq78236","G__78237","cljs.core/first","cljs.core/next","self__4723__auto__","level","args","js/Error","cljs.core/deref","cljs.core/contains?","cljs.core.apply","G__78238","re-frame.loggers/set-loggers!","new-loggers","cljs.core/empty?","clojure.set.difference","cljs.core/set","cljs.core/keys","cljs.core.swap_BANG_","cljs.core/merge","re-frame.loggers/get-loggers"]],"~:used-vars",["^H",["~$cljs.core/keys","~$re-frame.loggers/set-loggers!","~$cljs.core/deref","~$js/console.group.bind","~$cljs.core/apply","~$re-frame.loggers/console","~$cljs.core/atom","~$js/console","~$cljs.core/set","~$cljs.core/empty?","~$js/console.warn.bind","~$cljs.core/contains?","~$js/console.debug.bind","~$js/console.error.bind","~$cljs.core/swap!","~$js/console.groupEnd.bind","~$clojure.set/difference","~$js/console.log.bind","~$cljs.core/merge","~$re-frame.loggers/loggers","~$js/Error","~$re-frame.loggers/get-loggers"]]],"~:cache-keys",["~#cmap",[["^13","goog/dom/tagname.js"],["6025affb7181cd40418600864f58eed1ea80055d","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^H",[]],"~:deps-syms",["^Q","~$goog.dom.HtmlElement"]]],["^13","goog/math/math.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1W",["^ ","^1X",null,"^1Y",["^H",[]],"^1Z",["^Q","~$goog.array","~$goog.asserts"]]],["^13","goog/html/trustedtypes.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1W",["^ ","^1X",null,"^1Y",["^H",[]],"^1Z",["^Q"]]],["^13","goog/labs/useragent/browser.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1W",["^ ","^1X",null,"^1Y",["^H",[]],"^1Z",["^Q","^20","~$goog.labs.userAgent.util","~$goog.object","~$goog.string.internal"]]],["^13","goog/html/safeurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1W",["^ ","^1X",null,"^1Y",["^H",[]],"^1Z",["^Q","^21","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^24"]]],["^13","re_frame/loggers.cljc"],["6bdd905f56b7d7836ae9d5b772dc693f33550f10","^1W",["^ ","^1X",null,"^1Y",["^H",[]],"^1Z",["^Q","^P","^O"]]],["^13","goog/array/array.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1W",["^ ","^1X",null,"^1Y",["^H",[]],"^1Z",["^Q","^21"]]],["^13","goog/debug/error.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1W",["^ ","^1X",null,"^1Y",["^H",[]],"^1Z",["^Q"]]],["^13","goog/dom/nodetype.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1W",["^ ","^1X",null,"^1Y",["^H",[]],"^1Z",["^Q"]]],["^13","goog/string/typedstring.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1W",["^ ","^1X",null,"^1Y",["^H",[]],"^1Z",["^Q"]]],["^13","goog/object/object.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1W",["^ ","^1X",null,"^1Y",["^H",[]],"^1Z",["^Q"]]],["^13","goog/dom/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1W",["^ ","^1X",null,"^1Y",["^H",[]],"^1Z",["^Q","^21"]]],"~:SHADOW-TIMESTAMP",[1668744077000,1668744077000,1668745156000],["^13","goog/math/long.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1W",["^ ","^1X",null,"^1Y",["^H",[]],"^1Z",["^Q","^21","~$goog.reflect"]]],["^13","goog/html/trustedresourceurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1W",["^ ","^1X",null,"^1Y",["^H",[]],"^1Z",["^Q","^21","~$goog.html.trustedtypes","^27","^28","^29","^2:"]]],["^13","goog/string/internal.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1W",["^ ","^1X",null,"^1Y",["^H",[]],"^1Z",["^Q"]]],["^13","goog/functions/functions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1W",["^ ","^1X",null,"^1Y",["^H",[]],"^1Z",["^Q"]]],["^13","goog/html/safestyle.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1W",["^ ","^1X",null,"^1Y",["^H",[]],"^1Z",["^Q","^20","^21","~$goog.html.SafeUrl","^29","^2:","^24"]]],["^13","goog/dom/safe.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1W",["^ ","^1X",null,"^1Y",["^H",[]],"^1Z",["^Q","^21","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","~$goog.html.SafeScript","~$goog.html.SafeStyle","^2>","^26","~$goog.html.uncheckedconversions","^29","^24"]]],["^13","goog/structs/map.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1W",["^ ","^1X",null,"^1Y",["^H",[]],"^1Z",["^Q","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^13","goog/html/safehtml.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1W",["^ ","^1X",null,"^1Y",["^H",[]],"^1Z",["^Q","^20","^21","~$goog.dom.TagName","~$goog.dom.tags","^2B","^2C","~$goog.html.SafeStyleSheet","^2>","^26","^2=","^27","^28","~$goog.labs.userAgent.browser","^23","^29","^2:","^24"]]],["^13","goog/dom/tags.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1W",["^ ","^1X",null,"^1Y",["^H",[]],"^1Z",["^Q","^23"]]],["^13","goog/asserts/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1W",["^ ","^1X",null,"^1Y",["^H",[]],"^1Z",["^Q","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^13","goog/uri/uri.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1W",["^ ","^1X",null,"^1Y",["^H",[]],"^1Z",["^Q","^20","^21","~$goog.string","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^13","goog/i18n/bidi.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1W",["^ ","^1X",null,"^1Y",["^H",[]],"^1Z",["^Q"]]],["^13","goog/fs/url.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1W",["^ ","^1X",null,"^1Y",["^H",[]],"^1Z",["^Q"]]],["^13","goog/base.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1W",["^ ","^1X",null,"^1Y",["^H",[]],"^1Z",[]]],["^13","goog/structs/structs.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1W",["^ ","^1X",null,"^1Y",["^H",[]],"^1Z",["^Q","^20","^23"]]],["^13","goog/string/string.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1W",["^ ","^1X",null,"^1Y",["^H",[]],"^1Z",["^Q","~$goog.dom.safe","^2D","^29","^24"]]],["^13","goog/reflect/reflect.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1W",["^ ","^1X",null,"^1Y",["^H",[]],"^1Z",["^Q"]]],["^13","goog/labs/useragent/util.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1W",["^ ","^1X",null,"^1Y",["^H",[]],"^1Z",["^Q","^24"]]],["^13","goog/string/stringbuffer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1W",["^ ","^1X",null,"^1Y",["^H",[]],"^1Z",["^Q"]]],["^13","goog/iter/iter.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1W",["^ ","^1X",null,"^1Y",["^H",[]],"^1Z",["^Q","^20","^21","^2@","~$goog.math"]]],["^13","goog/html/uncheckedconversions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1W",["^ ","^1X",null,"^1Y",["^H",[]],"^1Z",["^Q","^21","^2A","^2B","^2C","^2I","^2>","^26","^29","^24"]]],["^13","goog/dom/htmlelement.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1W",["^ ","^1X",null,"^1Y",["^H",[]],"^1Z",["^Q"]]],["^13","cljs/core.cljs"],["16d93c2274e5f02773c418ade96d56ba9a02d17e","^1W",["^ ","^1X",null,"^1Y",["^H",[]],"^1Z",["^Q","~$goog.math.Long","~$goog.math.Integer","^2M","^23","^20","~$goog.Uri","~$goog.string.StringBuffer"]]],["^13","goog/html/safescript.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1W",["^ ","^1X",null,"^1Y",["^H",[]],"^1Z",["^Q","^21","^2=","^29","^2:"]]],["^13","goog/html/safestylesheet.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1W",["^ ","^1X",null,"^1Y",["^H",[]],"^1Z",["^Q","^20","^21","^2C","^23","^29","^2:","^24"]]],["^13","goog/math/integer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1W",["^ ","^1X",null,"^1Y",["^H",[]],"^1Z",["^Q","^2<"]]],["^13","clojure/set.cljs"],["16d93c2274e5f02773c418ade96d56ba9a02d17e","^1W",["^ ","^1X",null,"^1Y",["^H",[]],"^1Z",["^Q","^P"]]],["^13","goog/uri/utils.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1W",["^ ","^1X",null,"^1Y",["^H",[]],"^1Z",["^Q","^20","^21","^2M"]]],["^13","goog/string/const.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1W",["^ ","^1X",null,"^1Y",["^H",[]],"^1Z",["^Q","^21","^2:"]]]]],"~:clj-info",["^ ","jar:file:/home/riz/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/tagged_literals.cljc",1668745156000,"jar:file:/home/riz/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/source_map/base64.clj",1668745156000,"jar:file:/home/riz/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1652431301000,"jar:file:/home/riz/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/reader_types.clj",1659945934000,"jar:file:/home/riz/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1652431301000,"jar:file:/home/riz/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1652431301000,"jar:file:/home/riz/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/compiler.cljc",1668745156000,"jar:file:/home/riz/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/util.cljc",1668745156000,"jar:file:/home/riz/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1652431301000,"jar:file:/home/riz/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1652431301000,"jar:file:/home/riz/.m2/repository/binaryage/devtools/1.0.2/devtools-1.0.2.jar!/devtools/defaults.clj",1668744076000,"jar:file:/home/riz/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader.clj",1659945934000,"jar:file:/home/riz/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/inspect.clj",1659945934000,"jar:file:/home/riz/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/env.cljc",1668745156000,"jar:file:/home/riz/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1659945905000,"jar:file:/home/riz/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/externs.clj",1668745156000,"jar:file:/home/riz/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/source_map/base64_vlq.clj",1668745156000,"jar:file:/home/riz/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/js_deps.cljc",1668745156000,"jar:file:/home/riz/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/analyzer.cljc",1668745156000,"jar:file:/home/riz/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1652431301000,"jar:file:/home/riz/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/default_data_readers.clj",1659945934000,"jar:file:/home/riz/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1652431301000,"jar:file:/home/riz/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/source_map.clj",1668745156000,"jar:file:/home/riz/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/errors.clj",1659945934000,"jar:file:/home/riz/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/core.cljc",1668745156000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","re_frame/loggers.cljc","^7",1,"^8",5,"^9",1,"^:",21],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E"],"^F",null,"^G",["^H",[]],"^I","^J","^M",null,"^N",["^ ","^O","^O","^P","^P","^Q","^Q"],"^R",["^H",["^S"]],"~:shadow/js-access-global",["^H",["Error"]],"^T",["^ ","^U","^O"],"~:defs",["^ ","~$loggers",["^ ","^5",["^ ","^6","re_frame/loggers.cljc","^7",14,"^8",16,"^9",14,"^:",23,"~:private",true],"^3K",true,"^I","^1R","^6","re_frame/loggers.cljc","^:",23,"^8",1,"^7",14,"^9",14,"~:tag","~$cljs.core/Atom","~:doc","Holds the current set of logging functions.\n   By default, re-frame uses the functions provided by js/console.\n   Use `set-loggers!` to change these defaults\n  "],"~$console",["^ ","~:protocol-inline",null,"^5",["^ ","^6","re_frame/loggers.cljc","^7",37,"^8",7,"^9",37,"^:",14,"~:arglists",["^X",["~$quote",["^X",[["~$level","~$&","~$args"]]]]],"~:top-fn",["^ ","~:variadic?",true,"~:fixed-arity",1,"~:max-fixed-arity",1,"~:method-params",[["^X",["^3S","^3T"]]],"^3Q",["^X",[["^3S","~$&","^3T"]]],"~:arglists-meta",["^X",[null]]]],"^I","^1D","^6","re_frame/loggers.cljc","^:",14,"^3U",["^ ","^3V",true,"^3W",1,"^3X",1,"^3Y",[["^X",["^3S","^3T"]]],"^3Q",["^X",[["^3S","~$&","^3T"]]],"^3Z",["^X",[null]]],"^3Y",[["^X",["^3S","^3T"]]],"~:protocol-impl",null,"^3W",1,"^3Z",["^X",[null]],"^8",1,"^3V",true,"~:methods",[["^ ","^3W",1,"^3V",true,"^3L","~$any"]],"^7",37,"~:ret-tag","^41","^9",37,"^3X",1,"~:fn-var",true,"^3Q",["^X",[["^3S","~$&","^3T"]]]],"~$set-loggers!",["^ ","^3P",null,"^5",["^ ","^6","re_frame/loggers.cljc","^7",43,"^8",7,"^9",43,"^:",19,"^3Q",["^X",["^3R",["^X",[["~$new-loggers"]]]]]],"^I","^1@","^6","re_frame/loggers.cljc","^:",19,"^3Y",["^X",[["^45"]]],"^3[",null,"^3Z",["^X",[null,null]],"^8",1,"^3V",false,"^7",43,"^42",["^H",[null,"^41"]],"^9",43,"^3X",1,"^43",true,"^3Q",["^X",["^3R",["^X",[["^45"]]]]]],"~$get-loggers",["^ ","^3P",null,"^5",["^ ","^6","re_frame/loggers.cljc","^7",48,"^8",7,"^9",48,"^:",18,"^3Q",["^X",["^3R",["^X",[[]]]]],"^3N","Get the current logging functions used by re-frame."],"^I","^1T","^6","re_frame/loggers.cljc","^:",18,"^3Y",["^X",[[]]],"^3[",null,"^3Z",["^X",[null,null]],"^8",1,"^3V",false,"^7",48,"^42","^41","^9",48,"^3X",0,"^43",true,"^3Q",["^X",["^3R",["^X",[[]]]]],"^3N","Get the current logging functions used by re-frame."]],"^V",["^ ","^P","^P"],"~:cljs.analyzer/constants",["^ ","^R",["^H",["~:group","~:warn","~:debug","~:error","~:groupEnd","~:log"]],"~:order",["^4=","^49","^4;","^4:","^48","^4<"]],"^[",["^ ","^S",["^H",[]]],"^10",["^ "],"^11",["^Q","^P","^O"]],"^L","^J","~:ns-specs",["^ "],"~:ns-spec-vars",["^H",[]],"~:compiler-options",["^1V",[["^4A","~:static-fns"],true,["^4A","~:shadow-tweaks"],null,["^4A","~:source-map-inline"],null,["^4A","~:elide-asserts"],false,["^4A","~:optimize-constants"],null,["^4A","^16"],null,["^4A","~:external-config"],null,["^4A","~:tooling-config"],null,["^4A","~:emit-constants"],null,["^4A","~:load-tests"],null,["^4A","~:form-size-threshold"],null,["^4A","~:data-readers"],null,["^4A","~:infer-externs"],"~:auto",["^4A","^18"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^4A","~:fn-invoke-direct"],null,["^4A","~:source-map"],"/dev/null"]]]