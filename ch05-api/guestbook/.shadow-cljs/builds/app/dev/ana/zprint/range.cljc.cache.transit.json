["^ ","~:output",["^ ","~:js","goog.provide('zprint.range');\n/**\n * If a line number n is in a particular edamame row, return the row map.\n *   If it is not in the row, return +1 or -1 to indicate which direction\n *   to look.\n */\nzprint.range.in_row_QMARK_ = (function zprint$range$in_row_QMARK_(n,row){\nif(cljs.core.truth_(row)){\nif((((new cljs.core.Keyword(null,\"row\",\"row\",-570139521).cljs$core$IFn$_invoke$arity$1(row) <= n)) && ((n <= new cljs.core.Keyword(null,\"end-row\",\"end-row\",-545103581).cljs$core$IFn$_invoke$arity$1(row))))){\nreturn row;\n} else {\nif((n < new cljs.core.Keyword(null,\"row\",\"row\",-570139521).cljs$core$IFn$_invoke$arity$1(row))){\nreturn (-1);\n} else {\nreturn (1);\n}\n}\n} else {\nreturn null;\n}\n});\n/**\n * Given two rows, is the first before the second?\n */\nzprint.range.row_before_QMARK_ = (function zprint$range$row_before_QMARK_(row_a,row_b){\nreturn (new cljs.core.Keyword(null,\"end-row\",\"end-row\",-545103581).cljs$core$IFn$_invoke$arity$1(row_a) < new cljs.core.Keyword(null,\"row\",\"row\",-570139521).cljs$core$IFn$_invoke$arity$1(row_b));\n});\n/**\n * Given two rows, if the linenumber is between the rows, return true, else\n *   nil.\n */\nzprint.range.between_rows_QMARK_ = (function zprint$range$between_rows_QMARK_(linenumber,row_a,row_b){\nif(((cljs.core.map_QMARK_(row_a)) && (cljs.core.map_QMARK_(row_b)))){\nif(zprint.range.row_before_QMARK_(row_a,row_b)){\nreturn (((new cljs.core.Keyword(null,\"end-row\",\"end-row\",-545103581).cljs$core$IFn$_invoke$arity$1(row_a) < linenumber)) && ((linenumber < new cljs.core.Keyword(null,\"row\",\"row\",-570139521).cljs$core$IFn$_invoke$arity$1(row_b))));\n} else {\nreturn (((new cljs.core.Keyword(null,\"end-row\",\"end-row\",-545103581).cljs$core$IFn$_invoke$arity$1(row_b) < linenumber)) && ((linenumber < new cljs.core.Keyword(null,\"row\",\"row\",-570139521).cljs$core$IFn$_invoke$arity$1(row_a))));\n}\n} else {\nreturn null;\n}\n});\n/**\n * Given a row-vec, and a current index into the row-vec, if the\n *   linenumber is within that row, return the index to that row.   If\n *   the linenumber is not in that row, then scan either way for\n *   max-tries looking for a match for this linenumber.  Return the\n *   row index if a row is found containing this linenumber. If it is\n *   between two rows, return the row after.  If we fall off the either\n *   end of the row-vec, then return :before-beginning or :beyone-end.  \n *   If we don't find anything after trying for max-tries, :before or\n *   :after, depending on which way we should try next.\n */\nzprint.range.scan_for_row = (function zprint$range$scan_for_row(row_vec,row_vec_index,linenumber,max_tries){\nvar current_index = row_vec_index;\nvar previous_index = null;\nvar tries = (0);\nwhile(true){\nvar row = cljs.core.get.cljs$core$IFn$_invoke$arity$2(row_vec,current_index);\nvar row_or_direction = zprint.range.in_row_QMARK_(linenumber,row);\nif(cljs.core.map_QMARK_(row_or_direction)){\nreturn current_index;\n} else {\nif((row_or_direction == null)){\nif((current_index > (0))){\nreturn new cljs.core.Keyword(null,\"beyond-end\",\"beyond-end\",487000285);\n} else {\nreturn new cljs.core.Keyword(null,\"before-beginning\",\"before-beginning\",485705715);\n}\n} else {\nif((tries >= max_tries)){\nif((row_or_direction > (0))){\nreturn new cljs.core.Keyword(null,\"after\",\"after\",594996914);\n} else {\nreturn new cljs.core.Keyword(null,\"before\",\"before\",-1633692388);\n}\n} else {\nvar next_index = (current_index + row_or_direction);\nvar next_row = cljs.core.get.cljs$core$IFn$_invoke$arity$2(row_vec,next_index);\nvar row_or_direction__$1 = zprint.range.in_row_QMARK_(linenumber,next_row);\nif(cljs.core.map_QMARK_(row_or_direction__$1)){\nreturn next_index;\n} else {\nif((row_or_direction__$1 == null)){\nif((next_index > (0))){\nreturn new cljs.core.Keyword(null,\"beyond-end\",\"beyond-end\",487000285);\n} else {\nreturn new cljs.core.Keyword(null,\"before-beginning\",\"before-beginning\",485705715);\n}\n} else {\nif(cljs.core.truth_(zprint.range.between_rows_QMARK_(linenumber,row,next_row))){\nif(zprint.range.row_before_QMARK_(row,next_row)){\nreturn next_index;\n} else {\nreturn current_index;\n}\n} else {\nvar G__70938 = (current_index + row_or_direction__$1);\nvar G__70939 = current_index;\nvar G__70940 = (tries + (1));\ncurrent_index = G__70938;\nprevious_index = G__70939;\ntries = G__70940;\ncontinue;\n}\n\n}\n}\n}\n\n}\n}\nbreak;\n}\n});\n/**\n * Return the absolute value of a number.\n */\nzprint.range.abs = (function zprint$range$abs(n){\nif((n < (0))){\nreturn (- n);\n} else {\nreturn n;\n}\n});\n/**\n * Given a vector of rows, find the row that contains a line number,\n *   linenumber, and return the number of that row in the vector.\n *   row-vec looks like this: \n *   [{:row 2, :col 1, :end-row 7, :end-col 21}\n * {:row 9, :col 1, :end-row 18, :end-col 6} \n * {:row 20, :col 1, :end-row 29, :end-col 6}]\n *   If none exists, return the next row. Note that line numbers are 1\n *   based, not zero based for this routine and the information in\n *   row-vec, but the index into row-vec that this routine returns is\n *   zero based.  Uses a binary search. If the line number is before the\n *   first information in the row-vec, returns :before-beginning, and\n *   if it is after the last information in the row-vec, returns\n *   :beyond-end. Note that the row-vec as returned from edamame\n *   parse-string-all contains not only maps like {:row 5 :end-row 10}\n *   but also nils for things that didn't have paired delimiters around\n *   them (e.g., keywords, strings, etc.).  You must remove those\n *   from row-vec before calling find-row.  Note that find-row returns an \n *   index into row-vec, and it must be the row-vec that has had nils \n *   removed from it (or this routine would do that for you).\n */\nzprint.range.find_row = (function zprint$range$find_row(var_args){\nvar G__70890 = arguments.length;\nswitch (G__70890) {\ncase 4:\nreturn zprint.range.find_row.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));\n\nbreak;\ncase 3:\nreturn zprint.range.find_row.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(zprint.range.find_row.cljs$core$IFn$_invoke$arity$4 = (function (row_vec,linenumber,dbg_QMARK_,scan_size){\nif(cljs.core.truth_(dbg_QMARK_)){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"find-row: linenumber:\",linenumber,\"scan-size:\",scan_size], 0));\n} else {\n}\n\nvar size = cljs.core.count(row_vec);\nvar row_vec_index = ((size / (2)) | (0));\nvar previous_index = (0);\nvar tries = (0);\nwhile(true){\nif((tries > (10))){\nreturn new cljs.core.Keyword(null,\"fail\",\"fail\",1706214930);\n} else {\nvar maybe_index = zprint.range.scan_for_row(row_vec,row_vec_index,linenumber,scan_size);\nif(typeof maybe_index === 'number'){\nreturn maybe_index;\n} else {\nif(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(maybe_index,new cljs.core.Keyword(null,\"before-beginning\",\"before-beginning\",485705715))) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(maybe_index,new cljs.core.Keyword(null,\"beyond-end\",\"beyond-end\",487000285))))){\nreturn maybe_index;\n} else {\nvar G__70942 = (function (){var G__70905 = row_vec_index;\nvar G__70906 = ((zprint.range.abs((row_vec_index - previous_index)) / (2)) | (0));\nvar fexpr__70904 = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(maybe_index,new cljs.core.Keyword(null,\"before\",\"before\",-1633692388)))?cljs.core._:cljs.core._PLUS_);\nreturn (fexpr__70904.cljs$core$IFn$_invoke$arity$2 ? fexpr__70904.cljs$core$IFn$_invoke$arity$2(G__70905,G__70906) : fexpr__70904.call(null,G__70905,G__70906));\n})();\nvar G__70943 = row_vec_index;\nvar G__70944 = (tries + (1));\nrow_vec_index = G__70942;\nprevious_index = G__70943;\ntries = G__70944;\ncontinue;\n\n}\n}\n}\nbreak;\n}\n}));\n\n(zprint.range.find_row.cljs$core$IFn$_invoke$arity$3 = (function (row_vec,n,dbg_QMARK_){\nreturn zprint.range.find_row.cljs$core$IFn$_invoke$arity$4(row_vec,n,dbg_QMARK_,(4));\n}));\n\n(zprint.range.find_row.cljs$lang$maxFixedArity = 4);\n\n/**\n * Given a sequence of lines and a starting line index in that sequence,\n *   return the index of the first non-blank line including or after that\n *   starting line index.\n */\nzprint.range.next_non_blank_line = (function zprint$range$next_non_blank_line(line_vec,index){\nvar max_idx = (cljs.core.count(line_vec) - (1));\nvar idx = index;\nwhile(true){\nvar line = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(line_vec,idx);\nif((((!(cljs.core.empty_QMARK_(clojure.string.trim(line))))) || ((idx >= max_idx)))){\nreturn idx;\n} else {\nvar G__70945 = (idx + (1));\nidx = G__70945;\ncontinue;\n}\nbreak;\n}\n});\n/**\n * Given a sequence of lines and a starting line index in that sequence,\n *   return the index of the first previous non-blank line including or before\n *   that starting line index.  Returns -1 if no non-blank line found.\n */\nzprint.range.previous_non_blank_line = (function zprint$range$previous_non_blank_line(line_vec,index){\nvar idx = index;\nwhile(true){\nvar line = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(line_vec,idx);\nif((!(cljs.core.empty_QMARK_(clojure.string.trim(line))))){\nreturn idx;\n} else {\nif((idx === (0))){\nreturn (-1);\n} else {\nvar G__70946 = (idx - (1));\nidx = G__70946;\ncontinue;\n\n}\n}\nbreak;\n}\n});\n/**\n * Given a string which contains lines and a vector of those lines,\n *   and a range of lines inside of them, expand the range such that\n *   it covers everything from the first non-blank line beyond the\n *   previous top level expression before the start to the end of the\n *   top level expression containing the end of the range.  Returns\n *   [actual-start actual-end].  Note that start, end, actual-start\n *   and actual-end are all zero based line numbers.\n */\nzprint.range.expand_range_to_top_level = (function zprint$range$expand_range_to_top_level(filestring,lines,start,end,dbg_QMARK_){\nif(cljs.core.truth_(dbg_QMARK_)){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"expand-range-to-top-level: start:\",start,\"end:\",end], 0));\n} else {\n}\n\nvar line_count = cljs.core.count(lines);\nvar start__$1 = ((typeof start === 'number')?start:(0));\nvar end__$1 = ((typeof end === 'number')?end:line_count);\nvar end__$2 = (((end__$1 < start__$1))?start__$1:end__$1);\nvar row_vec = (function (){try{return cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.meta,edamame.core.parse_string_all.cljs$core$IFn$_invoke$arity$2(filestring,new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"all\",\"all\",892129742),true,new cljs.core.Keyword(null,\"features\",\"features\",-1146962336),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"clj\",\"clj\",-660495428),null,new cljs.core.Keyword(null,\"cljs\",\"cljs\",1492417629),null], null), null),new cljs.core.Keyword(null,\"read-cond\",\"read-cond\",1056899244),(function (expr){\nreturn cljs.core.with_meta(cljs.core.PersistentVector.EMPTY,cljs.core.meta(expr));\n}),new cljs.core.Keyword(null,\"auto-resolve\",\"auto-resolve\",1851201983),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"current\",\"current\",-1088038603),cljs.core._STAR_ns_STAR_], null)], null)));\n}catch (e70915){var e = e70915;\nreturn null;\n}})();\nvar row_vec__$1 = (cljs.core.truth_(row_vec)?cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY,cljs.core.remove.cljs$core$IFn$_invoke$arity$2(cljs.core.nil_QMARK_,row_vec)):null);\nvar _ = (cljs.core.truth_(dbg_QMARK_)?cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([row_vec__$1], 0)):null);\nvar start_row_idx = (cljs.core.truth_(row_vec__$1)?zprint.range.find_row.cljs$core$IFn$_invoke$arity$3(row_vec__$1,(start__$1 + (1)),dbg_QMARK_):new cljs.core.Keyword(null,\"fail\",\"fail\",1706214930));\nvar ___$1 = (cljs.core.truth_(dbg_QMARK_)?cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"expand-range-to-top-level start-row-idx:\",start_row_idx,((typeof start_row_idx === 'number')?[\"row:\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.nth.cljs$core$IFn$_invoke$arity$2(row_vec__$1,start_row_idx)),\"previous row:\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.nth.cljs$core$IFn$_invoke$arity$2(row_vec__$1,(function (){var x__4214__auto__ = (0);\nvar y__4215__auto__ = (start_row_idx - (1));\nreturn ((x__4214__auto__ > y__4215__auto__) ? x__4214__auto__ : y__4215__auto__);\n})()))].join(''):\"\")], 0)):null);\nvar actual_start = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(start_row_idx,new cljs.core.Keyword(null,\"fail\",\"fail\",1706214930)))?(-1):((((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(start_row_idx,new cljs.core.Keyword(null,\"before-beginning\",\"before-beginning\",485705715))) && ((!((start__$1 < (0)))))))?(0):((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(start_row_idx,new cljs.core.Keyword(null,\"before-beginning\",\"before-beginning\",485705715)))?(-1):((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(start_row_idx,(0)))?(0):((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(start_row_idx,new cljs.core.Keyword(null,\"beyond-end\",\"beyond-end\",487000285)))?line_count:new cljs.core.Keyword(null,\"end-row\",\"end-row\",-545103581).cljs$core$IFn$_invoke$arity$1(cljs.core.get.cljs$core$IFn$_invoke$arity$2(row_vec__$1,(start_row_idx - (1))))\n)))));\nvar actual_start__$1 = (((((actual_start < (1))) || ((actual_start >= line_count))))?actual_start:zprint.range.next_non_blank_line(lines,actual_start));\nvar end_row_idx = (cljs.core.truth_(row_vec__$1)?zprint.range.find_row.cljs$core$IFn$_invoke$arity$3(row_vec__$1,(end__$2 + (1)),dbg_QMARK_):new cljs.core.Keyword(null,\"fail\",\"fail\",1706214930));\nvar ___$2 = (cljs.core.truth_(dbg_QMARK_)?cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"expand-range-to-top-level end-row-idx:\",end_row_idx,((typeof end_row_idx === 'number')?[\"row:\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.nth.cljs$core$IFn$_invoke$arity$2(row_vec__$1,end_row_idx))].join(''):\"\")], 0)):null);\nvar actual_end = ((((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(end_row_idx,new cljs.core.Keyword(null,\"fail\",\"fail\",1706214930))) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(end_row_idx,new cljs.core.Keyword(null,\"beyond-end\",\"beyond-end\",487000285)))))?line_count:((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(end_row_idx,new cljs.core.Keyword(null,\"before-beginning\",\"before-beginning\",485705715)))?new cljs.core.Keyword(null,\"do-nothing\",\"do-nothing\",1030476282):(function (){var end_row = cljs.core.get.cljs$core$IFn$_invoke$arity$2(row_vec__$1,end_row_idx);\nif(((end__$2 + (1)) < new cljs.core.Keyword(null,\"row\",\"row\",-570139521).cljs$core$IFn$_invoke$arity$1(end_row))){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(end_row_idx,start_row_idx)){\nreturn new cljs.core.Keyword(null,\"do-nothing\",\"do-nothing\",1030476282);\n} else {\nreturn zprint.range.previous_non_blank_line(lines,end__$2);\n}\n} else {\nreturn (new cljs.core.Keyword(null,\"end-row\",\"end-row\",-545103581).cljs$core$IFn$_invoke$arity$1(end_row) - (1));\n}\n})()\n));\nvar actual_start__$2 = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(actual_end,new cljs.core.Keyword(null,\"do-nothing\",\"do-nothing\",1030476282)))?(-1):actual_start__$1);\nvar actual_end__$1 = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(actual_end,new cljs.core.Keyword(null,\"do-nothing\",\"do-nothing\",1030476282)))?(-1):actual_end);\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [actual_start__$2,actual_end__$1], null);\n});\n/**\n * Given lines, a sequence of lines, and a start and end of a range,\n *   split the sequence of lines into three parts: [before-lines range\n *   after-lines].  If any of these collections would be empty, return\n *   an empty sequence. End must be equal to or greater than start. If\n *   end is neg?, there will be no range.\n */\nzprint.range.split_out_range = (function zprint$range$split_out_range(lines,start,end){\nvar start__$1 = (function (){var x__4214__auto__ = start;\nvar y__4215__auto__ = (0);\nreturn ((x__4214__auto__ > y__4215__auto__) ? x__4214__auto__ : y__4215__auto__);\n})();\nvar before = start__$1;\nvar range = (((end < (0)))?(0):((end - start__$1) + (1)));\nvar after = ((cljs.core.count(lines) - (1)) - end);\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take.cljs$core$IFn$_invoke$arity$2(before,lines),cljs.core.take.cljs$core$IFn$_invoke$arity$2(range,cljs.core.drop.cljs$core$IFn$_invoke$arity$2(before,lines)),cljs.core.take.cljs$core$IFn$_invoke$arity$2(after,cljs.core.drop.cljs$core$IFn$_invoke$arity$2((before + range),lines))], null);\n});\n/**\n * Given before-lines, range, and after-lines where before-lines\n *   and after-lines are sequences of lines, and range is a string\n *   which has been formatted, reassemble these three chunks into a\n *   single string with appropriate newlines joining them together.\n *   Note that this is *not* an inverse to split-out-range, because\n *   in that routine range is a seq of lines, and in this routine\n *   range is a string.  Note also that we only join them with a \n *   newline if there are two pieces, otherwise we get extra lines.\n */\nzprint.range.reassemble_range = (function zprint$range$reassemble_range(before_lines,range,after_lines){\nvar before_QMARK_ = (!(cljs.core.empty_QMARK_(before_lines)));\nvar before_lines__$1 = ((before_QMARK_)?clojure.string.join.cljs$core$IFn$_invoke$arity$2(\"\\n\",before_lines):\"\");\nvar range_QMARK_ = (!(cljs.core.empty_QMARK_(range)));\nvar after_QMARK_ = (!(cljs.core.empty_QMARK_(after_lines)));\nvar after_lines__$1 = ((after_QMARK_)?clojure.string.join.cljs$core$IFn$_invoke$arity$2(\"\\n\",after_lines):\"\");\nvar before_range = ((((before_QMARK_) && (range_QMARK_)))?\"\\n\":\"\");\nvar range_after = ((((range_QMARK_) && (after_QMARK_)))?\"\\n\":\"\");\nvar range_after__$1 = (((((!(range_QMARK_))) && (before_QMARK_) && (after_QMARK_)))?\"\\n\":range_after);\nreturn [before_lines__$1,before_range,cljs.core.str.cljs$core$IFn$_invoke$arity$1(range),range_after__$1,after_lines__$1].join('');\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","zprint/range.cljc","~:line",1,"~:column",14,"~:end-line",1,"~:end-column",26,"~:no-doc",true],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index","~$highlight.js","~$module$node_modules$highlight_DOT_js$lib$index","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$zprint.range","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$clojure.string","^R","~$s","^R","~$edamame.core","^S","~$cljs.core","^T","~$goog","^U"],"~:seen",["^K",["~:require"]],"~:uses",["^ ","~$parse-string-all","^S"],"~:require-macros",["^ ","^T","^T"],"~:form",["~#list",["~$ns","^M",["^10",["^W",["^R","~:as","~$s"],["^S","~:refer",["^Y"]]]]]],"~:flags",["^ ","^W",["^K",[]]],"~:js-deps",["^ "],"~:deps",["^U","^T","^R","^S"]],"^O","^M","~:resource-id",["~:shadow.build.classpath/resource","zprint/range.cljc"],"~:compiled-at",1668750090241,"~:resource-name","zprint/range.cljc","~:warnings",[],"~:source","(ns ^:no-doc zprint.range\n  (:require [clojure.string :as s]\n            [edamame.core :refer [parse-string-all]]))\n\n;;\n;; # Handle range specification\n;;\n\n(defn in-row?\n  \"If a line number n is in a particular edamame row, return the row map.\n  If it is not in the row, return +1 or -1 to indicate which direction\n  to look.\"\n  [n row]\n  #_(println \"n:\" n \"row:\" row)\n  (when row\n    (if (<= (:row row) n (:end-row row)) row (if (< n (:row row)) -1 +1))))\n\n(defn row-before?\n  \"Given two rows, is the first before the second?\"\n  [row-a row-b]\n  #_(println \"row-before? row-a:\" row-a \"row-b:\" row-b)\n  (< (:end-row row-a) (:row row-b)))\n\n(defn between-rows?\n  \"Given two rows, if the linenumber is between the rows, return true, else\n  nil.\"\n  [linenumber row-a row-b]\n  #_(println \"between-rows? linenumber:\" linenumber\n             \"row-a:\" row-a\n             \"row-b:\" row-b)\n  (when (and (map? row-a) (map? row-b))\n    (if (row-before? row-a row-b)\n      (< (:end-row row-a) linenumber (:row row-b))\n      (< (:end-row row-b) linenumber (:row row-a)))))\n\n(defn scan-for-row\n  \"Given a row-vec, and a current index into the row-vec, if the\n  linenumber is within that row, return the index to that row.   If\n  the linenumber is not in that row, then scan either way for\n  max-tries looking for a match for this linenumber.  Return the\n  row index if a row is found containing this linenumber. If it is\n  between two rows, return the row after.  If we fall off the either\n  end of the row-vec, then return :before-beginning or :beyone-end.  \n  If we don't find anything after trying for max-tries, :before or\n  :after, depending on which way we should try next.\"\n  [row-vec row-vec-index linenumber max-tries]\n  (loop [current-index row-vec-index\n         previous-index nil\n         tries 0]\n    (let [row (get row-vec current-index)\n          row-or-direction (in-row? linenumber row)]\n      #_(println \"scan-for-row current-index:\" current-index\n                 \"previous-index:\" previous-index\n                 \"tries:\" tries\n                 \"row:\" row\n                 \"row-or-direction\" row-or-direction)\n      (cond (map? row-or-direction) current-index   ; in this row\n            (nil? row-or-direction)\n              (if (pos? current-index) :beyond-end :before-beginning)\n            :else\n              (if (>= tries max-tries)\n                ; tell caller where to look next\n                (if (pos? row-or-direction) :after :before)\n                (let [next-index (+ current-index row-or-direction)\n                      next-row (get row-vec next-index)\n                      row-or-direction (in-row? linenumber next-row)]\n                  (cond (map? row-or-direction) next-index ; we are in the row,\n                                                           ; return its index\n                        (nil? row-or-direction)\n                          (if (pos? next-index) :beyond-end :before-beginning)\n                        :else (if (between-rows? linenumber row next-row)\n                                ; We are between rows, return later one\n                                (if (row-before? row next-row)\n                                  next-index\n                                  current-index)\n                                ; Keep looking\n                                (recur (+ current-index row-or-direction)\n                                       current-index\n                                       (inc tries))))))))))\n\n(defn abs \"Return the absolute value of a number.\" [n] (if (neg? n) (- n) n))\n\n(defn find-row\n  \"Given a vector of rows, find the row that contains a line number,\n  linenumber, and return the number of that row in the vector.\n  row-vec looks like this: \n  [{:row 2, :col 1, :end-row 7, :end-col 21}\n   {:row 9, :col 1, :end-row 18, :end-col 6} \n   {:row 20, :col 1, :end-row 29, :end-col 6}]\n  If none exists, return the next row. Note that line numbers are 1\n  based, not zero based for this routine and the information in\n  row-vec, but the index into row-vec that this routine returns is\n  zero based.  Uses a binary search. If the line number is before the\n  first information in the row-vec, returns :before-beginning, and\n  if it is after the last information in the row-vec, returns\n  :beyond-end. Note that the row-vec as returned from edamame\n  parse-string-all contains not only maps like {:row 5 :end-row 10}\n  but also nils for things that didn't have paired delimiters around\n  them (e.g., keywords, strings, etc.).  You must remove those\n  from row-vec before calling find-row.  Note that find-row returns an \n  index into row-vec, and it must be the row-vec that has had nils \n  removed from it (or this routine would do that for you).\"\n  ([row-vec linenumber dbg? scan-size]\n   (when dbg?\n     (println \"find-row: linenumber:\" linenumber \"scan-size:\" scan-size))\n   (let [size (count row-vec)]\n     ; We are 1 based, because edamame row numbers are 1 based.\n     (loop [row-vec-index (int (/ size 2))\n            previous-index 0\n            tries 0]\n       #_(println \"\\n\\n================== row-vec-index:\" row-vec-index)\n       (if (> tries 10)\n         :fail\n         (let [maybe-index\n                 (scan-for-row row-vec row-vec-index linenumber scan-size)]\n           ; If it is a number, that is the row-vec-index to return\n           ; If it is :before, we ran off the beginning, :after the end\n           ; nil means that we didn't find it, but can keep looking\n           #_(println \"maybe-index:\" maybe-index)\n           (cond\n             (number? maybe-index) maybe-index  ; we found something to return\n             ; is it in this row?\n             (or (= maybe-index :before-beginning) (= maybe-index :beyond-end))\n               maybe-index\n             :else ; Has to be :before or :after\n               (do #_(println \"find-row: maybe-index:\" maybe-index\n                              \"row-vec-index:\" row-vec-index\n                              \"previous-index:\" previous-index\n                              \"abs:\" (abs (- row-vec-index previous-index)))\n                   (recur ((if (= maybe-index :before) - +)\n                            row-vec-index\n                            (int (/ (abs (- row-vec-index previous-index)) 2)))\n                          row-vec-index\n                          (inc tries)))))))))\n  ([row-vec n dbg?] (find-row row-vec n dbg? 4)))\n\n(defn next-non-blank-line\n  \"Given a sequence of lines and a starting line index in that sequence,\n  return the index of the first non-blank line including or after that\n  starting line index.\"\n  [line-vec index]\n  (let [max-idx (dec (count line-vec))]\n    (loop [idx index]\n      (let [line (nth line-vec idx)]\n        ; Return current idx if it is non-blank or the last line\n        (if (or (not (empty? (clojure.string/trim line))) (>= idx max-idx))\n          idx\n          (recur (inc idx)))))))\n\n(defn previous-non-blank-line\n  \"Given a sequence of lines and a starting line index in that sequence,\n  return the index of the first previous non-blank line including or before\n  that starting line index.  Returns -1 if no non-blank line found.\"\n  [line-vec index]\n  (loop [idx index]\n    (let [line (nth line-vec idx)]\n      ; Return current idx if it is non-blank\n      (cond (not (empty? (clojure.string/trim line))) idx\n            ; if the first line is not non-blank, then we didn't find one\n            (zero? idx) -1\n            ; keep looking for a non-blank line\n            :else (recur (dec idx))))))\n\n(defn expand-range-to-top-level\n  \"Given a string which contains lines and a vector of those lines,\n  and a range of lines inside of them, expand the range such that\n  it covers everything from the first non-blank line beyond the\n  previous top level expression before the start to the end of the\n  top level expression containing the end of the range.  Returns\n  [actual-start actual-end].  Note that start, end, actual-start\n  and actual-end are all zero based line numbers.\"\n  ; But also note that parse-string-all (and thus row-vec) and\n  ; find-row all operate with one-based line numbers!!!\n  [filestring lines start end dbg?]\n  (when dbg? (println \"expand-range-to-top-level: start:\" start \"end:\" end))\n  (let [line-count (count lines)\n        start (if (number? start) start 0)\n        end (if (number? end) end line-count)\n        ; If end is before start, make them the same\n        end (if (< end start) start end)\n        ; Get a vector of maps describing all top level expressions using\n        ; one based line numbers.  For example:\n        ; [{:col 1, :end-col 21, :end-row 7, :row 2}\n        ;  {:col 1, :end-col 6, :end-row 20, :row 11}\n        ;  {:col 1, :end-col 70, :end-row 26, :row 22}\n        ;  {:col 1, :end-col 48, :end-row 29, :row 27}]\n        row-vec (try (mapv meta\n                       (parse-string-all\n                         filestring\n                         {:all true,\n                          :features #{:clj :cljs},\n                          ; Ensure that reader-conditionals have something\n                          ; show up with meta data regardless of the\n                          ; \"features\" in the reader-conditional\n                          :read-cond (fn [expr] (with-meta [] (meta expr))),\n                          :auto-resolve {:current *ns*}}))\n                     ; If we can't parse it, we have set row-vec to nil, which\n                     ; should cause us to format everything.\n                     (catch #?(:clj Exception\n                               :cljs :default)\n                       e\n                       nil))\n        row-vec (when row-vec (into [] (remove nil? row-vec)))\n        ; If row-vec is nil, then we didn't parse this, so do everything\n        ; silently.\n        _ (when dbg? (prn row-vec))\n        ; Figure out which expression start falls within, after making\n        ; it a one-based line number.  -idx are indexes into row-vec,\n        ; *not* linenumbers\n        start-row-idx (if row-vec (find-row row-vec (inc start) dbg?) :fail)\n        _ (when dbg?\n            (println \"expand-range-to-top-level start-row-idx:\"\n                     start-row-idx\n                     (if (number? start-row-idx)\n                       (str \"row:\" (nth row-vec start-row-idx)\n                            \"previous row:\" (nth row-vec\n                                                 (max 0 (dec start-row-idx))))\n                       \"\")))\n        actual-start\n          ; -1 is a signal to not start at the beginning unless the end is\n          ; also -1, in which case it is a signal to put everything in the\n          ; before\n          (cond (= start-row-idx :fail) -1\n                (and (= start-row-idx :before-beginning) (not (neg? start))) 0\n                (= start-row-idx :before-beginning) -1\n                (= start-row-idx 0) 0\n                (= start-row-idx :beyond-end) line-count\n                ; normal case -- the line beyond the previous form\n                ; where (dec start-row-idx) is presumably the previous form\n                :else (:end-row (get row-vec (dec start-row-idx))))\n        ; Now, move actual-start to the first non-blank line after or equal to\n        ; actual-start.  But not if it is zero or negative, since we don't\n        ; want to mess with the range if it encompasses the beginning of\n        ; the file.\n        actual-start (if (or (< actual-start 1) (>= actual-start line-count))\n                       actual-start\n                       (next-non-blank-line lines actual-start))\n        end-row-idx (if row-vec (find-row row-vec (inc end) dbg?) :fail)\n        _ (when dbg?\n            (println \"expand-range-to-top-level end-row-idx:\"\n                     end-row-idx\n                     (if (number? end-row-idx)\n                       (str \"row:\" (nth row-vec end-row-idx))\n                       \"\")))\n        actual-end (cond\n                     (or (= end-row-idx :fail) (= end-row-idx :beyond-end))\n                       ; We are beyond the end or it didn't parse, say the\n                       ; end is beyond the last line.\n                       line-count\n                     (= end-row-idx :before-beginning)\n                       ; Someone is confused here too, say the end is the\n                       ; start.\n                       :do-nothing\n                     :else (let [end-row (get row-vec end-row-idx)]\n                             ; end-row-idx is either the row in which end falls\n                             ; or the next row if it was between rows\n                             ; Note: :row is the start line of a row-map\n                             ;\n                             ; Does end fall between two top-level expressions?\n                             (if (< (inc end) (:row end-row))\n                               ; Yes -- are start and end in same gap\n                               ; between expressions?\n                               (if (= end-row-idx start-row-idx)\n                                 ; Yes, do nothing\n                                 :do-nothing\n                                 ; No, work backward to the first non-blank\n                                 ; line prior to the end\n                                 (previous-non-blank-line lines end))\n                               ; No, end falls inside of an expression, so use\n                               ; the end of that expression.  Make it zero\n                               ; based.\n                               (dec (:end-row end-row)))))\n        actual-start (if (= actual-end :do-nothing) -1 actual-start)\n        actual-end (if (= actual-end :do-nothing) -1 actual-end)]\n    [actual-start actual-end]))\n\n;;\n;; # Take apart a series of lines based on a range\n;;\n\n(defn split-out-range\n  \"Given lines, a sequence of lines, and a start and end of a range,\n  split the sequence of lines into three parts: [before-lines range\n  after-lines].  If any of these collections would be empty, return\n  an empty sequence. End must be equal to or greater than start. If\n  end is neg?, there will be no range.\"\n  [lines start end]\n  (let [start (max start 0)\n        before start\n        range (if (neg? end) 0 (inc (- end start)))\n        after (- (dec (count lines)) end)]\n    #_(println \"before:\" before \"range:\" range \"after:\" after)\n    [(take before lines) (take range (drop before lines))\n     (take after (drop (+ before range) lines))]))\n\n(defn reassemble-range\n  \"Given before-lines, range, and after-lines where before-lines\n  and after-lines are sequences of lines, and range is a string\n  which has been formatted, reassemble these three chunks into a\n  single string with appropriate newlines joining them together.\n  Note that this is *not* an inverse to split-out-range, because\n  in that routine range is a seq of lines, and in this routine\n  range is a string.  Note also that we only join them with a \n  newline if there are two pieces, otherwise we get extra lines.\"\n  [before-lines range after-lines]\n  (let [before? (not (empty? before-lines))\n        before-lines (if before? (clojure.string/join \"\\n\" before-lines) \"\")\n        range? (not (empty? range))\n        after? (not (empty? after-lines))\n        after-lines (if after? (clojure.string/join \"\\n\" after-lines) \"\")\n        before-range (if (and before? range?) \"\\n\" \"\")\n        range-after (if (and range? after?) \"\\n\" \"\")\n        range-after (if (and (not range?) before? after?) \"\\n\" range-after)]\n    (str before-lines before-range range range-after after-lines)))\n\n","~:reader-features",["^K",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["zprint.range/in-row?","n","row","zprint.range/row-before?","row-a","row-b","zprint.range/between-rows?","linenumber","cljs.core/map?","zprint.range/scan-for-row","row-vec","row-vec-index","max-tries","current-index","previous-index","tries","cljs.core.get","row-or-direction","next-index","next-row","zprint.range/abs","var_args","G__70890","zprint.range/find-row","js/Error","dbg?","scan-size","cljs.core.println","size","cljs.core/count","maybe-index","cljs.core._EQ_","G__70905","G__70906","fexpr__70904","cljs.core/-","cljs.core/+","zprint.range.find_row","zprint.range/next-non-blank-line","line-vec","index","max-idx","idx","line","cljs.core.nth","cljs.core/empty?","clojure.string/trim","zprint.range/previous-non-blank-line","zprint.range/expand-range-to-top-level","filestring","lines","start","end","line-count","e70915","cljs.core.mapv","cljs.core/meta","edamame.core.parse_string_all","expr","cljs.core/with-meta","cljs.core/*ns*","e","cljs.core.into","cljs.core.remove","cljs.core/nil?","_","cljs.core.prn","start-row-idx","x__4214__auto__","y__4215__auto__","actual-start","end-row-idx","actual-end","end-row","zprint.range/split-out-range","before","range","after","cljs.core.take","cljs.core.drop","zprint.range/reassemble-range","before-lines","after-lines","before?","clojure.string.join","range?","after?","before-range","range-after"]],"~:used-vars",["^K",["~$zprint.range/scan-for-row","~$cljs.core/=","~$zprint.range/reassemble-range","~$cljs.core/take","~$zprint.range/find-row","~$cljs.core/empty?","~$zprint.range/row-before?","~$cljs.core/map?","~$zprint.range/next-non-blank-line","~$zprint.range/between-rows?","~$zprint.range/expand-range-to-top-level","~$cljs.core/println","~$cljs.core/not","~$zprint.range/abs","~$zprint.range/in-row?","~$clojure.string/trim","~$zprint.range/split-out-range","~$zprint.range/previous-non-blank-line","~$js/Error","~$cljs.core/drop"]]],"~:cache-keys",["~#cmap",[["^18","goog/dom/tagname.js"],["6025affb7181cd40418600864f58eed1ea80055d","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^K",[]],"~:deps-syms",["^U","~$goog.dom.HtmlElement"]]],["^18","edamame/core.cljc"],["8915b89bb492e9e815fdda7c1acef2683070dc2a","^1Z",["^ ","^1[",null,"^20",["^K",[]],"^21",["^U","^T","~$edamame.impl.parser"]]],["^18","cljs/tools/reader/impl/utils.cljs"],["b4dce2f71625d60fe1fd6a95816017811dd73522","^1Z",["^ ","^1[",null,"^20",["^K",[]],"^21",["^U","^T","^R","~$goog.string"]]],["^18","goog/math/math.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1Z",["^ ","^1[",null,"^20",["^K",[]],"^21",["^U","~$goog.array","~$goog.asserts"]]],["^18","goog/html/trustedtypes.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1Z",["^ ","^1[",null,"^20",["^K",[]],"^21",["^U"]]],["^18","goog/labs/useragent/browser.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1Z",["^ ","^1[",null,"^20",["^K",[]],"^21",["^U","^25","~$goog.labs.userAgent.util","~$goog.object","~$goog.string.internal"]]],["^18","goog/html/safeurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1Z",["^ ","^1[",null,"^20",["^K",[]],"^21",["^U","^26","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^29"]]],["^18","goog/array/array.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1Z",["^ ","^1[",null,"^20",["^K",[]],"^21",["^U","^26"]]],["^18","goog/debug/error.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1Z",["^ ","^1[",null,"^20",["^K",[]],"^21",["^U"]]],["^18","cljs/tools/reader/edn.cljs"],["b4dce2f71625d60fe1fd6a95816017811dd73522","^1Z",["^ ","^1[",null,"^20",["^K",[]],"^21",["^U","^T","~$cljs.tools.reader.impl.errors","~$cljs.tools.reader.reader-types","~$cljs.tools.reader.impl.utils","~$cljs.tools.reader.impl.commons","~$cljs.tools.reader","^24","~$goog.string.StringBuffer"]]],["^18","goog/dom/nodetype.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1Z",["^ ","^1[",null,"^20",["^K",[]],"^21",["^U"]]],["^18","cljs/tools/reader/impl/inspect.cljs"],["b4dce2f71625d60fe1fd6a95816017811dd73522","^1Z",["^ ","^1[",null,"^20",["^K",[]],"^21",["^U","^T"]]],["^18","cljs/tools/reader.cljs"],["b4dce2f71625d60fe1fd6a95816017811dd73522","^1Z",["^ ","^1[",null,"^20",["^K",[]],"^21",["^U","^T","^2A","^2B","^2C","^2@","^25","^24","^2E"]]],["^18","edamame/impl/parser.cljc"],["8915b89bb492e9e815fdda7c1acef2683070dc2a","^1Z",["^ ","^1[",null,"^20",["^K",[]],"^21",["^U","^T","~$cljs.tools.reader.edn","^2A","~$cljs.tools.reader.impl.inspect","^2B","^2C","^R","~$edamame.impl.read-fn","~$edamame.impl.syntax-quote","^2E"]]],["^18","goog/string/typedstring.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1Z",["^ ","^1[",null,"^20",["^K",[]],"^21",["^U"]]],["^18","goog/object/object.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1Z",["^ ","^1[",null,"^20",["^K",[]],"^21",["^U"]]],["^18","goog/dom/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1Z",["^ ","^1[",null,"^20",["^K",[]],"^21",["^U","^26"]]],"~:SHADOW-TIMESTAMP",[1668744077000,1668744077000,1668745156000],["^18","edamame/impl/syntax_quote.cljc"],["8915b89bb492e9e815fdda7c1acef2683070dc2a","^1Z",["^ ","^1[",null,"^20",["^K",[]],"^21",["^U","^T","^R"]]],["^18","goog/math/long.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1Z",["^ ","^1[",null,"^20",["^K",[]],"^21",["^U","^26","~$goog.reflect"]]],["^18","goog/html/trustedresourceurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1Z",["^ ","^1[",null,"^20",["^K",[]],"^21",["^U","^26","~$goog.html.trustedtypes","^2<","^2=","^2>","^2?"]]],["^18","goog/string/internal.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1Z",["^ ","^1[",null,"^20",["^K",[]],"^21",["^U"]]],["^18","goog/functions/functions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1Z",["^ ","^1[",null,"^20",["^K",[]],"^21",["^U"]]],["^18","goog/html/safestyle.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1Z",["^ ","^1[",null,"^20",["^K",[]],"^21",["^U","^25","^26","~$goog.html.SafeUrl","^2>","^2?","^29"]]],["^18","goog/dom/safe.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1Z",["^ ","^1[",null,"^20",["^K",[]],"^21",["^U","^26","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","~$goog.html.SafeScript","~$goog.html.SafeStyle","^2M","^2;","~$goog.html.uncheckedconversions","^2>","^29"]]],["^18","goog/structs/map.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1Z",["^ ","^1[",null,"^20",["^K",[]],"^21",["^U","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^18","goog/html/safehtml.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1Z",["^ ","^1[",null,"^20",["^K",[]],"^21",["^U","^25","^26","~$goog.dom.TagName","~$goog.dom.tags","^2Q","^2R","~$goog.html.SafeStyleSheet","^2M","^2;","^2L","^2<","^2=","~$goog.labs.userAgent.browser","^28","^2>","^2?","^29"]]],["^18","goog/dom/tags.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1Z",["^ ","^1[",null,"^20",["^K",[]],"^21",["^U","^28"]]],["^18","goog/asserts/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1Z",["^ ","^1[",null,"^20",["^K",[]],"^21",["^U","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^18","goog/uri/uri.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1Z",["^ ","^1[",null,"^20",["^K",[]],"^21",["^U","^25","^26","^24","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^18","edamame/impl/read_fn.cljc"],["8915b89bb492e9e815fdda7c1acef2683070dc2a","^1Z",["^ ","^1[",null,"^20",["^K",[]],"^21",["^U","^T"]]],["^18","goog/i18n/bidi.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1Z",["^ ","^1[",null,"^20",["^K",[]],"^21",["^U"]]],["^18","goog/fs/url.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1Z",["^ ","^1[",null,"^20",["^K",[]],"^21",["^U"]]],["^18","goog/base.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1Z",["^ ","^1[",null,"^20",["^K",[]],"^21",[]]],["^18","goog/structs/structs.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1Z",["^ ","^1[",null,"^20",["^K",[]],"^21",["^U","^25","^28"]]],["^18","cljs/tools/reader/impl/errors.cljs"],["b4dce2f71625d60fe1fd6a95816017811dd73522","^1Z",["^ ","^1[",null,"^20",["^K",[]],"^21",["^U","^T","^2A","^R","^2G"]]],["^18","clojure/string.cljs"],["16d93c2274e5f02773c418ade96d56ba9a02d17e","^1Z",["^ ","^1[",null,"^20",["^K",[]],"^21",["^U","^T","^24","^2E"]]],["^18","goog/string/string.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1Z",["^ ","^1[",null,"^20",["^K",[]],"^21",["^U","~$goog.dom.safe","^2S","^2>","^29"]]],["^18","goog/reflect/reflect.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1Z",["^ ","^1[",null,"^20",["^K",[]],"^21",["^U"]]],["^18","goog/labs/useragent/util.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1Z",["^ ","^1[",null,"^20",["^K",[]],"^21",["^U","^29"]]],["^18","goog/string/stringbuffer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1Z",["^ ","^1[",null,"^20",["^K",[]],"^21",["^U"]]],["^18","cljs/tools/reader/reader_types.cljs"],["b4dce2f71625d60fe1fd6a95816017811dd73522","^1Z",["^ ","^1[",null,"^20",["^K",[]],"^21",["^U","^T","^2B","^24","^2E"]]],["^18","goog/iter/iter.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1Z",["^ ","^1[",null,"^20",["^K",[]],"^21",["^U","^25","^26","^2O","~$goog.math"]]],["^18","goog/html/uncheckedconversions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1Z",["^ ","^1[",null,"^20",["^K",[]],"^21",["^U","^26","^2P","^2Q","^2R","^2X","^2M","^2;","^2>","^29"]]],["^18","zprint/range.cljc"],["bcaedc2ca968ebbb39028e5b7a25467410a0b7a6","^1Z",["^ ","^1[",null,"^20",["^K",[]],"^21",["^U","^T","^R","^S"]]],["^18","cljs/tools/reader/impl/commons.cljs"],["b4dce2f71625d60fe1fd6a95816017811dd73522","^1Z",["^ ","^1[",null,"^20",["^K",[]],"^21",["^U","^T","^2@","^2A","^2B"]]],["^18","goog/dom/htmlelement.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1Z",["^ ","^1[",null,"^20",["^K",[]],"^21",["^U"]]],["^18","cljs/core.cljs"],["16d93c2274e5f02773c418ade96d56ba9a02d17e","^1Z",["^ ","^1[",null,"^20",["^K",[]],"^21",["^U","~$goog.math.Long","~$goog.math.Integer","^24","^28","^25","~$goog.Uri","^2E"]]],["^18","goog/html/safescript.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1Z",["^ ","^1[",null,"^20",["^K",[]],"^21",["^U","^26","^2L","^2>","^2?"]]],["^18","goog/html/safestylesheet.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1Z",["^ ","^1[",null,"^20",["^K",[]],"^21",["^U","^25","^26","^2R","^28","^2>","^2?","^29"]]],["^18","goog/math/integer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1Z",["^ ","^1[",null,"^20",["^K",[]],"^21",["^U","^2K"]]],["^18","goog/uri/utils.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1Z",["^ ","^1[",null,"^20",["^K",[]],"^21",["^U","^25","^26","^24"]]],["^18","goog/string/const.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1Z",["^ ","^1[",null,"^20",["^K",[]],"^21",["^U","^26","^2?"]]]]],"~:clj-info",["^ ","jar:file:/home/riz/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/tagged_literals.cljc",1668745156000,"jar:file:/home/riz/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/source_map/base64.clj",1668745156000,"jar:file:/home/riz/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1652431301000,"jar:file:/home/riz/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/cljs/tools/reader/reader_types.clj",1659945934000,"jar:file:/home/riz/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/reader_types.clj",1659945934000,"jar:file:/home/riz/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1652431301000,"jar:file:/home/riz/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1652431301000,"jar:file:/home/riz/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/compiler.cljc",1668745156000,"jar:file:/home/riz/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/util.cljc",1668745156000,"jar:file:/home/riz/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1652431301000,"jar:file:/home/riz/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1652431301000,"jar:file:/home/riz/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader.clj",1659945934000,"jar:file:/home/riz/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/inspect.clj",1659945934000,"jar:file:/home/riz/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/env.cljc",1668745156000,"jar:file:/home/riz/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1659945905000,"jar:file:/home/riz/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/externs.clj",1668745156000,"jar:file:/home/riz/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/source_map/base64_vlq.clj",1668745156000,"jar:file:/home/riz/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/js_deps.cljc",1668745156000,"jar:file:/home/riz/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/analyzer.cljc",1668745156000,"jar:file:/home/riz/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1652431301000,"jar:file:/home/riz/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/default_data_readers.clj",1659945934000,"jar:file:/home/riz/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1652431301000,"jar:file:/home/riz/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/source_map.clj",1668745156000,"jar:file:/home/riz/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/errors.clj",1659945934000,"jar:file:/home/riz/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/core.cljc",1668745156000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","zprint/range.cljc","^7",1,"^8",14,"^9",1,"^:",26,"^;",true],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H"],"^I",null,"^J",["^K",[]],"^L","^M","^P",null,"^Q",["^ ","^R","^R","~$s","^R","^S","^S","^T","^T","^U","^U"],"^V",["^K",["^W"]],"~:shadow/js-access-global",["^K",["Error"]],"^X",["^ ","^Y","^S"],"~:defs",["^ ","~$reassemble-range",["^ ","~:protocol-inline",null,"^5",["^ ","^6","zprint/range.cljc","^7",296,"^8",7,"^9",296,"^:",23,"~:arglists",["^10",["~$quote",["^10",[["~$before-lines","~$range","~$after-lines"]]]]],"~:doc","Given before-lines, range, and after-lines where before-lines\n  and after-lines are sequences of lines, and range is a string\n  which has been formatted, reassemble these three chunks into a\n  single string with appropriate newlines joining them together.\n  Note that this is *not* an inverse to split-out-range, because\n  in that routine range is a seq of lines, and in this routine\n  range is a string.  Note also that we only join them with a \n  newline if there are two pieces, otherwise we get extra lines."],"^L","^1F","^6","zprint/range.cljc","^:",23,"~:method-params",["^10",[["^3[","^40","^41"]]],"~:protocol-impl",null,"~:arglists-meta",["^10",[null,null]],"^8",1,"~:variadic?",false,"^7",296,"~:ret-tag","~$string","^9",296,"~:max-fixed-arity",3,"~:fn-var",true,"^3Y",["^10",["^3Z",["^10",[["^3[","^40","^41"]]]]],"^42","Given before-lines, range, and after-lines where before-lines\n  and after-lines are sequences of lines, and range is a string\n  which has been formatted, reassemble these three chunks into a\n  single string with appropriate newlines joining them together.\n  Note that this is *not* an inverse to split-out-range, because\n  in that routine range is a seq of lines, and in this routine\n  range is a string.  Note also that we only join them with a \n  newline if there are two pieces, otherwise we get extra lines."],"~$expand-range-to-top-level",["^ ","^3X",null,"^5",["^ ","^6","zprint/range.cljc","^7",164,"^8",7,"^9",164,"^:",32,"^3Y",["^10",["^3Z",["^10",[["~$filestring","~$lines","~$start","~$end","~$dbg?"]]]]],"^42","Given a string which contains lines and a vector of those lines,\n  and a range of lines inside of them, expand the range such that\n  it covers everything from the first non-blank line beyond the\n  previous top level expression before the start to the end of the\n  top level expression containing the end of the range.  Returns\n  [actual-start actual-end].  Note that start, end, actual-start\n  and actual-end are all zero based line numbers."],"^L","^1N","^6","zprint/range.cljc","^:",32,"^43",["^10",[["^4<","^4=","^4>","^4?","^4@"]]],"^44",null,"^45",["^10",[null,null]],"^8",1,"^46",false,"^7",164,"^47","~$cljs.core/IVector","^9",164,"^49",5,"^4:",true,"^3Y",["^10",["^3Z",["^10",[["^4<","^4=","^4>","^4?","^4@"]]]]],"^42","Given a string which contains lines and a vector of those lines,\n  and a range of lines inside of them, expand the range such that\n  it covers everything from the first non-blank line beyond the\n  previous top level expression before the start to the end of the\n  top level expression containing the end of the range.  Returns\n  [actual-start actual-end].  Note that start, end, actual-start\n  and actual-end are all zero based line numbers."],"~$find-row",["^ ","^3X",null,"^5",["^ ","^6","zprint/range.cljc","^7",83,"^8",7,"^9",83,"^:",15,"^3Y",["^10",["^3Z",["^10",[["~$row-vec","~$linenumber","^4@","~$scan-size"],["^4C","~$n","^4@"]]]]],"^42","Given a vector of rows, find the row that contains a line number,\n  linenumber, and return the number of that row in the vector.\n  row-vec looks like this: \n  [{:row 2, :col 1, :end-row 7, :end-col 21}\n   {:row 9, :col 1, :end-row 18, :end-col 6} \n   {:row 20, :col 1, :end-row 29, :end-col 6}]\n  If none exists, return the next row. Note that line numbers are 1\n  based, not zero based for this routine and the information in\n  row-vec, but the index into row-vec that this routine returns is\n  zero based.  Uses a binary search. If the line number is before the\n  first information in the row-vec, returns :before-beginning, and\n  if it is after the last information in the row-vec, returns\n  :beyond-end. Note that the row-vec as returned from edamame\n  parse-string-all contains not only maps like {:row 5 :end-row 10}\n  but also nils for things that didn't have paired delimiters around\n  them (e.g., keywords, strings, etc.).  You must remove those\n  from row-vec before calling find-row.  Note that find-row returns an \n  index into row-vec, and it must be the row-vec that has had nils \n  removed from it (or this routine would do that for you).","~:top-fn",["^ ","^46",false,"~:fixed-arity",4,"^49",4,"^43",[["^4C","^4D","^4@","^4E"],["^4C","~$n","^4@"]],"^3Y",["^10",[["^4C","^4D","^4@","^4E"],["^4C","~$n","^4@"]]],"^45",["^10",[null,null]]]],"^L","^1H","^6","zprint/range.cljc","^:",15,"^4F",["^ ","^46",false,"^4G",4,"^49",4,"^43",[["^4C","^4D","^4@","^4E"],["^4C","~$n","^4@"]],"^3Y",["^10",[["^4C","^4D","^4@","^4E"],["^4C","~$n","^4@"]]],"^45",["^10",[null,null]]],"^43",[["^4C","^4D","^4@","^4E"],["^4C","~$n","^4@"]],"^44",null,"^4G",4,"^45",["^10",[null,null]],"^8",1,"^46",false,"~:methods",[["^ ","^4G",4,"^46",false,"~:tag",["^K",["~$any","~$cljs.core/Keyword","~$number"]]],["^ ","^4G",3,"^46",false,"^4I",["^K",["^4J","^4K","^4L"]]]],"^7",83,"^9",83,"^49",4,"^4:",true,"^3Y",["^10",[["^4C","^4D","^4@","^4E"],["^4C","~$n","^4@"]]],"^42","Given a vector of rows, find the row that contains a line number,\n  linenumber, and return the number of that row in the vector.\n  row-vec looks like this: \n  [{:row 2, :col 1, :end-row 7, :end-col 21}\n   {:row 9, :col 1, :end-row 18, :end-col 6} \n   {:row 20, :col 1, :end-row 29, :end-col 6}]\n  If none exists, return the next row. Note that line numbers are 1\n  based, not zero based for this routine and the information in\n  row-vec, but the index into row-vec that this routine returns is\n  zero based.  Uses a binary search. If the line number is before the\n  first information in the row-vec, returns :before-beginning, and\n  if it is after the last information in the row-vec, returns\n  :beyond-end. Note that the row-vec as returned from edamame\n  parse-string-all contains not only maps like {:row 5 :end-row 10}\n  but also nils for things that didn't have paired delimiters around\n  them (e.g., keywords, strings, etc.).  You must remove those\n  from row-vec before calling find-row.  Note that find-row returns an \n  index into row-vec, and it must be the row-vec that has had nils \n  removed from it (or this routine would do that for you)."],"~$scan-for-row",["^ ","^3X",null,"^5",["^ ","^6","zprint/range.cljc","^7",36,"^8",7,"^9",36,"^:",19,"^3Y",["^10",["^3Z",["^10",[["^4C","~$row-vec-index","^4D","~$max-tries"]]]]],"^42","Given a row-vec, and a current index into the row-vec, if the\n  linenumber is within that row, return the index to that row.   If\n  the linenumber is not in that row, then scan either way for\n  max-tries looking for a match for this linenumber.  Return the\n  row index if a row is found containing this linenumber. If it is\n  between two rows, return the row after.  If we fall off the either\n  end of the row-vec, then return :before-beginning or :beyone-end.  \n  If we don't find anything after trying for max-tries, :before or\n  :after, depending on which way we should try next."],"^L","^1D","^6","zprint/range.cljc","^:",19,"^43",["^10",[["^4C","^4N","^4D","^4O"]]],"^44",null,"^45",["^10",[null,null]],"^8",1,"^46",false,"^7",36,"^47",["^K",["^4J","^4K","^4L"]],"^9",36,"^49",4,"^4:",true,"^3Y",["^10",["^3Z",["^10",[["^4C","^4N","^4D","^4O"]]]]],"^42","Given a row-vec, and a current index into the row-vec, if the\n  linenumber is within that row, return the index to that row.   If\n  the linenumber is not in that row, then scan either way for\n  max-tries looking for a match for this linenumber.  Return the\n  row index if a row is found containing this linenumber. If it is\n  between two rows, return the row after.  If we fall off the either\n  end of the row-vec, then return :before-beginning or :beyone-end.  \n  If we don't find anything after trying for max-tries, :before or\n  :after, depending on which way we should try next."],"~$row-before?",["^ ","^3X",null,"^5",["^ ","^6","zprint/range.cljc","^7",18,"^8",7,"^9",18,"^:",18,"^3Y",["^10",["^3Z",["^10",[["~$row-a","~$row-b"]]]]],"^42","Given two rows, is the first before the second?"],"^L","^1J","^6","zprint/range.cljc","^:",18,"^43",["^10",[["^4Q","^4R"]]],"^44",null,"^45",["^10",[null,null]],"^8",1,"^46",false,"^7",18,"^47","~$boolean","^9",18,"^49",2,"^4:",true,"^3Y",["^10",["^3Z",["^10",[["^4Q","^4R"]]]]],"^42","Given two rows, is the first before the second?"],"~$split-out-range",["^ ","^3X",null,"^5",["^ ","^6","zprint/range.cljc","^7",281,"^8",7,"^9",281,"^:",22,"^3Y",["^10",["^3Z",["^10",[["^4=","^4>","^4?"]]]]],"^42","Given lines, a sequence of lines, and a start and end of a range,\n  split the sequence of lines into three parts: [before-lines range\n  after-lines].  If any of these collections would be empty, return\n  an empty sequence. End must be equal to or greater than start. If\n  end is neg?, there will be no range."],"^L","^1T","^6","zprint/range.cljc","^:",22,"^43",["^10",[["^4=","^4>","^4?"]]],"^44",null,"^45",["^10",[null,null]],"^8",1,"^46",false,"^7",281,"^47","^4A","^9",281,"^49",3,"^4:",true,"^3Y",["^10",["^3Z",["^10",[["^4=","^4>","^4?"]]]]],"^42","Given lines, a sequence of lines, and a start and end of a range,\n  split the sequence of lines into three parts: [before-lines range\n  after-lines].  If any of these collections would be empty, return\n  an empty sequence. End must be equal to or greater than start. If\n  end is neg?, there will be no range."],"~$next-non-blank-line",["^ ","^3X",null,"^5",["^ ","^6","zprint/range.cljc","^7",137,"^8",7,"^9",137,"^:",26,"^3Y",["^10",["^3Z",["^10",[["~$line-vec","~$index"]]]]],"^42","Given a sequence of lines and a starting line index in that sequence,\n  return the index of the first non-blank line including or after that\n  starting line index."],"^L","^1L","^6","zprint/range.cljc","^:",26,"^43",["^10",[["^4V","^4W"]]],"^44",null,"^45",["^10",[null,null]],"^8",1,"^46",false,"^7",137,"^9",137,"^49",2,"^4:",true,"^3Y",["^10",["^3Z",["^10",[["^4V","^4W"]]]]],"^42","Given a sequence of lines and a starting line index in that sequence,\n  return the index of the first non-blank line including or after that\n  starting line index."],"~$between-rows?",["^ ","^3X",null,"^5",["^ ","^6","zprint/range.cljc","^7",24,"^8",7,"^9",24,"^:",20,"^3Y",["^10",["^3Z",["^10",[["^4D","^4Q","^4R"]]]]],"^42","Given two rows, if the linenumber is between the rows, return true, else\n  nil."],"^L","^1M","^6","zprint/range.cljc","^:",20,"^43",["^10",[["^4D","^4Q","^4R"]]],"^44",null,"^45",["^10",[null,null]],"^8",1,"^46",false,"^7",24,"^47",["^K",["^4S","~$clj-nil"]],"^9",24,"^49",3,"^4:",true,"^3Y",["^10",["^3Z",["^10",[["^4D","^4Q","^4R"]]]]],"^42","Given two rows, if the linenumber is between the rows, return true, else\n  nil."],"~$abs",["^ ","^3X",null,"^5",["^ ","^6","zprint/range.cljc","^7",81,"^8",7,"^9",81,"^:",10,"^3Y",["^10",["^3Z",["^10",[["~$n"]]]]],"^42","Return the absolute value of a number."],"^L","^1Q","^6","zprint/range.cljc","^:",10,"^43",["^10",[["~$n"]]],"^44",null,"^45",["^10",[null,null]],"^8",1,"^46",false,"^7",81,"^47",["^K",[null,"^4L"]],"^9",81,"^49",1,"^4:",true,"^3Y",["^10",["^3Z",["^10",[["~$n"]]]]],"^42","Return the absolute value of a number."],"~$in-row?",["^ ","^3X",null,"^5",["^ ","^6","zprint/range.cljc","^7",9,"^8",7,"^9",9,"^:",14,"^3Y",["^10",["^3Z",["^10",[["~$n","~$row"]]]]],"^42","If a line number n is in a particular edamame row, return the row map.\n  If it is not in the row, return +1 or -1 to indicate which direction\n  to look."],"^L","^1R","^6","zprint/range.cljc","^:",14,"^43",["^10",[["~$n","^50"]]],"^44",null,"^45",["^10",[null,null]],"^8",1,"^46",false,"^7",9,"^47",["^K",[null,"^4L","^4Y"]],"^9",9,"^49",2,"^4:",true,"^3Y",["^10",["^3Z",["^10",[["~$n","^50"]]]]],"^42","If a line number n is in a particular edamame row, return the row map.\n  If it is not in the row, return +1 or -1 to indicate which direction\n  to look."],"~$previous-non-blank-line",["^ ","^3X",null,"^5",["^ ","^6","zprint/range.cljc","^7",150,"^8",7,"^9",150,"^:",30,"^3Y",["^10",["^3Z",["^10",[["^4V","^4W"]]]]],"^42","Given a sequence of lines and a starting line index in that sequence,\n  return the index of the first previous non-blank line including or before\n  that starting line index.  Returns -1 if no non-blank line found."],"^L","^1U","^6","zprint/range.cljc","^:",30,"^43",["^10",[["^4V","^4W"]]],"^44",null,"^45",["^10",[null,null]],"^8",1,"^46",false,"^7",150,"^47",["^K",[null,"^4L"]],"^9",150,"^49",2,"^4:",true,"^3Y",["^10",["^3Z",["^10",[["^4V","^4W"]]]]],"^42","Given a sequence of lines and a starting line index in that sequence,\n  return the index of the first previous non-blank line including or before\n  that starting line index.  Returns -1 if no non-blank line found."]],"^Z",["^ ","^T","^T"],"~:cljs.analyzer/constants",["^ ","^V",["^K",["~:features","~:end-row","~:else","~:read-cond","~:all","~:fail","~:after","~:before-beginning","~:current","~:do-nothing","~:before","~:clj","^1>","~:beyond-end","~:row","~:auto-resolve"]],"~:order",["^5@","^54","^5?","^5:","^55","^59","^5=","^58","^57","^53","^56","^5A","^5>","^1>","^5;","^5<"]],"^14",["^ ","^W",["^K",[]]],"^15",["^ "],"^16",["^U","^T","^R","^S"]],"^O","^M","~:ns-specs",["^ "],"~:ns-spec-vars",["^K",[]],"~:compiler-options",["^1Y",[["^5E","~:static-fns"],true,["^5E","~:shadow-tweaks"],null,["^5E","~:source-map-inline"],null,["^5E","~:elide-asserts"],false,["^5E","~:optimize-constants"],null,["^5E","^1;"],null,["^5E","~:external-config"],null,["^5E","~:tooling-config"],null,["^5E","~:emit-constants"],null,["^5E","~:load-tests"],null,["^5E","~:form-size-threshold"],null,["^5E","~:data-readers"],null,["^5E","~:infer-externs"],"~:auto",["^5E","^1="],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^5E","~:fn-invoke-direct"],null,["^5E","~:source-map"],"/dev/null"]]]