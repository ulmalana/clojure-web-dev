["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/core-js-pure/internals/correct-is-regexp-logic.js"],"~:js","shadow$provide[238]=function(f,d,h,l){var k=d(51)(\"match\");h.exports=function(n){var q=/./;try{\"/./\"[n](q)}catch(r){try{return q[k]=!1,\"/./\"[n](q)}catch(v){}}return!1}}","~:source","shadow$provide[238] = function(global,require,module,exports) {\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar MATCH = wellKnownSymbol('match');\n\nmodule.exports = function (METHOD_NAME) {\n  var regexp = /./;\n  try {\n    '/./'[METHOD_NAME](regexp);\n  } catch (error1) {\n    try {\n      regexp[MATCH] = false;\n      return '/./'[METHOD_NAME](regexp);\n    } catch (error2) { /* empty */ }\n  } return false;\n};\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$core_js_pure$internals$well_known_symbol"]],"~:properties",["^5",[]],"~:compiled-at",1668766213464,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$core_js_pure$internals$correct_is_regexp_logic.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAe,GAAf,CAAA,CAAsB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAG9D,IAAIC,EAFkBH,CAAAI,CAAQ,EAARA,CAEV,CAAgB,OAAhB,CAEZH,EAAA,CAAOC,OAAP,CAAiBG,QAAS,CAACC,CAAD,CAAc,CACtC,IAAIC,EAAS,GACb,IAAI,CACF,KAAA,CAAMD,CAAN,CAAA,CAAmBC,CAAnB,CADE,CAEF,MAAOC,CAAP,CAAe,CACf,GAAI,CAEF,MADAD,EAAA,CAAOJ,CAAP,CACO,CADS,CAAA,CACT,CAAA,KAAA,CAAMG,CAAN,CAAA,CAAmBC,CAAnB,CAFL,CAGF,MAAOE,CAAP,CAAe,EAJF,CAKf,MAAO,CAAA,CAT6B,CALsB;\",\n\"sources\":[\"node_modules/core-js-pure/internals/correct-is-regexp-logic.js\"],\n\"sourcesContent\":[\"shadow$provide[238] = function(global,require,module,exports) {\\nvar wellKnownSymbol = require('../internals/well-known-symbol');\\n\\nvar MATCH = wellKnownSymbol('match');\\n\\nmodule.exports = function (METHOD_NAME) {\\n  var regexp = /./;\\n  try {\\n    '/./'[METHOD_NAME](regexp);\\n  } catch (error1) {\\n    try {\\n      regexp[MATCH] = false;\\n      return '/./'[METHOD_NAME](regexp);\\n    } catch (error2) { /* empty */ }\\n  } return false;\\n};\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"MATCH\",\"wellKnownSymbol\",\"module.exports\",\"METHOD_NAME\",\"regexp\",\"error1\",\"error2\"]\n}\n"]