["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/core-js-pure/internals/array-sort.js"],"~:js","shadow$provide[253]=function(f,d,h,l){var k=d(135),n=Math.floor,q=function(r,v){var w=r.length,t=n(w/2);if(8>w){w=r.length;t=1;for(var B,z;t<w;){z=t;for(B=r[t];z&&0<v(r[z-1],B);)r[z]=r[--z];z!==t++&&(r[z]=B)}}else{w=q(k(r,0,t),v);t=q(k(r,t),v);B=w.length;z=t.length;for(var I=0,M=0;I<B||M<z;)r[I+M]=I<B&&M<z?0>=v(w[I],t[M])?w[I++]:t[M++]:I<B?w[I++]:t[M++]}return r};h.exports=q}","~:source","shadow$provide[253] = function(global,require,module,exports) {\nvar arraySlice = require('../internals/array-slice-simple');\n\nvar floor = Math.floor;\n\nvar mergeSort = function (array, comparefn) {\n  var length = array.length;\n  var middle = floor(length / 2);\n  return length < 8 ? insertionSort(array, comparefn) : merge(\n    array,\n    mergeSort(arraySlice(array, 0, middle), comparefn),\n    mergeSort(arraySlice(array, middle), comparefn),\n    comparefn\n  );\n};\n\nvar insertionSort = function (array, comparefn) {\n  var length = array.length;\n  var i = 1;\n  var element, j;\n\n  while (i < length) {\n    j = i;\n    element = array[i];\n    while (j && comparefn(array[j - 1], element) > 0) {\n      array[j] = array[--j];\n    }\n    if (j !== i++) array[j] = element;\n  } return array;\n};\n\nvar merge = function (array, left, right, comparefn) {\n  var llength = left.length;\n  var rlength = right.length;\n  var lindex = 0;\n  var rindex = 0;\n\n  while (lindex < llength || rindex < rlength) {\n    array[lindex + rindex] = (lindex < llength && rindex < rlength)\n      ? comparefn(left[lindex], right[rindex]) <= 0 ? left[lindex++] : right[rindex++]\n      : lindex < llength ? left[lindex++] : right[rindex++];\n  } return array;\n};\n\nmodule.exports = mergeSort;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$core_js_pure$internals$array_slice_simple","~$shadow.js"]],"~:properties",["^5",[]],"~:compiled-at",1668766213475,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$core_js_pure$internals$array_sort.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAe,GAAf,CAAA,CAAsB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAC9D,IAAIC,EAAaH,CAAA,CAAQ,GAAR,CAAjB,CAEII,EAAQC,IAARD,CAAaA,KAFjB,CAIIE,EAAYA,QAAS,CAACC,CAAD,CAAQC,CAAR,CAAmB,CAC1C,IAAIC,EAASF,CAATE,CAAeA,MAAnB,CACIC,EAASN,CAAA,CAAMK,CAAN,CAAe,CAAf,CACN,IAAS,CAAT,CAAAA,CAAA,CAAA,CASHA,CAAAA,CATgBF,CAShBE,CAAeA,MACfE,EAAAA,CAAI,CAGR,KAL8C,IAG1CC,CAH0C,CAGjCC,CAEb,CAAOF,CAAP,CAAWF,CAAX,CAAA,CAAmB,CACjBI,CAAA,CAAIF,CAEJ,KADAC,CACA,CAhBkBL,CAeR,CAAMI,CAAN,CACV,CAAOE,CAAP,EAA+C,CAA/C,CAhBkBL,CAgBN,CAhBMD,CAgBI,CAAMM,CAAN,CAAU,CAAV,CAAV,CAAwBD,CAAxB,CAAZ,CAAA,CAhBkBL,CAiBhB,CAAMM,CAAN,CAAA,CAjBgBN,CAiBL,CAAM,EAAEM,CAAR,CAETA,EAAJ,GAAUF,CAAA,EAAV,GAnBkBJ,CAmBH,CAAMM,CAAN,CAAf,CAA0BD,CAA1B,CANiB,CAbZ,CAAA,IAAA,CAA+C,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAwBlDE,EAAAA,CAAUC,CAAVD,CAAeL,MACfO,EAAAA,CAAUC,CAAVD,CAAgBP,MAIpB,KAHA,IAAIS,EAAS,CAAb,CACIC,EAAS,CAEb,CAAOD,CAAP,CAAgBJ,CAAhB,EAA2BK,CAA3B,CAAoCH,CAApC,CAAA,CA7BsDT,CA8BpD,CAAMW,CAAN,CAAeC,CAAf,CAAA,CAA0BD,CAAD,CAAUJ,CAAV,EAAqBK,CAArB,CAA8BH,CAA9B,CACqB,CAA1C,EA/BgDR,CA+BhD,CAAUO,CAAA,CAAKG,CAAL,CAAV,CAAwBD,CAAA,CAAME,CAAN,CAAxB,CAAA,CAA8CJ,CAAA,CAAKG,CAAA,EAAL,CAA9C,CAA+DD,CAAA,CAAME,CAAA,EAAN,CAD1C,CAErBD,CAAA,CAASJ,CAAT,CAAmBC,CAAA,CAAKG,CAAA,EAAL,CAAnB,CAAoCD,CAAA,CAAME,CAAA,EAAN,CAhCnC,CAAP,MAAoBZ,EAHsB,CAuC5CN,EAAA,CAAOC,OAAP,CAAiBI,CA5C6C;\",\n\"sources\":[\"node_modules/core-js-pure/internals/array-sort.js\"],\n\"sourcesContent\":[\"shadow$provide[253] = function(global,require,module,exports) {\\nvar arraySlice = require('../internals/array-slice-simple');\\n\\nvar floor = Math.floor;\\n\\nvar mergeSort = function (array, comparefn) {\\n  var length = array.length;\\n  var middle = floor(length / 2);\\n  return length < 8 ? insertionSort(array, comparefn) : merge(\\n    array,\\n    mergeSort(arraySlice(array, 0, middle), comparefn),\\n    mergeSort(arraySlice(array, middle), comparefn),\\n    comparefn\\n  );\\n};\\n\\nvar insertionSort = function (array, comparefn) {\\n  var length = array.length;\\n  var i = 1;\\n  var element, j;\\n\\n  while (i < length) {\\n    j = i;\\n    element = array[i];\\n    while (j && comparefn(array[j - 1], element) > 0) {\\n      array[j] = array[--j];\\n    }\\n    if (j !== i++) array[j] = element;\\n  } return array;\\n};\\n\\nvar merge = function (array, left, right, comparefn) {\\n  var llength = left.length;\\n  var rlength = right.length;\\n  var lindex = 0;\\n  var rindex = 0;\\n\\n  while (lindex < llength || rindex < rlength) {\\n    array[lindex + rindex] = (lindex < llength && rindex < rlength)\\n      ? comparefn(left[lindex], right[rindex]) <= 0 ? left[lindex++] : right[rindex++]\\n      : lindex < llength ? left[lindex++] : right[rindex++];\\n  } return array;\\n};\\n\\nmodule.exports = mergeSort;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"arraySlice\",\"floor\",\"Math\",\"mergeSort\",\"array\",\"comparefn\",\"length\",\"middle\",\"i\",\"element\",\"j\",\"llength\",\"left\",\"rlength\",\"right\",\"lindex\",\"rindex\"]\n}\n"]