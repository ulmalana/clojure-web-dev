["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/xregexp/lib/xregexp.js"],"~:js","shadow$provide[269]=function(f,d,h,l){function k(x,G){var R;if(\"undefined\"===typeof Y[\"default\"]||null==(0,ha[\"default\"])(x)){if((0,da[\"default\"])(x)||(R=n(x))||G&&x&&\"number\"===typeof x.length){R&&(x=R);var O=0;G=function(){};return{s:G,n:function(){return O>=x.length?{done:!0}:{done:!1,value:x[O++]}},e:function(J){throw J;},f:G}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");}var ja=!0,\npa=!1,qa;return{s:function(){R=(0,X[\"default\"])(x)},n:function(){var J=R.next();ja=J.done;return J},e:function(J){pa=!0;qa=J},f:function(){try{if(!ja&&null!=R[\"return\"])R[\"return\"]()}finally{if(pa)throw qa;}}}}function n(x,G){var R;if(x){if(\"string\"===typeof x)return q(x,G);var O=(0,Ha[\"default\"])(R=Object.prototype.toString.call(x)).call(R,8,-1);\"Object\"===O&&x.constructor&&(O=x.constructor.name);if(\"Map\"===O||\"Set\"===O)return(0,ea[\"default\"])(x);if(\"Arguments\"===O||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(O))return q(x,\nG)}}function q(x,G){if(null==G||G>x.length)G=x.length;for(var R=0,O=Array(G);R<G;R++)O[R]=x[R];return O}function r(x){var G=!0;try{RegExp(\"\",x),\"y\"===x&&\"..\"===\".a\".replace(RegExp(\"a\",\"gy\"),\".\")&&(G=!1)}catch(R){G=!1}return G}function v(x,G,R,O,ja){var pa;x.xregexp={captureNames:G};if(ja)return x;if(x.__proto__)x.__proto__=D.prototype;else for(var qa in D.prototype)x[qa]=D.prototype[qa];x.xregexp.source=R;x.xregexp.flags=O?(0,H[\"default\"])(pa=O.split(\"\")).call(pa).join(\"\"):O;return x}function w(x){return T.replace.call(x,\n/([\\s\\S])(?=[\\s\\S]*\\1)/g,\"\")}function t(x,G){var R;if(!D.isRegExp(x))throw new TypeError(\"Type RegExp expected\");var O=x.xregexp||{};var ja=x;ja=ec?(0,U[\"default\"])(ja):T.exec.call(/\\/([a-z]*)$/i,RegExp.prototype.toString.call(ja))[1];var pa=\"\",qa=\"\",J=null,ba=null;G=G||{};G.removeG&&(qa+=\"g\");G.removeY&&(qa+=\"y\");qa&&(ja=T.replace.call(ja,new RegExp(\"[\".concat(qa,\"]+\"),\"g\"),\"\"));G.addG&&(pa+=\"g\");G.addY&&(pa+=\"y\");pa&&(ja=w(ja+pa));G.isInternalOnly||(void 0!==O.source&&(J=O.source),null!=(0,U[\"default\"])(O)&&\n(ba=pa?w((0,U[\"default\"])(O)+pa):(0,U[\"default\"])(O)));return x=v(new RegExp(G.source||x.source,ja),x.xregexp&&x.xregexp.captureNames?(0,Ha[\"default\"])(R=O.captureNames).call(R,0):null,J,ba,G.isInternalOnly)}function B(x){return(0,ua[\"default\"])(x,16)}function z(x,G,R){(G=\"(\"===x.input[x.index-1]||\")\"===x.input[x.index+x[0].length]||\"|\"===x.input[x.index-1]||\"|\"===x.input[x.index+x[0].length]||1>x.index||x.index+x[0].length>=x.input.length||T.test.call(/^\\(\\?[:=!]/,x.input.substr(x.index-3,3)))||\n(G=x.input,x=x.index+x[0].length,G=T.test.call((0,Aa[\"default\"])(R).call(R,\"x\")?/^(?:\\s|#[^#\\n]*|\\(\\?#[^)]*\\))*(?:[?*+]|{\\d+(?:,\\d*)?})/:/^(?:\\(\\?#[^)]*\\))*(?:[?*+]|{\\d+(?:,\\d*)?})/,(0,Ha[\"default\"])(G).call(G,x)));return G?\"\":\"(?:)\"}function I(x){return(0,ua[\"default\"])(x,10).toString(16)}function M(x,G){return fc.call(x)===\"[object \".concat(G,\"]\")}function P(x){for(;4>x.length;)x=\"0\".concat(x);return x}function E(x,G){if(w(G)!==G)throw new SyntaxError(\"Invalid duplicate regex flag \".concat(G));\nx=T.replace.call(x,/^\\(\\?([\\w$]+)\\)/,function(pa,qa){if(T.test.call(/[gy]/,qa))throw new SyntaxError(\"Cannot use flag g or y in mode modifier \".concat(pa));G=w(G+qa);return\"\"});var R=k(G),O;try{for(R.s();!(O=R.n()).done;){var ja=O.value;if(!tb[ja])throw new SyntaxError(\"Unknown regex flag \".concat(ja));}}catch(pa){R.e(pa)}finally{R.f()}return{pattern:x,flags:G}}function Q(x){var G={};return M(x,\"String\")?((0,Da[\"default\"])(D).call(D,x,/[^\\s,]+/,function(R){G[R]=!0}),G):x}function N(x){if(!/^[\\w$]$/.test(x))throw Error(\"Flag must be a single character A-Za-z0-9_$\");\ntb[x]=!0}function Z(x){if(null==x)throw new TypeError(\"Cannot convert null or undefined to object\");return x}function D(x,G){if(D.isRegExp(x)){if(void 0!==G)throw new TypeError(\"Cannot supply flags when copying a RegExp\");return t(x)}x=void 0===x?\"\":String(x);G=void 0===G?\"\":String(G);D.isInstalled(\"astral\")&&!(0,Aa[\"default\"])(G).call(G,\"A\")&&(G+=\"A\");ma[x]||(ma[x]={});if(!ma[x][G]){var R={hasNamedCapture:!1,captureNames:[]},O=\"default\",ja=\"\",pa=0,qa=E(x,G),J=qa.pattern;for(qa=(0,U[\"default\"])(qa);pa<\nJ.length;){do{for(var ba,ta=J,Ia=qa,Ja=pa,Ua=O,gb=R,ub=Ca.length,gc=ta[Ja],Pd=null;ub--;){var Ka=Ca[ub];if(!(Ka.leadChar&&Ka.leadChar!==gc||Ka.scope!==Ua&&\"all\"!==Ka.scope||Ka.flag&&!(0,Aa[\"default\"])(Ia).call(Ia,Ka.flag))&&(ba=D.exec(ta,Ka.regex,Ja,\"sticky\"))){Pd={matchLength:ba[0].length,output:Ka.handler.call(gb,ba,Ua,Ia),reparse:Ka.reparse};break}}(Ka=Pd)&&Ka.reparse&&(J=(0,Ha[\"default\"])(J).call(J,0,pa)+Ka.output+(0,Ha[\"default\"])(J).call(J,pa+Ka.matchLength))}while(Ka&&Ka.reparse);Ka?(ja+=Ka.output,\npa+=Ka.matchLength||1):(Ka=D.exec(J,Ga[O],pa,\"sticky\"),Ka=(0,Ea[\"default\"])(Ka,1)[0],ja+=Ka,pa+=Ka.length,\"[\"===Ka&&\"default\"===O?O=\"class\":\"]\"===Ka&&\"class\"===O&&(O=\"default\"))}ma[x][G]={pattern:T.replace.call(ja,/(?:\\(\\?:\\))+/g,\"(?:)\"),flags:T.replace.call(qa,/[^gimuy]+/g,\"\"),captures:R.hasNamedCapture?R.captureNames:null}}R=ma[x][G];return v(new RegExp(R.pattern,(0,U[\"default\"])(R)),R.captures,x,G)}f=d(13);d(67)(l,\"__esModule\",{value:!0});l[\"default\"]=void 0;var X=f(d(113)),da=f(d(118)),ha=f(d(124)),\nY=f(d(169)),ea=f(d(178)),aa=f(d(183)),oa=f(d(189)),ra=f(d(193)),Ea=f(d(227)),Da=f(d(233)),Aa=f(d(243)),ua=f(d(250)),Ha=f(d(251)),H=f(d(261)),U=f(d(268)),K={astral:!1,namespacing:!1},T={exec:RegExp.prototype.exec,test:RegExp.prototype.test,match:String.prototype.match,replace:String.prototype.replace,split:String.prototype.split},ca={},la={},ma={},Ca=[],Ga={\"default\":/\\\\(?:0(?:[0-3][0-7]{0,2}|[4-7][0-7]?)?|[1-9]\\d*|x[\\dA-Fa-f]{2}|u(?:[\\dA-Fa-f]{4}|{[\\dA-Fa-f]+})|c[A-Za-z]|[\\s\\S])|\\(\\?(?:[:=!]|<[=!])|[?*+]\\?|{\\d+(?:,\\d*)?}\\??|[\\s\\S]/,\n\"class\":/\\\\(?:[0-3][0-7]{0,2}|[4-7][0-7]?|x[\\dA-Fa-f]{2}|u(?:[\\dA-Fa-f]{4}|{[\\dA-Fa-f]+})|c[A-Za-z]|[\\s\\S])|[\\s\\S]/},La=/\\$(?:{([\\w$]+)}|<([\\w$]+)>|(\\d\\d?|[\\s\\S]))/g,Ta=void 0===T.exec.call(/()??/,\"\")[1],ec=void 0!==(0,U[\"default\"])(/x/),fc={}.toString,Kb=r(\"u\"),Za=r(\"y\"),tb={g:!0,i:!0,m:!0,u:Kb,y:Za};D.prototype=/(?:)/;D.version=\"4.4.1\";D._clipDuplicates=w;D._hasNativeFlag=r;D._dec=B;D._hex=I;D._pad4=P;D.addToken=function(x,G,R){R=R||{};var O=R.optionalFlags;R.flag&&N(R.flag);if(O){O=T.split.call(O,\n\"\");O=k(O);var ja;try{for(O.s();!(ja=O.n()).done;)N(ja.value)}catch(pa){O.e(pa)}finally{O.f()}}Ca.push({regex:t(x,{addG:!0,addY:Za,isInternalOnly:!0}),handler:G,scope:R.scope||\"default\",flag:R.flag,reparse:R.reparse,leadChar:R.leadChar});D.cache.flush(\"patterns\")};D.cache=function(x,G){la[x]||(la[x]={});return la[x][G]||(la[x][G]=D(x,G))};D.cache.flush=function(x){\"patterns\"===x?ma={}:la={}};D.escape=function(x){return T.replace.call(Z(x),/[-\\[\\]{}()*+?.,\\\\^$|#\\s]/g,\"\\\\$\\x26\")};D.exec=function(x,\nG,R,O){var ja=\"g\",pa,qa=!1;(pa=Za&&!!(O||G.sticky&&!1!==O))?ja+=\"y\":O&&(qa=!0,ja+=\"FakeY\");G.xregexp=G.xregexp||{};O=G.xregexp[ja]||(G.xregexp[ja]=t(G,{addG:!0,addY:pa,source:qa?\"\".concat(G.source,\"|()\"):void 0,removeY:!1===O,isInternalOnly:!0}));O.lastIndex=R||0;x=ca.exec.call(O,x);qa&&x&&\"\"===x.pop()&&(x=null);G.global&&(G.lastIndex=x?O.lastIndex:0);return x};D.forEach=function(x,G,R){for(var O=0,ja=-1;O=D.exec(x,G,O);)R(O,++ja,x,G),O=O.index+(O[0].length||1)};D.globalize=function(x){return t(x,\n{addG:!0})};D.install=function(x){x=Q(x);!K.astral&&x.astral&&(K.astral=!0);!K.namespacing&&x.namespacing&&(K.namespacing=!0)};D.isInstalled=function(x){return!!K[x]};D.isRegExp=function(x){return\"[object RegExp]\"===fc.call(x)};D.match=function(x,G,R){var O=G.global&&\"one\"!==R||\"all\"===R,ja=(O?\"g\":\"\")+(G.sticky?\"y\":\"\")||\"noGY\";G.xregexp=G.xregexp||{};ja=G.xregexp[ja]||(G.xregexp[ja]=t(G,{addG:!!O,removeG:\"one\"===R,isInternalOnly:!0}));x=T.match.call(Z(x),ja);G.global&&(G.lastIndex=\"one\"===R&&x?x.index+\nx[0].length:0);return O?x||[]:x&&x[0]};D.matchChain=function(x,G){return function pa(O,ja){function qa(Ja){if(J.backref){var Ua=\"Backreference to undefined group: \".concat(J.backref),gb=isNaN(J.backref);if(gb&&D.isInstalled(\"namespacing\")){if(!(J.backref in Ja.groups))throw new ReferenceError(Ua);}else if(!Ja.hasOwnProperty(J.backref))throw new ReferenceError(Ua);Ja=gb&&D.isInstalled(\"namespacing\")?Ja.groups[J.backref]:Ja[J.backref];ba.push(Ja||\"\")}else ba.push(Ja[0])}var J=G[ja].regex?G[ja]:{regex:G[ja]},\nba=[];O=k(O);var ta;try{for(O.s();!(ta=O.n()).done;){var Ia=ta.value;(0,Da[\"default\"])(D).call(D,Ia,J.regex,qa)}}catch(Ja){O.e(Ja)}finally{O.f()}return ja!==G.length-1&&ba.length?pa(ba,ja+1):ba}([x],0)};D.replace=function(x,G,R,O){var ja=D.isRegExp(G),pa=G.global&&\"one\"!==O||\"all\"===O,qa=(pa?\"g\":\"\")+(G.sticky?\"y\":\"\")||\"noGY\",J=G;ja?(G.xregexp=G.xregexp||{},J=G.xregexp[qa]||(G.xregexp[qa]=t(G,{addG:!!pa,removeG:\"one\"===O,isInternalOnly:!0}))):pa&&(J=new RegExp(D.escape(String(G)),\"g\"));x=ca.replace.call(Z(x),\nJ,R);ja&&G.global&&(G.lastIndex=0);return x};D.replaceEach=function(x,G){G=k(G);var R;try{for(G.s();!(R=G.n()).done;){var O=R.value;x=D.replace(x,O[0],O[1],O[2])}}catch(ja){G.e(ja)}finally{G.f()}return x};D.split=function(x,G,R){return ca.split.call(Z(x),G,R)};D.test=function(x,G,R,O){return!!D.exec(x,G,R,O)};D.uninstall=function(x){x=Q(x);K.astral&&x.astral&&(K.astral=!1);K.namespacing&&x.namespacing&&(K.namespacing=!1)};D.union=function(x,G,R){function O(Ja,Ua,gb){var ub=Ia[ja-ta];if(Ua){if(++ja,\nub)return\"(?\\x3c\".concat(ub,\"\\x3e\")}else if(gb)return\"\\\\\".concat(+gb+ta);return Ja}R=R||{};R=R.conjunction||\"or\";var ja=0;if(!M(x,\"Array\")||!x.length)throw new TypeError(\"Must provide a nonempty array of patterns to merge\");var pa=/(\\()(?!\\?)|\\\\([1-9]\\d*)|\\\\[\\s\\S]|\\[(?:[^\\\\\\]]|\\\\[\\s\\S])*\\]/g,qa=[];x=k(x);var J;try{for(x.s();!(J=x.n()).done;){var ba=J.value;if(D.isRegExp(ba)){var ta=ja;var Ia=ba.xregexp&&ba.xregexp.captureNames||[];qa.push(T.replace.call(D(ba.source).source,pa,O))}else qa.push(D.escape(ba))}}catch(Ja){x.e(Ja)}finally{x.f()}return D(qa.join(\"none\"===\nR?\"\":\"|\"),G)};ca.exec=function(x){var G=this.lastIndex,R=T.exec.apply(this,arguments);if(R){if(!Ta&&1<R.length&&(0,Aa[\"default\"])(R).call(R,\"\")){var O,ja=t(this,{removeG:!0,isInternalOnly:!0});T.replace.call((0,Ha[\"default\"])(O=String(x)).call(O,R.index),ja,function(){for(var qa=arguments.length,J=1;J<qa-2;++J)void 0===(0>J||arguments.length<=J?void 0:arguments[J])&&(R[J]=void 0)})}O=R;D.isInstalled(\"namespacing\")&&(R.groups=(0,ra[\"default\"])(null),O=R.groups);if(this.xregexp&&this.xregexp.captureNames)for(ja=\n1;ja<R.length;++ja){var pa=this.xregexp.captureNames[ja-1];pa&&(O[pa]=R[ja])}this.global&&!R[0].length&&this.lastIndex>R.index&&(this.lastIndex=R.index)}this.global||(this.lastIndex=G);return R};ca.test=function(x){return!!ca.exec.call(this,x)};ca.match=function(x){if(!D.isRegExp(x))x=new RegExp(x);else if(x.global){var G=T.match.apply(this,arguments);x.lastIndex=0;return G}return ca.exec.call(x,Z(this))};ca.replace=function(x,G){var R=D.isRegExp(x);if(R){if(x.xregexp)var O=x.xregexp.captureNames;\nvar ja=x.lastIndex}else x+=\"\";var pa=M(G,\"Function\")?T.replace.call(String(this),x,function(){for(var qa=arguments.length,J=Array(qa),ba=0;ba<qa;ba++)J[ba]=arguments[ba];if(O)for(D.isInstalled(\"namespacing\")?(qa=(0,ra[\"default\"])(null),J.push(qa)):(J[0]=new String(J[0]),qa=J[0]),ba=0;ba<O.length;++ba)O[ba]&&(qa[O[ba]]=J[ba+1]);return G.apply(void 0,J)}):T.replace.call(null==this?this:String(this),x,function(){for(var qa=arguments.length,J=Array(qa),ba=0;ba<qa;ba++)J[ba]=arguments[ba];return T.replace.call(String(G),\nLa,function(ta,Ia,Ja,Ua){if(Ia=Ia||Ja){Ja=+Ia;if(Ja<=J.length-3)return J[Ja]||\"\";Ja=O?(0,oa[\"default\"])(O).call(O,Ia):-1;if(0>Ja)throw new SyntaxError(\"Backreference to undefined group \".concat(ta));return J[Ja+1]||\"\"}if(\"$\"===Ua)return\"$\";if(\"\\x26\"===Ua||0===+Ua)return J[0];if(\"`\"===Ua){var gb;return(0,Ha[\"default\"])(gb=J[J.length-1]).call(gb,0,J[J.length-2])}if(\"'\"===Ua){var ub;return(0,Ha[\"default\"])(ub=J[J.length-1]).call(ub,J[J.length-2]+J[0].length)}Ua=+Ua;if(!isNaN(Ua)){if(Ua>J.length-3)throw new SyntaxError(\"Backreference to undefined group \".concat(ta));\nreturn J[Ua]||\"\"}throw new SyntaxError(\"Invalid token \".concat(ta));})});R&&(x.lastIndex=x.global?0:ja);return pa};ca.split=function(x,G){if(!D.isRegExp(x))return T.split.apply(this,arguments);var R=String(this),O=[],ja=x.lastIndex,pa=0,qa;G=(void 0===G?-1:G)>>>0;(0,Da[\"default\"])(D).call(D,R,x,function(J){J.index+J[0].length>pa&&(O.push((0,Ha[\"default\"])(R).call(R,pa,J.index)),1<J.length&&J.index<R.length&&Array.prototype.push.apply(O,(0,Ha[\"default\"])(J).call(J,1)),qa=J[0].length,pa=J.index+qa)});\npa===R.length?(!T.test.call(x,\"\")||qa)&&O.push(\"\"):O.push((0,Ha[\"default\"])(R).call(R,pa));x.lastIndex=ja;return O.length>G?(0,Ha[\"default\"])(O).call(O,0,G):O};D.addToken(/\\\\([ABCE-RTUVXYZaeg-mopqyz]|c(?![A-Za-z])|u(?![\\dA-Fa-f]{4}|{[\\dA-Fa-f]+})|x(?![\\dA-Fa-f]{2}))/,function(x,G){if(\"B\"===x[1]&&\"default\"===G)return x[0];throw new SyntaxError(\"Invalid escape \".concat(x[0]));},{scope:\"all\",leadChar:\"\\\\\"});D.addToken(/\\\\u{([\\dA-Fa-f]+)}/,function(x,G,R){G=B(x[1]);if(1114111<G)throw new SyntaxError(\"Invalid Unicode code point \".concat(x[0]));\nif(65535>=G)return\"\\\\u\".concat(P(I(G)));if(Kb&&(0,Aa[\"default\"])(R).call(R,\"u\"))return x[0];throw new SyntaxError(\"Cannot use Unicode code point above \\\\u{FFFF} without flag u\");},{scope:\"all\",leadChar:\"\\\\\"});D.addToken(/\\[(\\^?)\\]/,function(x){return x[1]?\"[\\\\s\\\\S]\":\"\\\\b\\\\B\"},{leadChar:\"[\"});D.addToken(/\\(\\?#[^)]*\\)/,z,{leadChar:\"(\"});D.addToken(/\\s+|#[^\\n]*\\n?/,z,{flag:\"x\"});D.addToken(/\\./,function(){return\"[\\\\s\\\\S]\"},{flag:\"s\",leadChar:\".\"});D.addToken(/\\\\k<([\\w$]+)>/,function(x){var G,R,O=isNaN(x[1])?\n(0,oa[\"default\"])(G=this.captureNames).call(G,x[1])+1:+x[1];G=x.index+x[0].length;if(!O||O>this.captureNames.length)throw new SyntaxError(\"Backreference to undefined group \".concat(x[0]));return(0,aa[\"default\"])(R=\"\\\\\".concat(O)).call(R,G===x.input.length||isNaN(x.input[G])?\"\":\"(?:)\")},{leadChar:\"\\\\\"});D.addToken(/\\\\(\\d+)/,function(x,G){if(!(\"default\"===G&&/^[1-9]/.test(x[1])&&+x[1]<=this.captureNames.length)&&\"0\"!==x[1])throw new SyntaxError(\"Cannot use octal escape or backreference to undefined group \".concat(x[0]));\nreturn x[0]},{scope:\"all\",leadChar:\"\\\\\"});D.addToken(/\\(\\?P?<([\\w$]+)>/,function(x){var G;if(!isNaN(x[1]))throw new SyntaxError(\"Cannot use integer as capture name \".concat(x[0]));if(!D.isInstalled(\"namespacing\")&&(\"length\"===x[1]||\"__proto__\"===x[1]))throw new SyntaxError(\"Cannot use reserved word as capture name \".concat(x[0]));if((0,Aa[\"default\"])(G=this.captureNames).call(G,x[1]))throw new SyntaxError(\"Cannot use same name for multiple groups \".concat(x[0]));this.captureNames.push(x[1]);this.hasNamedCapture=\n!0;return\"(\"},{leadChar:\"(\"});D.addToken(/\\((?!\\?)/,function(x,G,R){if((0,Aa[\"default\"])(R).call(R,\"n\"))return\"(?:\";this.captureNames.push(null);return\"(\"},{optionalFlags:\"n\",leadChar:\"(\"});l[\"default\"]=D;h.exports=l.default}","~:source","shadow$provide[269] = function(global,require,module,exports) {\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports[\"default\"] = void 0;\n\nvar _getIterator2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js/get-iterator\"));\n\nvar _isArray = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/array/is-array\"));\n\nvar _getIteratorMethod2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js/get-iterator-method\"));\n\nvar _symbol = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/symbol\"));\n\nvar _from = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/array/from\"));\n\nvar _concat = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/concat\"));\n\nvar _indexOf = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/index-of\"));\n\nvar _create = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/create\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/slicedToArray\"));\n\nvar _forEach = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/for-each\"));\n\nvar _includes = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/includes\"));\n\nvar _parseInt2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/parse-int\"));\n\nvar _slice = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/slice\"));\n\nvar _sort = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/sort\"));\n\nvar _flags = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/flags\"));\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof _symbol[\"default\"] === \"undefined\" || (0, _getIteratorMethod2[\"default\"])(o) == null) { if ((0, _isArray[\"default\"])(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = (0, _getIterator2[\"default\"])(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { var _context9; if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = (0, _slice[\"default\"])(_context9 = Object.prototype.toString.call(o)).call(_context9, 8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return (0, _from[\"default\"])(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/*!\n * XRegExp 4.4.1\n * <xregexp.com>\n * Steven Levithan (c) 2007-present MIT License\n */\n\n/**\n * XRegExp provides augmented, extensible regular expressions. You get additional regex syntax and\n * flags, beyond what browsers support natively. XRegExp is also a regex utility belt with tools to\n * make your client-side grepping simpler and more powerful, while freeing you from related\n * cross-browser inconsistencies.\n */\n// ==--------------------------==\n// Private stuff\n// ==--------------------------==\n// Property name used for extended regex instance data\nvar REGEX_DATA = 'xregexp'; // Optional features that can be installed and uninstalled\n\nvar features = {\n  astral: false,\n  namespacing: false\n}; // Native methods to use and restore ('native' is an ES3 reserved keyword)\n\nvar nativ = {\n  exec: RegExp.prototype.exec,\n  test: RegExp.prototype.test,\n  match: String.prototype.match,\n  replace: String.prototype.replace,\n  split: String.prototype.split\n}; // Storage for fixed/extended native methods\n\nvar fixed = {}; // Storage for regexes cached by `XRegExp.cache`\n\nvar regexCache = {}; // Storage for pattern details cached by the `XRegExp` constructor\n\nvar patternCache = {}; // Storage for regex syntax tokens added internally or by `XRegExp.addToken`\n\nvar tokens = []; // Token scopes\n\nvar defaultScope = 'default';\nvar classScope = 'class'; // Regexes that match native regex syntax, including octals\n\nvar nativeTokens = {\n  // Any native multicharacter token in default scope, or any single character\n  'default': /\\\\(?:0(?:[0-3][0-7]{0,2}|[4-7][0-7]?)?|[1-9]\\d*|x[\\dA-Fa-f]{2}|u(?:[\\dA-Fa-f]{4}|{[\\dA-Fa-f]+})|c[A-Za-z]|[\\s\\S])|\\(\\?(?:[:=!]|<[=!])|[?*+]\\?|{\\d+(?:,\\d*)?}\\??|[\\s\\S]/,\n  // Any native multicharacter token in character class scope, or any single character\n  'class': /\\\\(?:[0-3][0-7]{0,2}|[4-7][0-7]?|x[\\dA-Fa-f]{2}|u(?:[\\dA-Fa-f]{4}|{[\\dA-Fa-f]+})|c[A-Za-z]|[\\s\\S])|[\\s\\S]/\n}; // Any backreference or dollar-prefixed character in replacement strings\n\nvar replacementToken = /\\$(?:{([\\w$]+)}|<([\\w$]+)>|(\\d\\d?|[\\s\\S]))/g; // Check for correct `exec` handling of nonparticipating capturing groups\n\nvar correctExecNpcg = nativ.exec.call(/()??/, '')[1] === undefined; // Check for ES6 `flags` prop support\n\nvar hasFlagsProp = (0, _flags[\"default\"])(/x/) !== undefined; // Shortcut to `Object.prototype.toString`\n\nvar _ref = {},\n    toString = _ref.toString;\n\nfunction hasNativeFlag(flag) {\n  // Can't check based on the presence of properties/getters since browsers might support such\n  // properties even when they don't support the corresponding flag in regex construction (tested\n  // in Chrome 48, where `'unicode' in /x/` is true but trying to construct a regex with flag `u`\n  // throws an error)\n  var isSupported = true;\n\n  try {\n    // Can't use regex literals for testing even in a `try` because regex literals with\n    // unsupported flags cause a compilation error in IE\n    new RegExp('', flag); // Work around a broken/incomplete IE11 polyfill for sticky introduced in core-js 3.6.0\n\n    if (flag === 'y') {\n      // Using function to avoid babel transform to regex literal\n      var gy = function () {\n        return 'gy';\n      }();\n\n      var incompleteY = '.a'.replace(new RegExp('a', gy), '.') === '..';\n\n      if (incompleteY) {\n        isSupported = false;\n      }\n    }\n  } catch (exception) {\n    isSupported = false;\n  }\n\n  return isSupported;\n} // Check for ES6 `u` flag support\n\n\nvar hasNativeU = hasNativeFlag('u'); // Check for ES6 `y` flag support\n\nvar hasNativeY = hasNativeFlag('y'); // Tracker for known flags, including addon flags\n\nvar registeredFlags = {\n  g: true,\n  i: true,\n  m: true,\n  u: hasNativeU,\n  y: hasNativeY\n};\n/**\n * Attaches extended data and `XRegExp.prototype` properties to a regex object.\n *\n * @private\n * @param {RegExp} regex Regex to augment.\n * @param {Array} captureNames Array with capture names, or `null`.\n * @param {String} xSource XRegExp pattern used to generate `regex`, or `null` if N/A.\n * @param {String} xFlags XRegExp flags used to generate `regex`, or `null` if N/A.\n * @param {Boolean} [isInternalOnly=false] Whether the regex will be used only for internal\n *   operations, and never exposed to users. For internal-only regexes, we can improve perf by\n *   skipping some operations like attaching `XRegExp.prototype` properties.\n * @returns {!RegExp} Augmented regex.\n */\n\nfunction augment(regex, captureNames, xSource, xFlags, isInternalOnly) {\n  var _context;\n\n  regex[REGEX_DATA] = {\n    captureNames: captureNames\n  };\n\n  if (isInternalOnly) {\n    return regex;\n  } // Can't auto-inherit these since the XRegExp constructor returns a nonprimitive value\n\n\n  if (regex.__proto__) {\n    regex.__proto__ = XRegExp.prototype;\n  } else {\n    for (var p in XRegExp.prototype) {\n      // An `XRegExp.prototype.hasOwnProperty(p)` check wouldn't be worth it here, since this\n      // is performance sensitive, and enumerable `Object.prototype` or `RegExp.prototype`\n      // extensions exist on `regex.prototype` anyway\n      regex[p] = XRegExp.prototype[p];\n    }\n  }\n\n  regex[REGEX_DATA].source = xSource; // Emulate the ES6 `flags` prop by ensuring flags are in alphabetical order\n\n  regex[REGEX_DATA].flags = xFlags ? (0, _sort[\"default\"])(_context = xFlags.split('')).call(_context).join('') : xFlags;\n  return regex;\n}\n/**\n * Removes any duplicate characters from the provided string.\n *\n * @private\n * @param {String} str String to remove duplicate characters from.\n * @returns {string} String with any duplicate characters removed.\n */\n\n\nfunction clipDuplicates(str) {\n  return nativ.replace.call(str, /([\\s\\S])(?=[\\s\\S]*\\1)/g, '');\n}\n/**\n * Copies a regex object while preserving extended data and augmenting with `XRegExp.prototype`\n * properties. The copy has a fresh `lastIndex` property (set to zero). Allows adding and removing\n * flags g and y while copying the regex.\n *\n * @private\n * @param {RegExp} regex Regex to copy.\n * @param {Object} [options] Options object with optional properties:\n *   - `addG` {Boolean} Add flag g while copying the regex.\n *   - `addY` {Boolean} Add flag y while copying the regex.\n *   - `removeG` {Boolean} Remove flag g while copying the regex.\n *   - `removeY` {Boolean} Remove flag y while copying the regex.\n *   - `isInternalOnly` {Boolean} Whether the copied regex will be used only for internal\n *     operations, and never exposed to users. For internal-only regexes, we can improve perf by\n *     skipping some operations like attaching `XRegExp.prototype` properties.\n *   - `source` {String} Overrides `<regex>.source`, for special cases.\n * @returns {RegExp} Copy of the provided regex, possibly with modified flags.\n */\n\n\nfunction copyRegex(regex, options) {\n  var _context2;\n\n  if (!XRegExp.isRegExp(regex)) {\n    throw new TypeError('Type RegExp expected');\n  }\n\n  var xData = regex[REGEX_DATA] || {};\n  var flags = getNativeFlags(regex);\n  var flagsToAdd = '';\n  var flagsToRemove = '';\n  var xregexpSource = null;\n  var xregexpFlags = null;\n  options = options || {};\n\n  if (options.removeG) {\n    flagsToRemove += 'g';\n  }\n\n  if (options.removeY) {\n    flagsToRemove += 'y';\n  }\n\n  if (flagsToRemove) {\n    flags = nativ.replace.call(flags, new RegExp(\"[\".concat(flagsToRemove, \"]+\"), 'g'), '');\n  }\n\n  if (options.addG) {\n    flagsToAdd += 'g';\n  }\n\n  if (options.addY) {\n    flagsToAdd += 'y';\n  }\n\n  if (flagsToAdd) {\n    flags = clipDuplicates(flags + flagsToAdd);\n  }\n\n  if (!options.isInternalOnly) {\n    if (xData.source !== undefined) {\n      xregexpSource = xData.source;\n    } // null or undefined; don't want to add to `flags` if the previous value was null, since\n    // that indicates we're not tracking original precompilation flags\n\n\n    if ((0, _flags[\"default\"])(xData) != null) {\n      // Flags are only added for non-internal regexes by `XRegExp.globalize`. Flags are never\n      // removed for non-internal regexes, so don't need to handle it\n      xregexpFlags = flagsToAdd ? clipDuplicates((0, _flags[\"default\"])(xData) + flagsToAdd) : (0, _flags[\"default\"])(xData);\n    }\n  } // Augment with `XRegExp.prototype` properties, but use the native `RegExp` constructor to avoid\n  // searching for special tokens. That would be wrong for regexes constructed by `RegExp`, and\n  // unnecessary for regexes constructed by `XRegExp` because the regex has already undergone the\n  // translation to native regex syntax\n\n\n  regex = augment(new RegExp(options.source || regex.source, flags), hasNamedCapture(regex) ? (0, _slice[\"default\"])(_context2 = xData.captureNames).call(_context2, 0) : null, xregexpSource, xregexpFlags, options.isInternalOnly);\n  return regex;\n}\n/**\n * Converts hexadecimal to decimal.\n *\n * @private\n * @param {String} hex\n * @returns {number}\n */\n\n\nfunction dec(hex) {\n  return (0, _parseInt2[\"default\"])(hex, 16);\n}\n/**\n * Returns a pattern that can be used in a native RegExp in place of an ignorable token such as an\n * inline comment or whitespace with flag x. This is used directly as a token handler function\n * passed to `XRegExp.addToken`.\n *\n * @private\n * @param {String} match Match arg of `XRegExp.addToken` handler\n * @param {String} scope Scope arg of `XRegExp.addToken` handler\n * @param {String} flags Flags arg of `XRegExp.addToken` handler\n * @returns {string} Either '' or '(?:)', depending on which is needed in the context of the match.\n */\n\n\nfunction getContextualTokenSeparator(match, scope, flags) {\n  if ( // No need to separate tokens if at the beginning or end of a group\n  match.input[match.index - 1] === '(' || match.input[match.index + match[0].length] === ')' || // No need to separate tokens if before or after a `|`\n  match.input[match.index - 1] === '|' || match.input[match.index + match[0].length] === '|' || // No need to separate tokens if at the beginning or end of the pattern\n  match.index < 1 || match.index + match[0].length >= match.input.length || // No need to separate tokens if at the beginning of a noncapturing group or lookahead.\n  // The way this is written relies on:\n  // - The search regex matching only 3-char strings.\n  // - Although `substr` gives chars from the end of the string if given a negative index,\n  //   the resulting substring will be too short to match. Ex: `'abcd'.substr(-1, 3) === 'd'`\n  nativ.test.call(/^\\(\\?[:=!]/, match.input.substr(match.index - 3, 3)) || // Avoid separating tokens when the following token is a quantifier\n  isQuantifierNext(match.input, match.index + match[0].length, flags)) {\n    return '';\n  } // Keep tokens separated. This avoids e.g. inadvertedly changing `\\1 1` or `\\1(?#)1` to `\\11`.\n  // This also ensures all tokens remain as discrete atoms, e.g. it avoids converting the syntax\n  // error `(? :` into `(?:`.\n\n\n  return '(?:)';\n}\n/**\n * Returns native `RegExp` flags used by a regex object.\n *\n * @private\n * @param {RegExp} regex Regex to check.\n * @returns {string} Native flags in use.\n */\n\n\nfunction getNativeFlags(regex) {\n  return hasFlagsProp ? (0, _flags[\"default\"])(regex) : // Explicitly using `RegExp.prototype.toString` (rather than e.g. `String` or concatenation\n  // with an empty string) allows this to continue working predictably when\n  // `XRegExp.proptotype.toString` is overridden\n  nativ.exec.call(/\\/([a-z]*)$/i, RegExp.prototype.toString.call(regex))[1];\n}\n/**\n * Determines whether a regex has extended instance data used to track capture names.\n *\n * @private\n * @param {RegExp} regex Regex to check.\n * @returns {boolean} Whether the regex uses named capture.\n */\n\n\nfunction hasNamedCapture(regex) {\n  return !!(regex[REGEX_DATA] && regex[REGEX_DATA].captureNames);\n}\n/**\n * Converts decimal to hexadecimal.\n *\n * @private\n * @param {Number|String} dec\n * @returns {string}\n */\n\n\nfunction hex(dec) {\n  return (0, _parseInt2[\"default\"])(dec, 10).toString(16);\n}\n/**\n * Checks whether the next nonignorable token after the specified position is a quantifier.\n *\n * @private\n * @param {String} pattern Pattern to search within.\n * @param {Number} pos Index in `pattern` to search at.\n * @param {String} flags Flags used by the pattern.\n * @returns {Boolean} Whether the next nonignorable token is a quantifier.\n */\n\n\nfunction isQuantifierNext(pattern, pos, flags) {\n  var inlineCommentPattern = '\\\\(\\\\?#[^)]*\\\\)';\n  var lineCommentPattern = '#[^#\\\\n]*';\n  var quantifierPattern = '[?*+]|{\\\\d+(?:,\\\\d*)?}';\n  return nativ.test.call((0, _includes[\"default\"])(flags).call(flags, 'x') ? // Ignore any leading whitespace, line comments, and inline comments\n  /^(?:\\s|#[^#\\n]*|\\(\\?#[^)]*\\))*(?:[?*+]|{\\d+(?:,\\d*)?})/ : // Ignore any leading inline comments\n  /^(?:\\(\\?#[^)]*\\))*(?:[?*+]|{\\d+(?:,\\d*)?})/, (0, _slice[\"default\"])(pattern).call(pattern, pos));\n}\n/**\n * Determines whether a value is of the specified type, by resolving its internal [[Class]].\n *\n * @private\n * @param {*} value Object to check.\n * @param {String} type Type to check for, in TitleCase.\n * @returns {boolean} Whether the object matches the type.\n */\n\n\nfunction isType(value, type) {\n  return toString.call(value) === \"[object \".concat(type, \"]\");\n}\n/**\n * Adds leading zeros if shorter than four characters. Used for fixed-length hexadecimal values.\n *\n * @private\n * @param {String} str\n * @returns {string}\n */\n\n\nfunction pad4(str) {\n  while (str.length < 4) {\n    str = \"0\".concat(str);\n  }\n\n  return str;\n}\n/**\n * Checks for flag-related errors, and strips/applies flags in a leading mode modifier. Offloads\n * the flag preparation logic from the `XRegExp` constructor.\n *\n * @private\n * @param {String} pattern Regex pattern, possibly with a leading mode modifier.\n * @param {String} flags Any combination of flags.\n * @returns {!Object} Object with properties `pattern` and `flags`.\n */\n\n\nfunction prepareFlags(pattern, flags) {\n  // Recent browsers throw on duplicate flags, so copy this behavior for nonnative flags\n  if (clipDuplicates(flags) !== flags) {\n    throw new SyntaxError(\"Invalid duplicate regex flag \".concat(flags));\n  } // Strip and apply a leading mode modifier with any combination of flags except g or y\n\n\n  pattern = nativ.replace.call(pattern, /^\\(\\?([\\w$]+)\\)/, function ($0, $1) {\n    if (nativ.test.call(/[gy]/, $1)) {\n      throw new SyntaxError(\"Cannot use flag g or y in mode modifier \".concat($0));\n    } // Allow duplicate flags within the mode modifier\n\n\n    flags = clipDuplicates(flags + $1);\n    return '';\n  }); // Throw on unknown native or nonnative flags\n\n  var _iterator = _createForOfIteratorHelper(flags),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var flag = _step.value;\n\n      if (!registeredFlags[flag]) {\n        throw new SyntaxError(\"Unknown regex flag \".concat(flag));\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return {\n    pattern: pattern,\n    flags: flags\n  };\n}\n/**\n * Prepares an options object from the given value.\n *\n * @private\n * @param {String|Object} value Value to convert to an options object.\n * @returns {Object} Options object.\n */\n\n\nfunction prepareOptions(value) {\n  var options = {};\n\n  if (isType(value, 'String')) {\n    (0, _forEach[\"default\"])(XRegExp).call(XRegExp, value, /[^\\s,]+/, function (match) {\n      options[match] = true;\n    });\n    return options;\n  }\n\n  return value;\n}\n/**\n * Registers a flag so it doesn't throw an 'unknown flag' error.\n *\n * @private\n * @param {String} flag Single-character flag to register.\n */\n\n\nfunction registerFlag(flag) {\n  if (!/^[\\w$]$/.test(flag)) {\n    throw new Error('Flag must be a single character A-Za-z0-9_$');\n  }\n\n  registeredFlags[flag] = true;\n}\n/**\n * Runs built-in and custom regex syntax tokens in reverse insertion order at the specified\n * position, until a match is found.\n *\n * @private\n * @param {String} pattern Original pattern from which an XRegExp object is being built.\n * @param {String} flags Flags being used to construct the regex.\n * @param {Number} pos Position to search for tokens within `pattern`.\n * @param {Number} scope Regex scope to apply: 'default' or 'class'.\n * @param {Object} context Context object to use for token handler functions.\n * @returns {Object} Object with properties `matchLength`, `output`, and `reparse`; or `null`.\n */\n\n\nfunction runTokens(pattern, flags, pos, scope, context) {\n  var i = tokens.length;\n  var leadChar = pattern[pos];\n  var result = null;\n  var match;\n  var t; // Run in reverse insertion order\n\n  while (i--) {\n    t = tokens[i];\n\n    if (t.leadChar && t.leadChar !== leadChar || t.scope !== scope && t.scope !== 'all' || t.flag && !(0, _includes[\"default\"])(flags).call(flags, t.flag)) {\n      continue;\n    }\n\n    match = XRegExp.exec(pattern, t.regex, pos, 'sticky');\n\n    if (match) {\n      result = {\n        matchLength: match[0].length,\n        output: t.handler.call(context, match, scope, flags),\n        reparse: t.reparse\n      }; // Finished with token tests\n\n      break;\n    }\n  }\n\n  return result;\n}\n/**\n * Enables or disables implicit astral mode opt-in. When enabled, flag A is automatically added to\n * all new regexes created by XRegExp. This causes an error to be thrown when creating regexes if\n * the Unicode Base addon is not available, since flag A is registered by that addon.\n *\n * @private\n * @param {Boolean} on `true` to enable; `false` to disable.\n */\n\n\nfunction setAstral(on) {\n  features.astral = on;\n}\n/**\n * Adds named capture groups to the `groups` property of match arrays. See here for details:\n * https://github.com/tc39/proposal-regexp-named-groups\n *\n * @private\n * @param {Boolean} on `true` to enable; `false` to disable.\n */\n\n\nfunction setNamespacing(on) {\n  features.namespacing = on;\n}\n/**\n * Returns the object, or throws an error if it is `null` or `undefined`. This is used to follow\n * the ES5 abstract operation `ToObject`.\n *\n * @private\n * @param {*} value Object to check and return.\n * @returns {*} The provided object.\n */\n\n\nfunction toObject(value) {\n  // null or undefined\n  if (value == null) {\n    throw new TypeError('Cannot convert null or undefined to object');\n  }\n\n  return value;\n} // ==--------------------------==\n// Constructor\n// ==--------------------------==\n\n/**\n * Creates an extended regular expression object for matching text with a pattern. Differs from a\n * native regular expression in that additional syntax and flags are supported. The returned object\n * is in fact a native `RegExp` and works with all native methods.\n *\n * @class XRegExp\n * @constructor\n * @param {String|RegExp} pattern Regex pattern string, or an existing regex object to copy.\n * @param {String} [flags] Any combination of flags.\n *   Native flags:\n *     - `g` - global\n *     - `i` - ignore case\n *     - `m` - multiline anchors\n *     - `u` - unicode (ES6)\n *     - `y` - sticky (Firefox 3+, ES6)\n *   Additional XRegExp flags:\n *     - `n` - explicit capture\n *     - `s` - dot matches all (aka singleline)\n *     - `x` - free-spacing and line comments (aka extended)\n *     - `A` - astral (requires the Unicode Base addon)\n *   Flags cannot be provided when constructing one `RegExp` from another.\n * @returns {RegExp} Extended regular expression object.\n * @example\n *\n * // With named capture and flag x\n * XRegExp(`(?<year>  [0-9]{4} ) -?  # year\n *          (?<month> [0-9]{2} ) -?  # month\n *          (?<day>   [0-9]{2} )     # day`, 'x');\n *\n * // Providing a regex object copies it. Native regexes are recompiled using native (not XRegExp)\n * // syntax. Copies maintain extended data, are augmented with `XRegExp.prototype` properties, and\n * // have fresh `lastIndex` properties (set to zero).\n * XRegExp(/regex/);\n */\n\n\nfunction XRegExp(pattern, flags) {\n  if (XRegExp.isRegExp(pattern)) {\n    if (flags !== undefined) {\n      throw new TypeError('Cannot supply flags when copying a RegExp');\n    }\n\n    return copyRegex(pattern);\n  } // Copy the argument behavior of `RegExp`\n\n\n  pattern = pattern === undefined ? '' : String(pattern);\n  flags = flags === undefined ? '' : String(flags);\n\n  if (XRegExp.isInstalled('astral') && !(0, _includes[\"default\"])(flags).call(flags, 'A')) {\n    // This causes an error to be thrown if the Unicode Base addon is not available\n    flags += 'A';\n  }\n\n  if (!patternCache[pattern]) {\n    patternCache[pattern] = {};\n  }\n\n  if (!patternCache[pattern][flags]) {\n    var context = {\n      hasNamedCapture: false,\n      captureNames: []\n    };\n    var scope = defaultScope;\n    var output = '';\n    var pos = 0;\n    var result; // Check for flag-related errors, and strip/apply flags in a leading mode modifier\n\n    var applied = prepareFlags(pattern, flags);\n    var appliedPattern = applied.pattern;\n    var appliedFlags = (0, _flags[\"default\"])(applied); // Use XRegExp's tokens to translate the pattern to a native regex pattern.\n    // `appliedPattern.length` may change on each iteration if tokens use `reparse`\n\n    while (pos < appliedPattern.length) {\n      do {\n        // Check for custom tokens at the current position\n        result = runTokens(appliedPattern, appliedFlags, pos, scope, context); // If the matched token used the `reparse` option, splice its output into the\n        // pattern before running tokens again at the same position\n\n        if (result && result.reparse) {\n          appliedPattern = (0, _slice[\"default\"])(appliedPattern).call(appliedPattern, 0, pos) + result.output + (0, _slice[\"default\"])(appliedPattern).call(appliedPattern, pos + result.matchLength);\n        }\n      } while (result && result.reparse);\n\n      if (result) {\n        output += result.output;\n        pos += result.matchLength || 1;\n      } else {\n        // Get the native token at the current position\n        var _XRegExp$exec = XRegExp.exec(appliedPattern, nativeTokens[scope], pos, 'sticky'),\n            _XRegExp$exec2 = (0, _slicedToArray2[\"default\"])(_XRegExp$exec, 1),\n            token = _XRegExp$exec2[0];\n\n        output += token;\n        pos += token.length;\n\n        if (token === '[' && scope === defaultScope) {\n          scope = classScope;\n        } else if (token === ']' && scope === classScope) {\n          scope = defaultScope;\n        }\n      }\n    }\n\n    patternCache[pattern][flags] = {\n      // Use basic cleanup to collapse repeated empty groups like `(?:)(?:)` to `(?:)`. Empty\n      // groups are sometimes inserted during regex transpilation in order to keep tokens\n      // separated. However, more than one empty group in a row is never needed.\n      pattern: nativ.replace.call(output, /(?:\\(\\?:\\))+/g, '(?:)'),\n      // Strip all but native flags\n      flags: nativ.replace.call(appliedFlags, /[^gimuy]+/g, ''),\n      // `context.captureNames` has an item for each capturing group, even if unnamed\n      captures: context.hasNamedCapture ? context.captureNames : null\n    };\n  }\n\n  var generated = patternCache[pattern][flags];\n  return augment(new RegExp(generated.pattern, (0, _flags[\"default\"])(generated)), generated.captures, pattern, flags);\n} // Add `RegExp.prototype` to the prototype chain\n\n\nXRegExp.prototype = /(?:)/; // ==--------------------------==\n// Public properties\n// ==--------------------------==\n\n/**\n * The XRegExp version number as a string containing three dot-separated parts. For example,\n * '2.0.0-beta-3'.\n *\n * @static\n * @memberOf XRegExp\n * @type String\n */\n\nXRegExp.version = '4.4.1'; // ==--------------------------==\n// Public methods\n// ==--------------------------==\n// Intentionally undocumented; used in tests and addons\n\nXRegExp._clipDuplicates = clipDuplicates;\nXRegExp._hasNativeFlag = hasNativeFlag;\nXRegExp._dec = dec;\nXRegExp._hex = hex;\nXRegExp._pad4 = pad4;\n/**\n * Extends XRegExp syntax and allows custom flags. This is used internally and can be used to\n * create XRegExp addons. If more than one token can match the same string, the last added wins.\n *\n * @memberOf XRegExp\n * @param {RegExp} regex Regex object that matches the new token.\n * @param {Function} handler Function that returns a new pattern string (using native regex syntax)\n *   to replace the matched token within all future XRegExp regexes. Has access to persistent\n *   properties of the regex being built, through `this`. Invoked with three arguments:\n *   - The match array, with named backreference properties.\n *   - The regex scope where the match was found: 'default' or 'class'.\n *   - The flags used by the regex, including any flags in a leading mode modifier.\n *   The handler function becomes part of the XRegExp construction process, so be careful not to\n *   construct XRegExps within the function or you will trigger infinite recursion.\n * @param {Object} [options] Options object with optional properties:\n *   - `scope` {String} Scope where the token applies: 'default', 'class', or 'all'.\n *   - `flag` {String} Single-character flag that triggers the token. This also registers the\n *     flag, which prevents XRegExp from throwing an 'unknown flag' error when the flag is used.\n *   - `optionalFlags` {String} Any custom flags checked for within the token `handler` that are\n *     not required to trigger the token. This registers the flags, to prevent XRegExp from\n *     throwing an 'unknown flag' error when any of the flags are used.\n *   - `reparse` {Boolean} Whether the `handler` function's output should not be treated as\n *     final, and instead be reparseable by other tokens (including the current token). Allows\n *     token chaining or deferring.\n *   - `leadChar` {String} Single character that occurs at the beginning of any successful match\n *     of the token (not always applicable). This doesn't change the behavior of the token unless\n *     you provide an erroneous value. However, providing it can increase the token's performance\n *     since the token can be skipped at any positions where this character doesn't appear.\n * @example\n *\n * // Basic usage: Add \\a for the ALERT control code\n * XRegExp.addToken(\n *   /\\\\a/,\n *   () => '\\\\x07',\n *   {scope: 'all'}\n * );\n * XRegExp('\\\\a[\\\\a-\\\\n]+').test('\\x07\\n\\x07'); // -> true\n *\n * // Add the U (ungreedy) flag from PCRE and RE2, which reverses greedy and lazy quantifiers.\n * // Since `scope` is not specified, it uses 'default' (i.e., transformations apply outside of\n * // character classes only)\n * XRegExp.addToken(\n *   /([?*+]|{\\d+(?:,\\d*)?})(\\??)/,\n *   (match) => `${match[1]}${match[2] ? '' : '?'}`,\n *   {flag: 'U'}\n * );\n * XRegExp('a+', 'U').exec('aaa')[0]; // -> 'a'\n * XRegExp('a+?', 'U').exec('aaa')[0]; // -> 'aaa'\n */\n\nXRegExp.addToken = function (regex, handler, options) {\n  options = options || {};\n  var _options = options,\n      optionalFlags = _options.optionalFlags;\n\n  if (options.flag) {\n    registerFlag(options.flag);\n  }\n\n  if (optionalFlags) {\n    optionalFlags = nativ.split.call(optionalFlags, '');\n\n    var _iterator2 = _createForOfIteratorHelper(optionalFlags),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var flag = _step2.value;\n        registerFlag(flag);\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  } // Add to the private list of syntax tokens\n\n\n  tokens.push({\n    regex: copyRegex(regex, {\n      addG: true,\n      addY: hasNativeY,\n      isInternalOnly: true\n    }),\n    handler: handler,\n    scope: options.scope || defaultScope,\n    flag: options.flag,\n    reparse: options.reparse,\n    leadChar: options.leadChar\n  }); // Reset the pattern cache used by the `XRegExp` constructor, since the same pattern and flags\n  // might now produce different results\n\n  XRegExp.cache.flush('patterns');\n};\n/**\n * Caches and returns the result of calling `XRegExp(pattern, flags)`. On any subsequent call with\n * the same pattern and flag combination, the cached copy of the regex is returned.\n *\n * @memberOf XRegExp\n * @param {String} pattern Regex pattern string.\n * @param {String} [flags] Any combination of XRegExp flags.\n * @returns {RegExp} Cached XRegExp object.\n * @example\n *\n * while (match = XRegExp.cache('.', 'gs').exec(str)) {\n *   // The regex is compiled once only\n * }\n */\n\n\nXRegExp.cache = function (pattern, flags) {\n  if (!regexCache[pattern]) {\n    regexCache[pattern] = {};\n  }\n\n  return regexCache[pattern][flags] || (regexCache[pattern][flags] = XRegExp(pattern, flags));\n}; // Intentionally undocumented; used in tests\n\n\nXRegExp.cache.flush = function (cacheName) {\n  if (cacheName === 'patterns') {\n    // Flush the pattern cache used by the `XRegExp` constructor\n    patternCache = {};\n  } else {\n    // Flush the regex cache populated by `XRegExp.cache`\n    regexCache = {};\n  }\n};\n/**\n * Escapes any regular expression metacharacters, for use when matching literal strings. The result\n * can safely be used at any point within a regex that uses any flags.\n *\n * @memberOf XRegExp\n * @param {String} str String to escape.\n * @returns {string} String with regex metacharacters escaped.\n * @example\n *\n * XRegExp.escape('Escaped? <.>');\n * // -> 'Escaped\\?\\ <\\.>'\n */\n\n\nXRegExp.escape = function (str) {\n  return nativ.replace.call(toObject(str), /[-\\[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n};\n/**\n * Executes a regex search in a specified string. Returns a match array or `null`. If the provided\n * regex uses named capture, named backreference properties are included on the match array.\n * Optional `pos` and `sticky` arguments specify the search start position, and whether the match\n * must start at the specified position only. The `lastIndex` property of the provided regex is not\n * used, but is updated for compatibility. Also fixes browser bugs compared to the native\n * `RegExp.prototype.exec` and can be used reliably cross-browser.\n *\n * @memberOf XRegExp\n * @param {String} str String to search.\n * @param {RegExp} regex Regex to search with.\n * @param {Number} [pos=0] Zero-based index at which to start the search.\n * @param {Boolean|String} [sticky=false] Whether the match must start at the specified position\n *   only. The string `'sticky'` is accepted as an alternative to `true`.\n * @returns {Array} Match array with named backreference properties, or `null`.\n * @example\n *\n * // Basic use, with named backreference\n * let match = XRegExp.exec('U+2620', XRegExp('U\\\\+(?<hex>[0-9A-F]{4})'));\n * match.hex; // -> '2620'\n *\n * // With pos and sticky, in a loop\n * let pos = 2, result = [], match;\n * while (match = XRegExp.exec('<1><2><3><4>5<6>', /<(\\d)>/, pos, 'sticky')) {\n *   result.push(match[1]);\n *   pos = match.index + match[0].length;\n * }\n * // result -> ['2', '3', '4']\n */\n\n\nXRegExp.exec = function (str, regex, pos, sticky) {\n  var cacheKey = 'g';\n  var addY = false;\n  var fakeY = false;\n  var match;\n  addY = hasNativeY && !!(sticky || regex.sticky && sticky !== false);\n\n  if (addY) {\n    cacheKey += 'y';\n  } else if (sticky) {\n    // Simulate sticky matching by appending an empty capture to the original regex. The\n    // resulting regex will succeed no matter what at the current index (set with `lastIndex`),\n    // and will not search the rest of the subject string. We'll know that the original regex\n    // has failed if that last capture is `''` rather than `undefined` (i.e., if that last\n    // capture participated in the match).\n    fakeY = true;\n    cacheKey += 'FakeY';\n  }\n\n  regex[REGEX_DATA] = regex[REGEX_DATA] || {}; // Shares cached copies with `XRegExp.match`/`replace`\n\n  var r2 = regex[REGEX_DATA][cacheKey] || (regex[REGEX_DATA][cacheKey] = copyRegex(regex, {\n    addG: true,\n    addY: addY,\n    source: fakeY ? \"\".concat(regex.source, \"|()\") : undefined,\n    removeY: sticky === false,\n    isInternalOnly: true\n  }));\n  pos = pos || 0;\n  r2.lastIndex = pos; // Fixed `exec` required for `lastIndex` fix, named backreferences, etc.\n\n  match = fixed.exec.call(r2, str); // Get rid of the capture added by the pseudo-sticky matcher if needed. An empty string means\n  // the original regexp failed (see above).\n\n  if (fakeY && match && match.pop() === '') {\n    match = null;\n  }\n\n  if (regex.global) {\n    regex.lastIndex = match ? r2.lastIndex : 0;\n  }\n\n  return match;\n};\n/**\n * Executes a provided function once per regex match. Searches always start at the beginning of the\n * string and continue until the end, regardless of the state of the regex's `global` property and\n * initial `lastIndex`.\n *\n * @memberOf XRegExp\n * @param {String} str String to search.\n * @param {RegExp} regex Regex to search with.\n * @param {Function} callback Function to execute for each match. Invoked with four arguments:\n *   - The match array, with named backreference properties.\n *   - The zero-based match index.\n *   - The string being traversed.\n *   - The regex object being used to traverse the string.\n * @example\n *\n * // Extracts every other digit from a string\n * const evens = [];\n * XRegExp.forEach('1a2345', /\\d/, (match, i) => {\n *   if (i % 2) evens.push(+match[0]);\n * });\n * // evens -> [2, 4]\n */\n\n\nXRegExp.forEach = function (str, regex, callback) {\n  var pos = 0;\n  var i = -1;\n  var match;\n\n  while (match = XRegExp.exec(str, regex, pos)) {\n    // Because `regex` is provided to `callback`, the function could use the deprecated/\n    // nonstandard `RegExp.prototype.compile` to mutate the regex. However, since `XRegExp.exec`\n    // doesn't use `lastIndex` to set the search position, this can't lead to an infinite loop,\n    // at least. Actually, because of the way `XRegExp.exec` caches globalized versions of\n    // regexes, mutating the regex will not have any effect on the iteration or matched strings,\n    // which is a nice side effect that brings extra safety.\n    callback(match, ++i, str, regex);\n    pos = match.index + (match[0].length || 1);\n  }\n};\n/**\n * Copies a regex object and adds flag `g`. The copy maintains extended data, is augmented with\n * `XRegExp.prototype` properties, and has a fresh `lastIndex` property (set to zero). Native\n * regexes are not recompiled using XRegExp syntax.\n *\n * @memberOf XRegExp\n * @param {RegExp} regex Regex to globalize.\n * @returns {RegExp} Copy of the provided regex with flag `g` added.\n * @example\n *\n * const globalCopy = XRegExp.globalize(/regex/);\n * globalCopy.global; // -> true\n */\n\n\nXRegExp.globalize = function (regex) {\n  return copyRegex(regex, {\n    addG: true\n  });\n};\n/**\n * Installs optional features according to the specified options. Can be undone using\n * `XRegExp.uninstall`.\n *\n * @memberOf XRegExp\n * @param {Object|String} options Options object or string.\n * @example\n *\n * // With an options object\n * XRegExp.install({\n *   // Enables support for astral code points in Unicode addons (implicitly sets flag A)\n *   astral: true,\n *\n *   // Adds named capture groups to the `groups` property of matches\n *   namespacing: true\n * });\n *\n * // With an options string\n * XRegExp.install('astral namespacing');\n */\n\n\nXRegExp.install = function (options) {\n  options = prepareOptions(options);\n\n  if (!features.astral && options.astral) {\n    setAstral(true);\n  }\n\n  if (!features.namespacing && options.namespacing) {\n    setNamespacing(true);\n  }\n};\n/**\n * Checks whether an individual optional feature is installed.\n *\n * @memberOf XRegExp\n * @param {String} feature Name of the feature to check. One of:\n *   - `astral`\n *   - `namespacing`\n * @returns {boolean} Whether the feature is installed.\n * @example\n *\n * XRegExp.isInstalled('astral');\n */\n\n\nXRegExp.isInstalled = function (feature) {\n  return !!features[feature];\n};\n/**\n * Returns `true` if an object is a regex; `false` if it isn't. This works correctly for regexes\n * created in another frame, when `instanceof` and `constructor` checks would fail.\n *\n * @memberOf XRegExp\n * @param {*} value Object to check.\n * @returns {boolean} Whether the object is a `RegExp` object.\n * @example\n *\n * XRegExp.isRegExp('string'); // -> false\n * XRegExp.isRegExp(/regex/i); // -> true\n * XRegExp.isRegExp(RegExp('^', 'm')); // -> true\n * XRegExp.isRegExp(XRegExp('(?s).')); // -> true\n */\n\n\nXRegExp.isRegExp = function (value) {\n  return toString.call(value) === '[object RegExp]';\n}; // isType(value, 'RegExp');\n\n/**\n * Returns the first matched string, or in global mode, an array containing all matched strings.\n * This is essentially a more convenient re-implementation of `String.prototype.match` that gives\n * the result types you actually want (string instead of `exec`-style array in match-first mode,\n * and an empty array instead of `null` when no matches are found in match-all mode). It also lets\n * you override flag g and ignore `lastIndex`, and fixes browser bugs.\n *\n * @memberOf XRegExp\n * @param {String} str String to search.\n * @param {RegExp} regex Regex to search with.\n * @param {String} [scope='one'] Use 'one' to return the first match as a string. Use 'all' to\n *   return an array of all matched strings. If not explicitly specified and `regex` uses flag g,\n *   `scope` is 'all'.\n * @returns {String|Array} In match-first mode: First match as a string, or `null`. In match-all\n *   mode: Array of all matched strings, or an empty array.\n * @example\n *\n * // Match first\n * XRegExp.match('abc', /\\w/); // -> 'a'\n * XRegExp.match('abc', /\\w/g, 'one'); // -> 'a'\n * XRegExp.match('abc', /x/g, 'one'); // -> null\n *\n * // Match all\n * XRegExp.match('abc', /\\w/g); // -> ['a', 'b', 'c']\n * XRegExp.match('abc', /\\w/, 'all'); // -> ['a', 'b', 'c']\n * XRegExp.match('abc', /x/, 'all'); // -> []\n */\n\n\nXRegExp.match = function (str, regex, scope) {\n  var global = regex.global && scope !== 'one' || scope === 'all';\n  var cacheKey = (global ? 'g' : '') + (regex.sticky ? 'y' : '') || 'noGY';\n  regex[REGEX_DATA] = regex[REGEX_DATA] || {}; // Shares cached copies with `XRegExp.exec`/`replace`\n\n  var r2 = regex[REGEX_DATA][cacheKey] || (regex[REGEX_DATA][cacheKey] = copyRegex(regex, {\n    addG: !!global,\n    removeG: scope === 'one',\n    isInternalOnly: true\n  }));\n  var result = nativ.match.call(toObject(str), r2);\n\n  if (regex.global) {\n    regex.lastIndex = scope === 'one' && result ? // Can't use `r2.lastIndex` since `r2` is nonglobal in this case\n    result.index + result[0].length : 0;\n  }\n\n  return global ? result || [] : result && result[0];\n};\n/**\n * Retrieves the matches from searching a string using a chain of regexes that successively search\n * within previous matches. The provided `chain` array can contain regexes and or objects with\n * `regex` and `backref` properties. When a backreference is specified, the named or numbered\n * backreference is passed forward to the next regex or returned.\n *\n * @memberOf XRegExp\n * @param {String} str String to search.\n * @param {Array} chain Regexes that each search for matches within preceding results.\n * @returns {Array} Matches by the last regex in the chain, or an empty array.\n * @example\n *\n * // Basic usage; matches numbers within <b> tags\n * XRegExp.matchChain('1 <b>2</b> 3 <b>4 a 56</b>', [\n *   XRegExp('(?is)<b>.*?</b>'),\n *   /\\d+/\n * ]);\n * // -> ['2', '4', '56']\n *\n * // Passing forward and returning specific backreferences\n * html = '<a href=\"http://xregexp.com/api/\">XRegExp</a>\\\n *         <a href=\"http://www.google.com/\">Google</a>';\n * XRegExp.matchChain(html, [\n *   {regex: /<a href=\"([^\"]+)\">/i, backref: 1},\n *   {regex: XRegExp('(?i)^https?://(?<domain>[^/?#]+)'), backref: 'domain'}\n * ]);\n * // -> ['xregexp.com', 'www.google.com']\n */\n\n\nXRegExp.matchChain = function (str, chain) {\n  return function recurseChain(values, level) {\n    var item = chain[level].regex ? chain[level] : {\n      regex: chain[level]\n    };\n    var matches = [];\n\n    function addMatch(match) {\n      if (item.backref) {\n        var ERR_UNDEFINED_GROUP = \"Backreference to undefined group: \".concat(item.backref);\n        var isNamedBackref = isNaN(item.backref);\n\n        if (isNamedBackref && XRegExp.isInstalled('namespacing')) {\n          // `groups` has `null` as prototype, so using `in` instead of `hasOwnProperty`\n          if (!(item.backref in match.groups)) {\n            throw new ReferenceError(ERR_UNDEFINED_GROUP);\n          }\n        } else if (!match.hasOwnProperty(item.backref)) {\n          throw new ReferenceError(ERR_UNDEFINED_GROUP);\n        }\n\n        var backrefValue = isNamedBackref && XRegExp.isInstalled('namespacing') ? match.groups[item.backref] : match[item.backref];\n        matches.push(backrefValue || '');\n      } else {\n        matches.push(match[0]);\n      }\n    }\n\n    var _iterator3 = _createForOfIteratorHelper(values),\n        _step3;\n\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var value = _step3.value;\n        (0, _forEach[\"default\"])(XRegExp).call(XRegExp, value, item.regex, addMatch);\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n\n    return level === chain.length - 1 || !matches.length ? matches : recurseChain(matches, level + 1);\n  }([str], 0);\n};\n/**\n * Returns a new string with one or all matches of a pattern replaced. The pattern can be a string\n * or regex, and the replacement can be a string or a function to be called for each match. To\n * perform a global search and replace, use the optional `scope` argument or include flag g if using\n * a regex. Replacement strings can use `${n}` or `$<n>` for named and numbered backreferences.\n * Replacement functions can use named backreferences via `arguments[0].name`. Also fixes browser\n * bugs compared to the native `String.prototype.replace` and can be used reliably cross-browser.\n *\n * @memberOf XRegExp\n * @param {String} str String to search.\n * @param {RegExp|String} search Search pattern to be replaced.\n * @param {String|Function} replacement Replacement string or a function invoked to create it.\n *   Replacement strings can include special replacement syntax:\n *     - $$ - Inserts a literal $ character.\n *     - $&, $0 - Inserts the matched substring.\n *     - $` - Inserts the string that precedes the matched substring (left context).\n *     - $' - Inserts the string that follows the matched substring (right context).\n *     - $n, $nn - Where n/nn are digits referencing an existent capturing group, inserts\n *       backreference n/nn.\n *     - ${n}, $<n> - Where n is a name or any number of digits that reference an existent capturing\n *       group, inserts backreference n.\n *   Replacement functions are invoked with three or more arguments:\n *     - The matched substring (corresponds to $& above). Named backreferences are accessible as\n *       properties of this first argument.\n *     - 0..n arguments, one for each backreference (corresponding to $1, $2, etc. above).\n *     - The zero-based index of the match within the total search string.\n *     - The total string being searched.\n * @param {String} [scope='one'] Use 'one' to replace the first match only, or 'all'. If not\n *   explicitly specified and using a regex with flag g, `scope` is 'all'.\n * @returns {String} New string with one or all matches replaced.\n * @example\n *\n * // Regex search, using named backreferences in replacement string\n * const name = XRegExp('(?<first>\\\\w+) (?<last>\\\\w+)');\n * XRegExp.replace('John Smith', name, '$<last>, $<first>');\n * // -> 'Smith, John'\n *\n * // Regex search, using named backreferences in replacement function\n * XRegExp.replace('John Smith', name, (match) => `${match.last}, ${match.first}`);\n * // -> 'Smith, John'\n *\n * // String search, with replace-all\n * XRegExp.replace('RegExp builds RegExps', 'RegExp', 'XRegExp', 'all');\n * // -> 'XRegExp builds XRegExps'\n */\n\n\nXRegExp.replace = function (str, search, replacement, scope) {\n  var isRegex = XRegExp.isRegExp(search);\n  var global = search.global && scope !== 'one' || scope === 'all';\n  var cacheKey = (global ? 'g' : '') + (search.sticky ? 'y' : '') || 'noGY';\n  var s2 = search;\n\n  if (isRegex) {\n    search[REGEX_DATA] = search[REGEX_DATA] || {}; // Shares cached copies with `XRegExp.exec`/`match`. Since a copy is used, `search`'s\n    // `lastIndex` isn't updated *during* replacement iterations\n\n    s2 = search[REGEX_DATA][cacheKey] || (search[REGEX_DATA][cacheKey] = copyRegex(search, {\n      addG: !!global,\n      removeG: scope === 'one',\n      isInternalOnly: true\n    }));\n  } else if (global) {\n    s2 = new RegExp(XRegExp.escape(String(search)), 'g');\n  } // Fixed `replace` required for named backreferences, etc.\n\n\n  var result = fixed.replace.call(toObject(str), s2, replacement);\n\n  if (isRegex && search.global) {\n    // Fixes IE, Safari bug (last tested IE 9, Safari 5.1)\n    search.lastIndex = 0;\n  }\n\n  return result;\n};\n/**\n * Performs batch processing of string replacements. Used like `XRegExp.replace`, but accepts an\n * array of replacement details. Later replacements operate on the output of earlier replacements.\n * Replacement details are accepted as an array with a regex or string to search for, the\n * replacement string or function, and an optional scope of 'one' or 'all'. Uses the XRegExp\n * replacement text syntax, which supports named backreference properties via `${name}` or\n * `$<name>`.\n *\n * @memberOf XRegExp\n * @param {String} str String to search.\n * @param {Array} replacements Array of replacement detail arrays.\n * @returns {String} New string with all replacements.\n * @example\n *\n * str = XRegExp.replaceEach(str, [\n *   [XRegExp('(?<name>a)'), 'z${name}'],\n *   [/b/gi, 'y'],\n *   [/c/g, 'x', 'one'], // scope 'one' overrides /g\n *   [/d/, 'w', 'all'],  // scope 'all' overrides lack of /g\n *   ['e', 'v', 'all'],  // scope 'all' allows replace-all for strings\n *   [/f/g, ($0) => $0.toUpperCase()]\n * ]);\n */\n\n\nXRegExp.replaceEach = function (str, replacements) {\n  var _iterator4 = _createForOfIteratorHelper(replacements),\n      _step4;\n\n  try {\n    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n      var r = _step4.value;\n      str = XRegExp.replace(str, r[0], r[1], r[2]);\n    }\n  } catch (err) {\n    _iterator4.e(err);\n  } finally {\n    _iterator4.f();\n  }\n\n  return str;\n};\n/**\n * Splits a string into an array of strings using a regex or string separator. Matches of the\n * separator are not included in the result array. However, if `separator` is a regex that contains\n * capturing groups, backreferences are spliced into the result each time `separator` is matched.\n * Fixes browser bugs compared to the native `String.prototype.split` and can be used reliably\n * cross-browser.\n *\n * @memberOf XRegExp\n * @param {String} str String to split.\n * @param {RegExp|String} separator Regex or string to use for separating the string.\n * @param {Number} [limit] Maximum number of items to include in the result array.\n * @returns {Array} Array of substrings.\n * @example\n *\n * // Basic use\n * XRegExp.split('a b c', ' ');\n * // -> ['a', 'b', 'c']\n *\n * // With limit\n * XRegExp.split('a b c', ' ', 2);\n * // -> ['a', 'b']\n *\n * // Backreferences in result array\n * XRegExp.split('..word1..', /([a-z]+)(\\d+)/i);\n * // -> ['..', 'word', '1', '..']\n */\n\n\nXRegExp.split = function (str, separator, limit) {\n  return fixed.split.call(toObject(str), separator, limit);\n};\n/**\n * Executes a regex search in a specified string. Returns `true` or `false`. Optional `pos` and\n * `sticky` arguments specify the search start position, and whether the match must start at the\n * specified position only. The `lastIndex` property of the provided regex is not used, but is\n * updated for compatibility. Also fixes browser bugs compared to the native\n * `RegExp.prototype.test` and can be used reliably cross-browser.\n *\n * @memberOf XRegExp\n * @param {String} str String to search.\n * @param {RegExp} regex Regex to search with.\n * @param {Number} [pos=0] Zero-based index at which to start the search.\n * @param {Boolean|String} [sticky=false] Whether the match must start at the specified position\n *   only. The string `'sticky'` is accepted as an alternative to `true`.\n * @returns {boolean} Whether the regex matched the provided value.\n * @example\n *\n * // Basic use\n * XRegExp.test('abc', /c/); // -> true\n *\n * // With pos and sticky\n * XRegExp.test('abc', /c/, 0, 'sticky'); // -> false\n * XRegExp.test('abc', /c/, 2, 'sticky'); // -> true\n */\n// Do this the easy way :-)\n\n\nXRegExp.test = function (str, regex, pos, sticky) {\n  return !!XRegExp.exec(str, regex, pos, sticky);\n};\n/**\n * Uninstalls optional features according to the specified options. All optional features start out\n * uninstalled, so this is used to undo the actions of `XRegExp.install`.\n *\n * @memberOf XRegExp\n * @param {Object|String} options Options object or string.\n * @example\n *\n * // With an options object\n * XRegExp.uninstall({\n *   // Disables support for astral code points in Unicode addons\n *   astral: true,\n *\n *   // Don't add named capture groups to the `groups` property of matches\n *   namespacing: true\n * });\n *\n * // With an options string\n * XRegExp.uninstall('astral namespacing');\n */\n\n\nXRegExp.uninstall = function (options) {\n  options = prepareOptions(options);\n\n  if (features.astral && options.astral) {\n    setAstral(false);\n  }\n\n  if (features.namespacing && options.namespacing) {\n    setNamespacing(false);\n  }\n};\n/**\n * Returns an XRegExp object that is the union of the given patterns. Patterns can be provided as\n * regex objects or strings. Metacharacters are escaped in patterns provided as strings.\n * Backreferences in provided regex objects are automatically renumbered to work correctly within\n * the larger combined pattern. Native flags used by provided regexes are ignored in favor of the\n * `flags` argument.\n *\n * @memberOf XRegExp\n * @param {Array} patterns Regexes and strings to combine.\n * @param {String} [flags] Any combination of XRegExp flags.\n * @param {Object} [options] Options object with optional properties:\n *   - `conjunction` {String} Type of conjunction to use: 'or' (default) or 'none'.\n * @returns {RegExp} Union of the provided regexes and strings.\n * @example\n *\n * XRegExp.union(['a+b*c', /(dogs)\\1/, /(cats)\\1/], 'i');\n * // -> /a\\+b\\*c|(dogs)\\1|(cats)\\2/i\n *\n * XRegExp.union([/man/, /bear/, /pig/], 'i', {conjunction: 'none'});\n * // -> /manbearpig/i\n */\n\n\nXRegExp.union = function (patterns, flags, options) {\n  options = options || {};\n  var conjunction = options.conjunction || 'or';\n  var numCaptures = 0;\n  var numPriorCaptures;\n  var captureNames;\n\n  function rewrite(match, paren, backref) {\n    var name = captureNames[numCaptures - numPriorCaptures]; // Capturing group\n\n    if (paren) {\n      ++numCaptures; // If the current capture has a name, preserve the name\n\n      if (name) {\n        return \"(?<\".concat(name, \">\");\n      } // Backreference\n\n    } else if (backref) {\n      // Rewrite the backreference\n      return \"\\\\\".concat(+backref + numPriorCaptures);\n    }\n\n    return match;\n  }\n\n  if (!(isType(patterns, 'Array') && patterns.length)) {\n    throw new TypeError('Must provide a nonempty array of patterns to merge');\n  }\n\n  var parts = /(\\()(?!\\?)|\\\\([1-9]\\d*)|\\\\[\\s\\S]|\\[(?:[^\\\\\\]]|\\\\[\\s\\S])*\\]/g;\n  var output = [];\n\n  var _iterator5 = _createForOfIteratorHelper(patterns),\n      _step5;\n\n  try {\n    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n      var pattern = _step5.value;\n\n      if (XRegExp.isRegExp(pattern)) {\n        numPriorCaptures = numCaptures;\n        captureNames = pattern[REGEX_DATA] && pattern[REGEX_DATA].captureNames || []; // Rewrite backreferences. Passing to XRegExp dies on octals and ensures patterns are\n        // independently valid; helps keep this simple. Named captures are put back\n\n        output.push(nativ.replace.call(XRegExp(pattern.source).source, parts, rewrite));\n      } else {\n        output.push(XRegExp.escape(pattern));\n      }\n    }\n  } catch (err) {\n    _iterator5.e(err);\n  } finally {\n    _iterator5.f();\n  }\n\n  var separator = conjunction === 'none' ? '' : '|';\n  return XRegExp(output.join(separator), flags);\n}; // ==--------------------------==\n// Fixed/extended native methods\n// ==--------------------------==\n\n/**\n * Adds named capture support (with backreferences returned as `result.name`), and fixes browser\n * bugs in the native `RegExp.prototype.exec`. Use via `XRegExp.exec`.\n *\n * @memberOf RegExp\n * @param {String} str String to search.\n * @returns {Array} Match array with named backreference properties, or `null`.\n */\n\n\nfixed.exec = function (str) {\n  var origLastIndex = this.lastIndex;\n  var match = nativ.exec.apply(this, arguments);\n\n  if (match) {\n    // Fix browsers whose `exec` methods don't return `undefined` for nonparticipating capturing\n    // groups. This fixes IE 5.5-8, but not IE 9's quirks mode or emulation of older IEs. IE 9\n    // in standards mode follows the spec.\n    if (!correctExecNpcg && match.length > 1 && (0, _includes[\"default\"])(match).call(match, '')) {\n      var _context3;\n\n      var r2 = copyRegex(this, {\n        removeG: true,\n        isInternalOnly: true\n      }); // Using `str.slice(match.index)` rather than `match[0]` in case lookahead allowed\n      // matching due to characters outside the match\n\n      nativ.replace.call((0, _slice[\"default\"])(_context3 = String(str)).call(_context3, match.index), r2, function () {\n        var len = arguments.length; // Skip index 0 and the last 2\n\n        for (var i = 1; i < len - 2; ++i) {\n          if ((i < 0 || arguments.length <= i ? undefined : arguments[i]) === undefined) {\n            match[i] = undefined;\n          }\n        }\n      });\n    } // Attach named capture properties\n\n\n    var groupsObject = match;\n\n    if (XRegExp.isInstalled('namespacing')) {\n      // https://tc39.github.io/proposal-regexp-named-groups/#sec-regexpbuiltinexec\n      match.groups = (0, _create[\"default\"])(null);\n      groupsObject = match.groups;\n    }\n\n    if (this[REGEX_DATA] && this[REGEX_DATA].captureNames) {\n      // Skip index 0\n      for (var i = 1; i < match.length; ++i) {\n        var name = this[REGEX_DATA].captureNames[i - 1];\n\n        if (name) {\n          groupsObject[name] = match[i];\n        }\n      }\n    } // Fix browsers that increment `lastIndex` after zero-length matches\n\n\n    if (this.global && !match[0].length && this.lastIndex > match.index) {\n      this.lastIndex = match.index;\n    }\n  }\n\n  if (!this.global) {\n    // Fixes IE, Opera bug (last tested IE 9, Opera 11.6)\n    this.lastIndex = origLastIndex;\n  }\n\n  return match;\n};\n/**\n * Fixes browser bugs in the native `RegExp.prototype.test`.\n *\n * @memberOf RegExp\n * @param {String} str String to search.\n * @returns {boolean} Whether the regex matched the provided value.\n */\n\n\nfixed.test = function (str) {\n  // Do this the easy way :-)\n  return !!fixed.exec.call(this, str);\n};\n/**\n * Adds named capture support (with backreferences returned as `result.name`), and fixes browser\n * bugs in the native `String.prototype.match`.\n *\n * @memberOf String\n * @param {RegExp|*} regex Regex to search with. If not a regex object, it is passed to `RegExp`.\n * @returns {Array} If `regex` uses flag g, an array of match strings or `null`. Without flag g,\n *   the result of calling `regex.exec(this)`.\n */\n\n\nfixed.match = function (regex) {\n  if (!XRegExp.isRegExp(regex)) {\n    // Use the native `RegExp` rather than `XRegExp`\n    regex = new RegExp(regex);\n  } else if (regex.global) {\n    var result = nativ.match.apply(this, arguments); // Fixes IE bug\n\n    regex.lastIndex = 0;\n    return result;\n  }\n\n  return fixed.exec.call(regex, toObject(this));\n};\n/**\n * Adds support for `${n}` (or `$<n>`) tokens for named and numbered backreferences in replacement\n * text, and provides named backreferences to replacement functions as `arguments[0].name`. Also\n * fixes browser bugs in replacement text syntax when performing a replacement using a nonregex\n * search value, and the value of a replacement regex's `lastIndex` property during replacement\n * iterations and upon completion. Note that this doesn't support SpiderMonkey's proprietary third\n * (`flags`) argument. Use via `XRegExp.replace`.\n *\n * @memberOf String\n * @param {RegExp|String} search Search pattern to be replaced.\n * @param {String|Function} replacement Replacement string or a function invoked to create it.\n * @returns {string} New string with one or all matches replaced.\n */\n\n\nfixed.replace = function (search, replacement) {\n  var isRegex = XRegExp.isRegExp(search);\n  var origLastIndex;\n  var captureNames;\n  var result;\n\n  if (isRegex) {\n    if (search[REGEX_DATA]) {\n      captureNames = search[REGEX_DATA].captureNames;\n    } // Only needed if `search` is nonglobal\n\n\n    origLastIndex = search.lastIndex;\n  } else {\n    search += ''; // Type-convert\n  } // Don't use `typeof`; some older browsers return 'function' for regex objects\n\n\n  if (isType(replacement, 'Function')) {\n    // Stringifying `this` fixes a bug in IE < 9 where the last argument in replacement\n    // functions isn't type-converted to a string\n    result = nativ.replace.call(String(this), search, function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      if (captureNames) {\n        var groupsObject;\n\n        if (XRegExp.isInstalled('namespacing')) {\n          // https://tc39.github.io/proposal-regexp-named-groups/#sec-regexpbuiltinexec\n          groupsObject = (0, _create[\"default\"])(null);\n          args.push(groupsObject);\n        } else {\n          // Change the `args[0]` string primitive to a `String` object that can store\n          // properties. This really does need to use `String` as a constructor\n          args[0] = new String(args[0]);\n          groupsObject = args[0];\n        } // Store named backreferences\n\n\n        for (var i = 0; i < captureNames.length; ++i) {\n          if (captureNames[i]) {\n            groupsObject[captureNames[i]] = args[i + 1];\n          }\n        }\n      } // ES6 specs the context for replacement functions as `undefined`\n\n\n      return replacement.apply(void 0, args);\n    });\n  } else {\n    // Ensure that the last value of `args` will be a string when given nonstring `this`,\n    // while still throwing on null or undefined context\n    result = nativ.replace.call(this == null ? this : String(this), search, function () {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      return nativ.replace.call(String(replacement), replacementToken, replacer);\n\n      function replacer($0, bracketed, angled, dollarToken) {\n        bracketed = bracketed || angled; // Named or numbered backreference with curly or angled braces\n\n        if (bracketed) {\n          // XRegExp behavior for `${n}` or `$<n>`:\n          // 1. Backreference to numbered capture, if `n` is an integer. Use `0` for the\n          //    entire match. Any number of leading zeros may be used.\n          // 2. Backreference to named capture `n`, if it exists and is not an integer\n          //    overridden by numbered capture. In practice, this does not overlap with\n          //    numbered capture since XRegExp does not allow named capture to use a bare\n          //    integer as the name.\n          // 3. If the name or number does not refer to an existing capturing group, it's\n          //    an error.\n          var n = +bracketed; // Type-convert; drop leading zeros\n\n          if (n <= args.length - 3) {\n            return args[n] || '';\n          } // Groups with the same name is an error, else would need `lastIndexOf`\n\n\n          n = captureNames ? (0, _indexOf[\"default\"])(captureNames).call(captureNames, bracketed) : -1;\n\n          if (n < 0) {\n            throw new SyntaxError(\"Backreference to undefined group \".concat($0));\n          }\n\n          return args[n + 1] || '';\n        } // Else, special variable or numbered backreference without curly braces\n\n\n        if (dollarToken === '$') {\n          // $$\n          return '$';\n        }\n\n        if (dollarToken === '&' || +dollarToken === 0) {\n          // $&, $0 (not followed by 1-9), $00\n          return args[0];\n        }\n\n        if (dollarToken === '`') {\n          var _context4;\n\n          // $` (left context)\n          return (0, _slice[\"default\"])(_context4 = args[args.length - 1]).call(_context4, 0, args[args.length - 2]);\n        }\n\n        if (dollarToken === \"'\") {\n          var _context5;\n\n          // $' (right context)\n          return (0, _slice[\"default\"])(_context5 = args[args.length - 1]).call(_context5, args[args.length - 2] + args[0].length);\n        } // Else, numbered backreference without braces\n\n\n        dollarToken = +dollarToken; // Type-convert; drop leading zero\n        // XRegExp behavior for `$n` and `$nn`:\n        // - Backrefs end after 1 or 2 digits. Use `${..}` or `$<..>` for more digits.\n        // - `$1` is an error if no capturing groups.\n        // - `$10` is an error if less than 10 capturing groups. Use `${1}0` or `$<1>0`\n        //   instead.\n        // - `$01` is `$1` if at least one capturing group, else it's an error.\n        // - `$0` (not followed by 1-9) and `$00` are the entire match.\n        // Native behavior, for comparison:\n        // - Backrefs end after 1 or 2 digits. Cannot reference capturing group 100+.\n        // - `$1` is a literal `$1` if no capturing groups.\n        // - `$10` is `$1` followed by a literal `0` if less than 10 capturing groups.\n        // - `$01` is `$1` if at least one capturing group, else it's a literal `$01`.\n        // - `$0` is a literal `$0`.\n\n        if (!isNaN(dollarToken)) {\n          if (dollarToken > args.length - 3) {\n            throw new SyntaxError(\"Backreference to undefined group \".concat($0));\n          }\n\n          return args[dollarToken] || '';\n        } // `$` followed by an unsupported char is an error, unlike native JS\n\n\n        throw new SyntaxError(\"Invalid token \".concat($0));\n      }\n    });\n  }\n\n  if (isRegex) {\n    if (search.global) {\n      // Fixes IE, Safari bug (last tested IE 9, Safari 5.1)\n      search.lastIndex = 0;\n    } else {\n      // Fixes IE, Opera bug (last tested IE 9, Opera 11.6)\n      search.lastIndex = origLastIndex;\n    }\n  }\n\n  return result;\n};\n/**\n * Fixes browser bugs in the native `String.prototype.split`. Use via `XRegExp.split`.\n *\n * @memberOf String\n * @param {RegExp|String} separator Regex or string to use for separating the string.\n * @param {Number} [limit] Maximum number of items to include in the result array.\n * @returns {!Array} Array of substrings.\n */\n\n\nfixed.split = function (separator, limit) {\n  if (!XRegExp.isRegExp(separator)) {\n    // Browsers handle nonregex split correctly, so use the faster native method\n    return nativ.split.apply(this, arguments);\n  }\n\n  var str = String(this);\n  var output = [];\n  var origLastIndex = separator.lastIndex;\n  var lastLastIndex = 0;\n  var lastLength; // Values for `limit`, per the spec:\n  // If undefined: pow(2,32) - 1\n  // If 0, Infinity, or NaN: 0\n  // If positive number: limit = floor(limit); if (limit >= pow(2,32)) limit -= pow(2,32);\n  // If negative number: pow(2,32) - floor(abs(limit))\n  // If other: Type-convert, then use the above rules\n  // This line fails in very strange ways for some values of `limit` in Opera 10.5-10.63, unless\n  // Opera Dragonfly is open (go figure). It works in at least Opera 9.5-10.1 and 11+\n\n  limit = (limit === undefined ? -1 : limit) >>> 0;\n  (0, _forEach[\"default\"])(XRegExp).call(XRegExp, str, separator, function (match) {\n    // This condition is not the same as `if (match[0].length)`\n    if (match.index + match[0].length > lastLastIndex) {\n      output.push((0, _slice[\"default\"])(str).call(str, lastLastIndex, match.index));\n\n      if (match.length > 1 && match.index < str.length) {\n        Array.prototype.push.apply(output, (0, _slice[\"default\"])(match).call(match, 1));\n      }\n\n      lastLength = match[0].length;\n      lastLastIndex = match.index + lastLength;\n    }\n  });\n\n  if (lastLastIndex === str.length) {\n    if (!nativ.test.call(separator, '') || lastLength) {\n      output.push('');\n    }\n  } else {\n    output.push((0, _slice[\"default\"])(str).call(str, lastLastIndex));\n  }\n\n  separator.lastIndex = origLastIndex;\n  return output.length > limit ? (0, _slice[\"default\"])(output).call(output, 0, limit) : output;\n}; // ==--------------------------==\n// Built-in syntax/flag tokens\n// ==--------------------------==\n\n/*\n * Letter escapes that natively match literal characters: `\\a`, `\\A`, etc. These should be\n * SyntaxErrors but are allowed in web reality. XRegExp makes them errors for cross-browser\n * consistency and to reserve their syntax, but lets them be superseded by addons.\n */\n\n\nXRegExp.addToken(/\\\\([ABCE-RTUVXYZaeg-mopqyz]|c(?![A-Za-z])|u(?![\\dA-Fa-f]{4}|{[\\dA-Fa-f]+})|x(?![\\dA-Fa-f]{2}))/, function (match, scope) {\n  // \\B is allowed in default scope only\n  if (match[1] === 'B' && scope === defaultScope) {\n    return match[0];\n  }\n\n  throw new SyntaxError(\"Invalid escape \".concat(match[0]));\n}, {\n  scope: 'all',\n  leadChar: '\\\\'\n});\n/*\n * Unicode code point escape with curly braces: `\\u{N..}`. `N..` is any one or more digit\n * hexadecimal number from 0-10FFFF, and can include leading zeros. Requires the native ES6 `u` flag\n * to support code points greater than U+FFFF. Avoids converting code points above U+FFFF to\n * surrogate pairs (which could be done without flag `u`), since that could lead to broken behavior\n * if you follow a `\\u{N..}` token that references a code point above U+FFFF with a quantifier, or\n * if you use the same in a character class.\n */\n\nXRegExp.addToken(/\\\\u{([\\dA-Fa-f]+)}/, function (match, scope, flags) {\n  var code = dec(match[1]);\n\n  if (code > 0x10FFFF) {\n    throw new SyntaxError(\"Invalid Unicode code point \".concat(match[0]));\n  }\n\n  if (code <= 0xFFFF) {\n    // Converting to \\uNNNN avoids needing to escape the literal character and keep it\n    // separate from preceding tokens\n    return \"\\\\u\".concat(pad4(hex(code)));\n  } // If `code` is between 0xFFFF and 0x10FFFF, require and defer to native handling\n\n\n  if (hasNativeU && (0, _includes[\"default\"])(flags).call(flags, 'u')) {\n    return match[0];\n  }\n\n  throw new SyntaxError('Cannot use Unicode code point above \\\\u{FFFF} without flag u');\n}, {\n  scope: 'all',\n  leadChar: '\\\\'\n});\n/*\n * Empty character class: `[]` or `[^]`. This fixes a critical cross-browser syntax inconsistency.\n * Unless this is standardized (per the ES spec), regex syntax can't be accurately parsed because\n * character class endings can't be determined.\n */\n\nXRegExp.addToken(/\\[(\\^?)\\]/, // For cross-browser compatibility with ES3, convert [] to \\b\\B and [^] to [\\s\\S].\n// (?!) should work like \\b\\B, but is unreliable in some versions of Firefox\n\n/* eslint-disable no-confusing-arrow */\nfunction (match) {\n  return match[1] ? '[\\\\s\\\\S]' : '\\\\b\\\\B';\n},\n/* eslint-enable no-confusing-arrow */\n{\n  leadChar: '['\n});\n/*\n * Comment pattern: `(?# )`. Inline comments are an alternative to the line comments allowed in\n * free-spacing mode (flag x).\n */\n\nXRegExp.addToken(/\\(\\?#[^)]*\\)/, getContextualTokenSeparator, {\n  leadChar: '('\n});\n/*\n * Whitespace and line comments, in free-spacing mode (aka extended mode, flag x) only.\n */\n\nXRegExp.addToken(/\\s+|#[^\\n]*\\n?/, getContextualTokenSeparator, {\n  flag: 'x'\n});\n/*\n * Dot, in dotall mode (aka singleline mode, flag s) only.\n */\n\nXRegExp.addToken(/\\./, function () {\n  return '[\\\\s\\\\S]';\n}, {\n  flag: 's',\n  leadChar: '.'\n});\n/*\n * Named backreference: `\\k<name>`. Backreference names can use the characters A-Z, a-z, 0-9, _,\n * and $ only. Also allows numbered backreferences as `\\k<n>`.\n */\n\nXRegExp.addToken(/\\\\k<([\\w$]+)>/, function (match) {\n  var _context6, _context7;\n\n  // Groups with the same name is an error, else would need `lastIndexOf`\n  var index = isNaN(match[1]) ? (0, _indexOf[\"default\"])(_context6 = this.captureNames).call(_context6, match[1]) + 1 : +match[1];\n  var endIndex = match.index + match[0].length;\n\n  if (!index || index > this.captureNames.length) {\n    throw new SyntaxError(\"Backreference to undefined group \".concat(match[0]));\n  } // Keep backreferences separate from subsequent literal numbers. This avoids e.g.\n  // inadvertedly changing `(?<n>)\\k<n>1` to `()\\11`.\n\n\n  return (0, _concat[\"default\"])(_context7 = \"\\\\\".concat(index)).call(_context7, endIndex === match.input.length || isNaN(match.input[endIndex]) ? '' : '(?:)');\n}, {\n  leadChar: '\\\\'\n});\n/*\n * Numbered backreference or octal, plus any following digits: `\\0`, `\\11`, etc. Octals except `\\0`\n * not followed by 0-9 and backreferences to unopened capture groups throw an error. Other matches\n * are returned unaltered. IE < 9 doesn't support backreferences above `\\99` in regex syntax.\n */\n\nXRegExp.addToken(/\\\\(\\d+)/, function (match, scope) {\n  if (!(scope === defaultScope && /^[1-9]/.test(match[1]) && +match[1] <= this.captureNames.length) && match[1] !== '0') {\n    throw new SyntaxError(\"Cannot use octal escape or backreference to undefined group \".concat(match[0]));\n  }\n\n  return match[0];\n}, {\n  scope: 'all',\n  leadChar: '\\\\'\n});\n/*\n * Named capturing group; match the opening delimiter only: `(?<name>`. Capture names can use the\n * characters A-Z, a-z, 0-9, _, and $ only. Names can't be integers. Supports Python-style\n * `(?P<name>` as an alternate syntax to avoid issues in some older versions of Opera which natively\n * supported the Python-style syntax. Otherwise, XRegExp might treat numbered backreferences to\n * Python-style named capture as octals.\n */\n\nXRegExp.addToken(/\\(\\?P?<([\\w$]+)>/, function (match) {\n  var _context8;\n\n  // Disallow bare integers as names because named backreferences are added to match arrays\n  // and therefore numeric properties may lead to incorrect lookups\n  if (!isNaN(match[1])) {\n    throw new SyntaxError(\"Cannot use integer as capture name \".concat(match[0]));\n  }\n\n  if (!XRegExp.isInstalled('namespacing') && (match[1] === 'length' || match[1] === '__proto__')) {\n    throw new SyntaxError(\"Cannot use reserved word as capture name \".concat(match[0]));\n  }\n\n  if ((0, _includes[\"default\"])(_context8 = this.captureNames).call(_context8, match[1])) {\n    throw new SyntaxError(\"Cannot use same name for multiple groups \".concat(match[0]));\n  }\n\n  this.captureNames.push(match[1]);\n  this.hasNamedCapture = true;\n  return '(';\n}, {\n  leadChar: '('\n});\n/*\n * Capturing group; match the opening parenthesis only. Required for support of named capturing\n * groups. Also adds explicit capture mode (flag n).\n */\n\nXRegExp.addToken(/\\((?!\\?)/, function (match, scope, flags) {\n  if ((0, _includes[\"default\"])(flags).call(flags, 'n')) {\n    return '(?:';\n  }\n\n  this.captureNames.push(null);\n  return '(';\n}, {\n  optionalFlags: 'n',\n  leadChar: '('\n});\nvar _default = XRegExp;\nexports[\"default\"] = _default;\nmodule.exports = exports.default;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$$babel$runtime_corejs3$core_js_stable$instance$flags","~$module$node_modules$$babel$runtime_corejs3$core_js$get_iterator_method","~$module$node_modules$$babel$runtime_corejs3$core_js_stable$instance$index_of","~$module$node_modules$$babel$runtime_corejs3$core_js_stable$instance$for_each","~$module$node_modules$$babel$runtime_corejs3$helpers$interopRequireDefault","~$module$node_modules$$babel$runtime_corejs3$core_js_stable$instance$sort","~$shadow.js","~$module$node_modules$$babel$runtime_corejs3$core_js_stable$instance$includes","~$module$node_modules$$babel$runtime_corejs3$core_js_stable$array$from","~$module$node_modules$$babel$runtime_corejs3$core_js_stable$object$define_property","~$module$node_modules$$babel$runtime_corejs3$core_js_stable$object$create","~$module$node_modules$$babel$runtime_corejs3$core_js$get_iterator","~$module$node_modules$$babel$runtime_corejs3$core_js_stable$symbol","~$module$node_modules$$babel$runtime_corejs3$core_js_stable$instance$slice","~$module$node_modules$$babel$runtime_corejs3$helpers$slicedToArray","~$module$node_modules$$babel$runtime_corejs3$core_js_stable$parse_int","~$module$node_modules$$babel$runtime_corejs3$core_js_stable$instance$concat","~$module$node_modules$$babel$runtime_corejs3$core_js_stable$array$is_array"]],"~:properties",["^5",["n","replaceEach","leadChar","handler","_hasNativeFlag","s","forEach","output","f","e","namespacing","removeY","prototype","addToken","captures","astral","union","optionalFlags","_pad4","regex","lastIndex","flush","flags","globalize","hasNamedCapture","exec","cache","escape","replace","addG","value","uninstall","isInternalOnly","install","split","_hex","scope","addY","i","source","pattern","y","removeG","match","version","__proto__","g","u","_dec","_clipDuplicates","matchLength","isInstalled","reparse","isRegExp","m","captureNames","done","groups","flag","matchChain","test"]],"~:compiled-at",1668766213494,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$xregexp$lib$xregexp.js\",\n\"lineCount\":29,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/xregexp/lib/xregexp.js\"],\n\"sourcesContent\":[\"shadow$provide[269] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nvar _interopRequireDefault = require(\\\"@babel/runtime-corejs3/helpers/interopRequireDefault\\\");\\n\\nvar _Object$defineProperty = require(\\\"@babel/runtime-corejs3/core-js-stable/object/define-property\\\");\\n\\n_Object$defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\n\\nexports[\\\"default\\\"] = void 0;\\n\\nvar _getIterator2 = _interopRequireDefault(require(\\\"@babel/runtime-corejs3/core-js/get-iterator\\\"));\\n\\nvar _isArray = _interopRequireDefault(require(\\\"@babel/runtime-corejs3/core-js-stable/array/is-array\\\"));\\n\\nvar _getIteratorMethod2 = _interopRequireDefault(require(\\\"@babel/runtime-corejs3/core-js/get-iterator-method\\\"));\\n\\nvar _symbol = _interopRequireDefault(require(\\\"@babel/runtime-corejs3/core-js-stable/symbol\\\"));\\n\\nvar _from = _interopRequireDefault(require(\\\"@babel/runtime-corejs3/core-js-stable/array/from\\\"));\\n\\nvar _concat = _interopRequireDefault(require(\\\"@babel/runtime-corejs3/core-js-stable/instance/concat\\\"));\\n\\nvar _indexOf = _interopRequireDefault(require(\\\"@babel/runtime-corejs3/core-js-stable/instance/index-of\\\"));\\n\\nvar _create = _interopRequireDefault(require(\\\"@babel/runtime-corejs3/core-js-stable/object/create\\\"));\\n\\nvar _slicedToArray2 = _interopRequireDefault(require(\\\"@babel/runtime-corejs3/helpers/slicedToArray\\\"));\\n\\nvar _forEach = _interopRequireDefault(require(\\\"@babel/runtime-corejs3/core-js-stable/instance/for-each\\\"));\\n\\nvar _includes = _interopRequireDefault(require(\\\"@babel/runtime-corejs3/core-js-stable/instance/includes\\\"));\\n\\nvar _parseInt2 = _interopRequireDefault(require(\\\"@babel/runtime-corejs3/core-js-stable/parse-int\\\"));\\n\\nvar _slice = _interopRequireDefault(require(\\\"@babel/runtime-corejs3/core-js-stable/instance/slice\\\"));\\n\\nvar _sort = _interopRequireDefault(require(\\\"@babel/runtime-corejs3/core-js-stable/instance/sort\\\"));\\n\\nvar _flags = _interopRequireDefault(require(\\\"@babel/runtime-corejs3/core-js-stable/instance/flags\\\"));\\n\\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof _symbol[\\\"default\\\"] === \\\"undefined\\\" || (0, _getIteratorMethod2[\\\"default\\\"])(o) == null) { if ((0, _isArray[\\\"default\\\"])(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \\\"number\\\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\\\"Invalid attempt to iterate non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\\\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = (0, _getIterator2[\\\"default\\\"])(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\\\"return\\\"] != null) it[\\\"return\\\"](); } finally { if (didErr) throw err; } } }; }\\n\\nfunction _unsupportedIterableToArray(o, minLen) { var _context9; if (!o) return; if (typeof o === \\\"string\\\") return _arrayLikeToArray(o, minLen); var n = (0, _slice[\\\"default\\\"])(_context9 = Object.prototype.toString.call(o)).call(_context9, 8, -1); if (n === \\\"Object\\\" && o.constructor) n = o.constructor.name; if (n === \\\"Map\\\" || n === \\\"Set\\\") return (0, _from[\\\"default\\\"])(o); if (n === \\\"Arguments\\\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\\n\\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\\n\\n/*!\\n * XRegExp 4.4.1\\n * <xregexp.com>\\n * Steven Levithan (c) 2007-present MIT License\\n */\\n\\n/**\\n * XRegExp provides augmented, extensible regular expressions. You get additional regex syntax and\\n * flags, beyond what browsers support natively. XRegExp is also a regex utility belt with tools to\\n * make your client-side grepping simpler and more powerful, while freeing you from related\\n * cross-browser inconsistencies.\\n */\\n// ==--------------------------==\\n// Private stuff\\n// ==--------------------------==\\n// Property name used for extended regex instance data\\nvar REGEX_DATA = 'xregexp'; // Optional features that can be installed and uninstalled\\n\\nvar features = {\\n  astral: false,\\n  namespacing: false\\n}; // Native methods to use and restore ('native' is an ES3 reserved keyword)\\n\\nvar nativ = {\\n  exec: RegExp.prototype.exec,\\n  test: RegExp.prototype.test,\\n  match: String.prototype.match,\\n  replace: String.prototype.replace,\\n  split: String.prototype.split\\n}; // Storage for fixed/extended native methods\\n\\nvar fixed = {}; // Storage for regexes cached by `XRegExp.cache`\\n\\nvar regexCache = {}; // Storage for pattern details cached by the `XRegExp` constructor\\n\\nvar patternCache = {}; // Storage for regex syntax tokens added internally or by `XRegExp.addToken`\\n\\nvar tokens = []; // Token scopes\\n\\nvar defaultScope = 'default';\\nvar classScope = 'class'; // Regexes that match native regex syntax, including octals\\n\\nvar nativeTokens = {\\n  // Any native multicharacter token in default scope, or any single character\\n  'default': /\\\\\\\\(?:0(?:[0-3][0-7]{0,2}|[4-7][0-7]?)?|[1-9]\\\\d*|x[\\\\dA-Fa-f]{2}|u(?:[\\\\dA-Fa-f]{4}|{[\\\\dA-Fa-f]+})|c[A-Za-z]|[\\\\s\\\\S])|\\\\(\\\\?(?:[:=!]|<[=!])|[?*+]\\\\?|{\\\\d+(?:,\\\\d*)?}\\\\??|[\\\\s\\\\S]/,\\n  // Any native multicharacter token in character class scope, or any single character\\n  'class': /\\\\\\\\(?:[0-3][0-7]{0,2}|[4-7][0-7]?|x[\\\\dA-Fa-f]{2}|u(?:[\\\\dA-Fa-f]{4}|{[\\\\dA-Fa-f]+})|c[A-Za-z]|[\\\\s\\\\S])|[\\\\s\\\\S]/\\n}; // Any backreference or dollar-prefixed character in replacement strings\\n\\nvar replacementToken = /\\\\$(?:{([\\\\w$]+)}|<([\\\\w$]+)>|(\\\\d\\\\d?|[\\\\s\\\\S]))/g; // Check for correct `exec` handling of nonparticipating capturing groups\\n\\nvar correctExecNpcg = nativ.exec.call(/()??/, '')[1] === undefined; // Check for ES6 `flags` prop support\\n\\nvar hasFlagsProp = (0, _flags[\\\"default\\\"])(/x/) !== undefined; // Shortcut to `Object.prototype.toString`\\n\\nvar _ref = {},\\n    toString = _ref.toString;\\n\\nfunction hasNativeFlag(flag) {\\n  // Can't check based on the presence of properties/getters since browsers might support such\\n  // properties even when they don't support the corresponding flag in regex construction (tested\\n  // in Chrome 48, where `'unicode' in /x/` is true but trying to construct a regex with flag `u`\\n  // throws an error)\\n  var isSupported = true;\\n\\n  try {\\n    // Can't use regex literals for testing even in a `try` because regex literals with\\n    // unsupported flags cause a compilation error in IE\\n    new RegExp('', flag); // Work around a broken/incomplete IE11 polyfill for sticky introduced in core-js 3.6.0\\n\\n    if (flag === 'y') {\\n      // Using function to avoid babel transform to regex literal\\n      var gy = function () {\\n        return 'gy';\\n      }();\\n\\n      var incompleteY = '.a'.replace(new RegExp('a', gy), '.') === '..';\\n\\n      if (incompleteY) {\\n        isSupported = false;\\n      }\\n    }\\n  } catch (exception) {\\n    isSupported = false;\\n  }\\n\\n  return isSupported;\\n} // Check for ES6 `u` flag support\\n\\n\\nvar hasNativeU = hasNativeFlag('u'); // Check for ES6 `y` flag support\\n\\nvar hasNativeY = hasNativeFlag('y'); // Tracker for known flags, including addon flags\\n\\nvar registeredFlags = {\\n  g: true,\\n  i: true,\\n  m: true,\\n  u: hasNativeU,\\n  y: hasNativeY\\n};\\n/**\\n * Attaches extended data and `XRegExp.prototype` properties to a regex object.\\n *\\n * @private\\n * @param {RegExp} regex Regex to augment.\\n * @param {Array} captureNames Array with capture names, or `null`.\\n * @param {String} xSource XRegExp pattern used to generate `regex`, or `null` if N/A.\\n * @param {String} xFlags XRegExp flags used to generate `regex`, or `null` if N/A.\\n * @param {Boolean} [isInternalOnly=false] Whether the regex will be used only for internal\\n *   operations, and never exposed to users. For internal-only regexes, we can improve perf by\\n *   skipping some operations like attaching `XRegExp.prototype` properties.\\n * @returns {!RegExp} Augmented regex.\\n */\\n\\nfunction augment(regex, captureNames, xSource, xFlags, isInternalOnly) {\\n  var _context;\\n\\n  regex[REGEX_DATA] = {\\n    captureNames: captureNames\\n  };\\n\\n  if (isInternalOnly) {\\n    return regex;\\n  } // Can't auto-inherit these since the XRegExp constructor returns a nonprimitive value\\n\\n\\n  if (regex.__proto__) {\\n    regex.__proto__ = XRegExp.prototype;\\n  } else {\\n    for (var p in XRegExp.prototype) {\\n      // An `XRegExp.prototype.hasOwnProperty(p)` check wouldn't be worth it here, since this\\n      // is performance sensitive, and enumerable `Object.prototype` or `RegExp.prototype`\\n      // extensions exist on `regex.prototype` anyway\\n      regex[p] = XRegExp.prototype[p];\\n    }\\n  }\\n\\n  regex[REGEX_DATA].source = xSource; // Emulate the ES6 `flags` prop by ensuring flags are in alphabetical order\\n\\n  regex[REGEX_DATA].flags = xFlags ? (0, _sort[\\\"default\\\"])(_context = xFlags.split('')).call(_context).join('') : xFlags;\\n  return regex;\\n}\\n/**\\n * Removes any duplicate characters from the provided string.\\n *\\n * @private\\n * @param {String} str String to remove duplicate characters from.\\n * @returns {string} String with any duplicate characters removed.\\n */\\n\\n\\nfunction clipDuplicates(str) {\\n  return nativ.replace.call(str, /([\\\\s\\\\S])(?=[\\\\s\\\\S]*\\\\1)/g, '');\\n}\\n/**\\n * Copies a regex object while preserving extended data and augmenting with `XRegExp.prototype`\\n * properties. The copy has a fresh `lastIndex` property (set to zero). Allows adding and removing\\n * flags g and y while copying the regex.\\n *\\n * @private\\n * @param {RegExp} regex Regex to copy.\\n * @param {Object} [options] Options object with optional properties:\\n *   - `addG` {Boolean} Add flag g while copying the regex.\\n *   - `addY` {Boolean} Add flag y while copying the regex.\\n *   - `removeG` {Boolean} Remove flag g while copying the regex.\\n *   - `removeY` {Boolean} Remove flag y while copying the regex.\\n *   - `isInternalOnly` {Boolean} Whether the copied regex will be used only for internal\\n *     operations, and never exposed to users. For internal-only regexes, we can improve perf by\\n *     skipping some operations like attaching `XRegExp.prototype` properties.\\n *   - `source` {String} Overrides `<regex>.source`, for special cases.\\n * @returns {RegExp} Copy of the provided regex, possibly with modified flags.\\n */\\n\\n\\nfunction copyRegex(regex, options) {\\n  var _context2;\\n\\n  if (!XRegExp.isRegExp(regex)) {\\n    throw new TypeError('Type RegExp expected');\\n  }\\n\\n  var xData = regex[REGEX_DATA] || {};\\n  var flags = getNativeFlags(regex);\\n  var flagsToAdd = '';\\n  var flagsToRemove = '';\\n  var xregexpSource = null;\\n  var xregexpFlags = null;\\n  options = options || {};\\n\\n  if (options.removeG) {\\n    flagsToRemove += 'g';\\n  }\\n\\n  if (options.removeY) {\\n    flagsToRemove += 'y';\\n  }\\n\\n  if (flagsToRemove) {\\n    flags = nativ.replace.call(flags, new RegExp(\\\"[\\\".concat(flagsToRemove, \\\"]+\\\"), 'g'), '');\\n  }\\n\\n  if (options.addG) {\\n    flagsToAdd += 'g';\\n  }\\n\\n  if (options.addY) {\\n    flagsToAdd += 'y';\\n  }\\n\\n  if (flagsToAdd) {\\n    flags = clipDuplicates(flags + flagsToAdd);\\n  }\\n\\n  if (!options.isInternalOnly) {\\n    if (xData.source !== undefined) {\\n      xregexpSource = xData.source;\\n    } // null or undefined; don't want to add to `flags` if the previous value was null, since\\n    // that indicates we're not tracking original precompilation flags\\n\\n\\n    if ((0, _flags[\\\"default\\\"])(xData) != null) {\\n      // Flags are only added for non-internal regexes by `XRegExp.globalize`. Flags are never\\n      // removed for non-internal regexes, so don't need to handle it\\n      xregexpFlags = flagsToAdd ? clipDuplicates((0, _flags[\\\"default\\\"])(xData) + flagsToAdd) : (0, _flags[\\\"default\\\"])(xData);\\n    }\\n  } // Augment with `XRegExp.prototype` properties, but use the native `RegExp` constructor to avoid\\n  // searching for special tokens. That would be wrong for regexes constructed by `RegExp`, and\\n  // unnecessary for regexes constructed by `XRegExp` because the regex has already undergone the\\n  // translation to native regex syntax\\n\\n\\n  regex = augment(new RegExp(options.source || regex.source, flags), hasNamedCapture(regex) ? (0, _slice[\\\"default\\\"])(_context2 = xData.captureNames).call(_context2, 0) : null, xregexpSource, xregexpFlags, options.isInternalOnly);\\n  return regex;\\n}\\n/**\\n * Converts hexadecimal to decimal.\\n *\\n * @private\\n * @param {String} hex\\n * @returns {number}\\n */\\n\\n\\nfunction dec(hex) {\\n  return (0, _parseInt2[\\\"default\\\"])(hex, 16);\\n}\\n/**\\n * Returns a pattern that can be used in a native RegExp in place of an ignorable token such as an\\n * inline comment or whitespace with flag x. This is used directly as a token handler function\\n * passed to `XRegExp.addToken`.\\n *\\n * @private\\n * @param {String} match Match arg of `XRegExp.addToken` handler\\n * @param {String} scope Scope arg of `XRegExp.addToken` handler\\n * @param {String} flags Flags arg of `XRegExp.addToken` handler\\n * @returns {string} Either '' or '(?:)', depending on which is needed in the context of the match.\\n */\\n\\n\\nfunction getContextualTokenSeparator(match, scope, flags) {\\n  if ( // No need to separate tokens if at the beginning or end of a group\\n  match.input[match.index - 1] === '(' || match.input[match.index + match[0].length] === ')' || // No need to separate tokens if before or after a `|`\\n  match.input[match.index - 1] === '|' || match.input[match.index + match[0].length] === '|' || // No need to separate tokens if at the beginning or end of the pattern\\n  match.index < 1 || match.index + match[0].length >= match.input.length || // No need to separate tokens if at the beginning of a noncapturing group or lookahead.\\n  // The way this is written relies on:\\n  // - The search regex matching only 3-char strings.\\n  // - Although `substr` gives chars from the end of the string if given a negative index,\\n  //   the resulting substring will be too short to match. Ex: `'abcd'.substr(-1, 3) === 'd'`\\n  nativ.test.call(/^\\\\(\\\\?[:=!]/, match.input.substr(match.index - 3, 3)) || // Avoid separating tokens when the following token is a quantifier\\n  isQuantifierNext(match.input, match.index + match[0].length, flags)) {\\n    return '';\\n  } // Keep tokens separated. This avoids e.g. inadvertedly changing `\\\\1 1` or `\\\\1(?#)1` to `\\\\11`.\\n  // This also ensures all tokens remain as discrete atoms, e.g. it avoids converting the syntax\\n  // error `(? :` into `(?:`.\\n\\n\\n  return '(?:)';\\n}\\n/**\\n * Returns native `RegExp` flags used by a regex object.\\n *\\n * @private\\n * @param {RegExp} regex Regex to check.\\n * @returns {string} Native flags in use.\\n */\\n\\n\\nfunction getNativeFlags(regex) {\\n  return hasFlagsProp ? (0, _flags[\\\"default\\\"])(regex) : // Explicitly using `RegExp.prototype.toString` (rather than e.g. `String` or concatenation\\n  // with an empty string) allows this to continue working predictably when\\n  // `XRegExp.proptotype.toString` is overridden\\n  nativ.exec.call(/\\\\/([a-z]*)$/i, RegExp.prototype.toString.call(regex))[1];\\n}\\n/**\\n * Determines whether a regex has extended instance data used to track capture names.\\n *\\n * @private\\n * @param {RegExp} regex Regex to check.\\n * @returns {boolean} Whether the regex uses named capture.\\n */\\n\\n\\nfunction hasNamedCapture(regex) {\\n  return !!(regex[REGEX_DATA] && regex[REGEX_DATA].captureNames);\\n}\\n/**\\n * Converts decimal to hexadecimal.\\n *\\n * @private\\n * @param {Number|String} dec\\n * @returns {string}\\n */\\n\\n\\nfunction hex(dec) {\\n  return (0, _parseInt2[\\\"default\\\"])(dec, 10).toString(16);\\n}\\n/**\\n * Checks whether the next nonignorable token after the specified position is a quantifier.\\n *\\n * @private\\n * @param {String} pattern Pattern to search within.\\n * @param {Number} pos Index in `pattern` to search at.\\n * @param {String} flags Flags used by the pattern.\\n * @returns {Boolean} Whether the next nonignorable token is a quantifier.\\n */\\n\\n\\nfunction isQuantifierNext(pattern, pos, flags) {\\n  var inlineCommentPattern = '\\\\\\\\(\\\\\\\\?#[^)]*\\\\\\\\)';\\n  var lineCommentPattern = '#[^#\\\\\\\\n]*';\\n  var quantifierPattern = '[?*+]|{\\\\\\\\d+(?:,\\\\\\\\d*)?}';\\n  return nativ.test.call((0, _includes[\\\"default\\\"])(flags).call(flags, 'x') ? // Ignore any leading whitespace, line comments, and inline comments\\n  /^(?:\\\\s|#[^#\\\\n]*|\\\\(\\\\?#[^)]*\\\\))*(?:[?*+]|{\\\\d+(?:,\\\\d*)?})/ : // Ignore any leading inline comments\\n  /^(?:\\\\(\\\\?#[^)]*\\\\))*(?:[?*+]|{\\\\d+(?:,\\\\d*)?})/, (0, _slice[\\\"default\\\"])(pattern).call(pattern, pos));\\n}\\n/**\\n * Determines whether a value is of the specified type, by resolving its internal [[Class]].\\n *\\n * @private\\n * @param {*} value Object to check.\\n * @param {String} type Type to check for, in TitleCase.\\n * @returns {boolean} Whether the object matches the type.\\n */\\n\\n\\nfunction isType(value, type) {\\n  return toString.call(value) === \\\"[object \\\".concat(type, \\\"]\\\");\\n}\\n/**\\n * Adds leading zeros if shorter than four characters. Used for fixed-length hexadecimal values.\\n *\\n * @private\\n * @param {String} str\\n * @returns {string}\\n */\\n\\n\\nfunction pad4(str) {\\n  while (str.length < 4) {\\n    str = \\\"0\\\".concat(str);\\n  }\\n\\n  return str;\\n}\\n/**\\n * Checks for flag-related errors, and strips/applies flags in a leading mode modifier. Offloads\\n * the flag preparation logic from the `XRegExp` constructor.\\n *\\n * @private\\n * @param {String} pattern Regex pattern, possibly with a leading mode modifier.\\n * @param {String} flags Any combination of flags.\\n * @returns {!Object} Object with properties `pattern` and `flags`.\\n */\\n\\n\\nfunction prepareFlags(pattern, flags) {\\n  // Recent browsers throw on duplicate flags, so copy this behavior for nonnative flags\\n  if (clipDuplicates(flags) !== flags) {\\n    throw new SyntaxError(\\\"Invalid duplicate regex flag \\\".concat(flags));\\n  } // Strip and apply a leading mode modifier with any combination of flags except g or y\\n\\n\\n  pattern = nativ.replace.call(pattern, /^\\\\(\\\\?([\\\\w$]+)\\\\)/, function ($0, $1) {\\n    if (nativ.test.call(/[gy]/, $1)) {\\n      throw new SyntaxError(\\\"Cannot use flag g or y in mode modifier \\\".concat($0));\\n    } // Allow duplicate flags within the mode modifier\\n\\n\\n    flags = clipDuplicates(flags + $1);\\n    return '';\\n  }); // Throw on unknown native or nonnative flags\\n\\n  var _iterator = _createForOfIteratorHelper(flags),\\n      _step;\\n\\n  try {\\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\\n      var flag = _step.value;\\n\\n      if (!registeredFlags[flag]) {\\n        throw new SyntaxError(\\\"Unknown regex flag \\\".concat(flag));\\n      }\\n    }\\n  } catch (err) {\\n    _iterator.e(err);\\n  } finally {\\n    _iterator.f();\\n  }\\n\\n  return {\\n    pattern: pattern,\\n    flags: flags\\n  };\\n}\\n/**\\n * Prepares an options object from the given value.\\n *\\n * @private\\n * @param {String|Object} value Value to convert to an options object.\\n * @returns {Object} Options object.\\n */\\n\\n\\nfunction prepareOptions(value) {\\n  var options = {};\\n\\n  if (isType(value, 'String')) {\\n    (0, _forEach[\\\"default\\\"])(XRegExp).call(XRegExp, value, /[^\\\\s,]+/, function (match) {\\n      options[match] = true;\\n    });\\n    return options;\\n  }\\n\\n  return value;\\n}\\n/**\\n * Registers a flag so it doesn't throw an 'unknown flag' error.\\n *\\n * @private\\n * @param {String} flag Single-character flag to register.\\n */\\n\\n\\nfunction registerFlag(flag) {\\n  if (!/^[\\\\w$]$/.test(flag)) {\\n    throw new Error('Flag must be a single character A-Za-z0-9_$');\\n  }\\n\\n  registeredFlags[flag] = true;\\n}\\n/**\\n * Runs built-in and custom regex syntax tokens in reverse insertion order at the specified\\n * position, until a match is found.\\n *\\n * @private\\n * @param {String} pattern Original pattern from which an XRegExp object is being built.\\n * @param {String} flags Flags being used to construct the regex.\\n * @param {Number} pos Position to search for tokens within `pattern`.\\n * @param {Number} scope Regex scope to apply: 'default' or 'class'.\\n * @param {Object} context Context object to use for token handler functions.\\n * @returns {Object} Object with properties `matchLength`, `output`, and `reparse`; or `null`.\\n */\\n\\n\\nfunction runTokens(pattern, flags, pos, scope, context) {\\n  var i = tokens.length;\\n  var leadChar = pattern[pos];\\n  var result = null;\\n  var match;\\n  var t; // Run in reverse insertion order\\n\\n  while (i--) {\\n    t = tokens[i];\\n\\n    if (t.leadChar && t.leadChar !== leadChar || t.scope !== scope && t.scope !== 'all' || t.flag && !(0, _includes[\\\"default\\\"])(flags).call(flags, t.flag)) {\\n      continue;\\n    }\\n\\n    match = XRegExp.exec(pattern, t.regex, pos, 'sticky');\\n\\n    if (match) {\\n      result = {\\n        matchLength: match[0].length,\\n        output: t.handler.call(context, match, scope, flags),\\n        reparse: t.reparse\\n      }; // Finished with token tests\\n\\n      break;\\n    }\\n  }\\n\\n  return result;\\n}\\n/**\\n * Enables or disables implicit astral mode opt-in. When enabled, flag A is automatically added to\\n * all new regexes created by XRegExp. This causes an error to be thrown when creating regexes if\\n * the Unicode Base addon is not available, since flag A is registered by that addon.\\n *\\n * @private\\n * @param {Boolean} on `true` to enable; `false` to disable.\\n */\\n\\n\\nfunction setAstral(on) {\\n  features.astral = on;\\n}\\n/**\\n * Adds named capture groups to the `groups` property of match arrays. See here for details:\\n * https://github.com/tc39/proposal-regexp-named-groups\\n *\\n * @private\\n * @param {Boolean} on `true` to enable; `false` to disable.\\n */\\n\\n\\nfunction setNamespacing(on) {\\n  features.namespacing = on;\\n}\\n/**\\n * Returns the object, or throws an error if it is `null` or `undefined`. This is used to follow\\n * the ES5 abstract operation `ToObject`.\\n *\\n * @private\\n * @param {*} value Object to check and return.\\n * @returns {*} The provided object.\\n */\\n\\n\\nfunction toObject(value) {\\n  // null or undefined\\n  if (value == null) {\\n    throw new TypeError('Cannot convert null or undefined to object');\\n  }\\n\\n  return value;\\n} // ==--------------------------==\\n// Constructor\\n// ==--------------------------==\\n\\n/**\\n * Creates an extended regular expression object for matching text with a pattern. Differs from a\\n * native regular expression in that additional syntax and flags are supported. The returned object\\n * is in fact a native `RegExp` and works with all native methods.\\n *\\n * @class XRegExp\\n * @constructor\\n * @param {String|RegExp} pattern Regex pattern string, or an existing regex object to copy.\\n * @param {String} [flags] Any combination of flags.\\n *   Native flags:\\n *     - `g` - global\\n *     - `i` - ignore case\\n *     - `m` - multiline anchors\\n *     - `u` - unicode (ES6)\\n *     - `y` - sticky (Firefox 3+, ES6)\\n *   Additional XRegExp flags:\\n *     - `n` - explicit capture\\n *     - `s` - dot matches all (aka singleline)\\n *     - `x` - free-spacing and line comments (aka extended)\\n *     - `A` - astral (requires the Unicode Base addon)\\n *   Flags cannot be provided when constructing one `RegExp` from another.\\n * @returns {RegExp} Extended regular expression object.\\n * @example\\n *\\n * // With named capture and flag x\\n * XRegExp(`(?<year>  [0-9]{4} ) -?  # year\\n *          (?<month> [0-9]{2} ) -?  # month\\n *          (?<day>   [0-9]{2} )     # day`, 'x');\\n *\\n * // Providing a regex object copies it. Native regexes are recompiled using native (not XRegExp)\\n * // syntax. Copies maintain extended data, are augmented with `XRegExp.prototype` properties, and\\n * // have fresh `lastIndex` properties (set to zero).\\n * XRegExp(/regex/);\\n */\\n\\n\\nfunction XRegExp(pattern, flags) {\\n  if (XRegExp.isRegExp(pattern)) {\\n    if (flags !== undefined) {\\n      throw new TypeError('Cannot supply flags when copying a RegExp');\\n    }\\n\\n    return copyRegex(pattern);\\n  } // Copy the argument behavior of `RegExp`\\n\\n\\n  pattern = pattern === undefined ? '' : String(pattern);\\n  flags = flags === undefined ? '' : String(flags);\\n\\n  if (XRegExp.isInstalled('astral') && !(0, _includes[\\\"default\\\"])(flags).call(flags, 'A')) {\\n    // This causes an error to be thrown if the Unicode Base addon is not available\\n    flags += 'A';\\n  }\\n\\n  if (!patternCache[pattern]) {\\n    patternCache[pattern] = {};\\n  }\\n\\n  if (!patternCache[pattern][flags]) {\\n    var context = {\\n      hasNamedCapture: false,\\n      captureNames: []\\n    };\\n    var scope = defaultScope;\\n    var output = '';\\n    var pos = 0;\\n    var result; // Check for flag-related errors, and strip/apply flags in a leading mode modifier\\n\\n    var applied = prepareFlags(pattern, flags);\\n    var appliedPattern = applied.pattern;\\n    var appliedFlags = (0, _flags[\\\"default\\\"])(applied); // Use XRegExp's tokens to translate the pattern to a native regex pattern.\\n    // `appliedPattern.length` may change on each iteration if tokens use `reparse`\\n\\n    while (pos < appliedPattern.length) {\\n      do {\\n        // Check for custom tokens at the current position\\n        result = runTokens(appliedPattern, appliedFlags, pos, scope, context); // If the matched token used the `reparse` option, splice its output into the\\n        // pattern before running tokens again at the same position\\n\\n        if (result && result.reparse) {\\n          appliedPattern = (0, _slice[\\\"default\\\"])(appliedPattern).call(appliedPattern, 0, pos) + result.output + (0, _slice[\\\"default\\\"])(appliedPattern).call(appliedPattern, pos + result.matchLength);\\n        }\\n      } while (result && result.reparse);\\n\\n      if (result) {\\n        output += result.output;\\n        pos += result.matchLength || 1;\\n      } else {\\n        // Get the native token at the current position\\n        var _XRegExp$exec = XRegExp.exec(appliedPattern, nativeTokens[scope], pos, 'sticky'),\\n            _XRegExp$exec2 = (0, _slicedToArray2[\\\"default\\\"])(_XRegExp$exec, 1),\\n            token = _XRegExp$exec2[0];\\n\\n        output += token;\\n        pos += token.length;\\n\\n        if (token === '[' && scope === defaultScope) {\\n          scope = classScope;\\n        } else if (token === ']' && scope === classScope) {\\n          scope = defaultScope;\\n        }\\n      }\\n    }\\n\\n    patternCache[pattern][flags] = {\\n      // Use basic cleanup to collapse repeated empty groups like `(?:)(?:)` to `(?:)`. Empty\\n      // groups are sometimes inserted during regex transpilation in order to keep tokens\\n      // separated. However, more than one empty group in a row is never needed.\\n      pattern: nativ.replace.call(output, /(?:\\\\(\\\\?:\\\\))+/g, '(?:)'),\\n      // Strip all but native flags\\n      flags: nativ.replace.call(appliedFlags, /[^gimuy]+/g, ''),\\n      // `context.captureNames` has an item for each capturing group, even if unnamed\\n      captures: context.hasNamedCapture ? context.captureNames : null\\n    };\\n  }\\n\\n  var generated = patternCache[pattern][flags];\\n  return augment(new RegExp(generated.pattern, (0, _flags[\\\"default\\\"])(generated)), generated.captures, pattern, flags);\\n} // Add `RegExp.prototype` to the prototype chain\\n\\n\\nXRegExp.prototype = /(?:)/; // ==--------------------------==\\n// Public properties\\n// ==--------------------------==\\n\\n/**\\n * The XRegExp version number as a string containing three dot-separated parts. For example,\\n * '2.0.0-beta-3'.\\n *\\n * @static\\n * @memberOf XRegExp\\n * @type String\\n */\\n\\nXRegExp.version = '4.4.1'; // ==--------------------------==\\n// Public methods\\n// ==--------------------------==\\n// Intentionally undocumented; used in tests and addons\\n\\nXRegExp._clipDuplicates = clipDuplicates;\\nXRegExp._hasNativeFlag = hasNativeFlag;\\nXRegExp._dec = dec;\\nXRegExp._hex = hex;\\nXRegExp._pad4 = pad4;\\n/**\\n * Extends XRegExp syntax and allows custom flags. This is used internally and can be used to\\n * create XRegExp addons. If more than one token can match the same string, the last added wins.\\n *\\n * @memberOf XRegExp\\n * @param {RegExp} regex Regex object that matches the new token.\\n * @param {Function} handler Function that returns a new pattern string (using native regex syntax)\\n *   to replace the matched token within all future XRegExp regexes. Has access to persistent\\n *   properties of the regex being built, through `this`. Invoked with three arguments:\\n *   - The match array, with named backreference properties.\\n *   - The regex scope where the match was found: 'default' or 'class'.\\n *   - The flags used by the regex, including any flags in a leading mode modifier.\\n *   The handler function becomes part of the XRegExp construction process, so be careful not to\\n *   construct XRegExps within the function or you will trigger infinite recursion.\\n * @param {Object} [options] Options object with optional properties:\\n *   - `scope` {String} Scope where the token applies: 'default', 'class', or 'all'.\\n *   - `flag` {String} Single-character flag that triggers the token. This also registers the\\n *     flag, which prevents XRegExp from throwing an 'unknown flag' error when the flag is used.\\n *   - `optionalFlags` {String} Any custom flags checked for within the token `handler` that are\\n *     not required to trigger the token. This registers the flags, to prevent XRegExp from\\n *     throwing an 'unknown flag' error when any of the flags are used.\\n *   - `reparse` {Boolean} Whether the `handler` function's output should not be treated as\\n *     final, and instead be reparseable by other tokens (including the current token). Allows\\n *     token chaining or deferring.\\n *   - `leadChar` {String} Single character that occurs at the beginning of any successful match\\n *     of the token (not always applicable). This doesn't change the behavior of the token unless\\n *     you provide an erroneous value. However, providing it can increase the token's performance\\n *     since the token can be skipped at any positions where this character doesn't appear.\\n * @example\\n *\\n * // Basic usage: Add \\\\a for the ALERT control code\\n * XRegExp.addToken(\\n *   /\\\\\\\\a/,\\n *   () => '\\\\\\\\x07',\\n *   {scope: 'all'}\\n * );\\n * XRegExp('\\\\\\\\a[\\\\\\\\a-\\\\\\\\n]+').test('\\\\x07\\\\n\\\\x07'); // -> true\\n *\\n * // Add the U (ungreedy) flag from PCRE and RE2, which reverses greedy and lazy quantifiers.\\n * // Since `scope` is not specified, it uses 'default' (i.e., transformations apply outside of\\n * // character classes only)\\n * XRegExp.addToken(\\n *   /([?*+]|{\\\\d+(?:,\\\\d*)?})(\\\\??)/,\\n *   (match) => `${match[1]}${match[2] ? '' : '?'}`,\\n *   {flag: 'U'}\\n * );\\n * XRegExp('a+', 'U').exec('aaa')[0]; // -> 'a'\\n * XRegExp('a+?', 'U').exec('aaa')[0]; // -> 'aaa'\\n */\\n\\nXRegExp.addToken = function (regex, handler, options) {\\n  options = options || {};\\n  var _options = options,\\n      optionalFlags = _options.optionalFlags;\\n\\n  if (options.flag) {\\n    registerFlag(options.flag);\\n  }\\n\\n  if (optionalFlags) {\\n    optionalFlags = nativ.split.call(optionalFlags, '');\\n\\n    var _iterator2 = _createForOfIteratorHelper(optionalFlags),\\n        _step2;\\n\\n    try {\\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\\n        var flag = _step2.value;\\n        registerFlag(flag);\\n      }\\n    } catch (err) {\\n      _iterator2.e(err);\\n    } finally {\\n      _iterator2.f();\\n    }\\n  } // Add to the private list of syntax tokens\\n\\n\\n  tokens.push({\\n    regex: copyRegex(regex, {\\n      addG: true,\\n      addY: hasNativeY,\\n      isInternalOnly: true\\n    }),\\n    handler: handler,\\n    scope: options.scope || defaultScope,\\n    flag: options.flag,\\n    reparse: options.reparse,\\n    leadChar: options.leadChar\\n  }); // Reset the pattern cache used by the `XRegExp` constructor, since the same pattern and flags\\n  // might now produce different results\\n\\n  XRegExp.cache.flush('patterns');\\n};\\n/**\\n * Caches and returns the result of calling `XRegExp(pattern, flags)`. On any subsequent call with\\n * the same pattern and flag combination, the cached copy of the regex is returned.\\n *\\n * @memberOf XRegExp\\n * @param {String} pattern Regex pattern string.\\n * @param {String} [flags] Any combination of XRegExp flags.\\n * @returns {RegExp} Cached XRegExp object.\\n * @example\\n *\\n * while (match = XRegExp.cache('.', 'gs').exec(str)) {\\n *   // The regex is compiled once only\\n * }\\n */\\n\\n\\nXRegExp.cache = function (pattern, flags) {\\n  if (!regexCache[pattern]) {\\n    regexCache[pattern] = {};\\n  }\\n\\n  return regexCache[pattern][flags] || (regexCache[pattern][flags] = XRegExp(pattern, flags));\\n}; // Intentionally undocumented; used in tests\\n\\n\\nXRegExp.cache.flush = function (cacheName) {\\n  if (cacheName === 'patterns') {\\n    // Flush the pattern cache used by the `XRegExp` constructor\\n    patternCache = {};\\n  } else {\\n    // Flush the regex cache populated by `XRegExp.cache`\\n    regexCache = {};\\n  }\\n};\\n/**\\n * Escapes any regular expression metacharacters, for use when matching literal strings. The result\\n * can safely be used at any point within a regex that uses any flags.\\n *\\n * @memberOf XRegExp\\n * @param {String} str String to escape.\\n * @returns {string} String with regex metacharacters escaped.\\n * @example\\n *\\n * XRegExp.escape('Escaped? <.>');\\n * // -> 'Escaped\\\\?\\\\ <\\\\.>'\\n */\\n\\n\\nXRegExp.escape = function (str) {\\n  return nativ.replace.call(toObject(str), /[-\\\\[\\\\]{}()*+?.,\\\\\\\\^$|#\\\\s]/g, '\\\\\\\\$&');\\n};\\n/**\\n * Executes a regex search in a specified string. Returns a match array or `null`. If the provided\\n * regex uses named capture, named backreference properties are included on the match array.\\n * Optional `pos` and `sticky` arguments specify the search start position, and whether the match\\n * must start at the specified position only. The `lastIndex` property of the provided regex is not\\n * used, but is updated for compatibility. Also fixes browser bugs compared to the native\\n * `RegExp.prototype.exec` and can be used reliably cross-browser.\\n *\\n * @memberOf XRegExp\\n * @param {String} str String to search.\\n * @param {RegExp} regex Regex to search with.\\n * @param {Number} [pos=0] Zero-based index at which to start the search.\\n * @param {Boolean|String} [sticky=false] Whether the match must start at the specified position\\n *   only. The string `'sticky'` is accepted as an alternative to `true`.\\n * @returns {Array} Match array with named backreference properties, or `null`.\\n * @example\\n *\\n * // Basic use, with named backreference\\n * let match = XRegExp.exec('U+2620', XRegExp('U\\\\\\\\+(?<hex>[0-9A-F]{4})'));\\n * match.hex; // -> '2620'\\n *\\n * // With pos and sticky, in a loop\\n * let pos = 2, result = [], match;\\n * while (match = XRegExp.exec('<1><2><3><4>5<6>', /<(\\\\d)>/, pos, 'sticky')) {\\n *   result.push(match[1]);\\n *   pos = match.index + match[0].length;\\n * }\\n * // result -> ['2', '3', '4']\\n */\\n\\n\\nXRegExp.exec = function (str, regex, pos, sticky) {\\n  var cacheKey = 'g';\\n  var addY = false;\\n  var fakeY = false;\\n  var match;\\n  addY = hasNativeY && !!(sticky || regex.sticky && sticky !== false);\\n\\n  if (addY) {\\n    cacheKey += 'y';\\n  } else if (sticky) {\\n    // Simulate sticky matching by appending an empty capture to the original regex. The\\n    // resulting regex will succeed no matter what at the current index (set with `lastIndex`),\\n    // and will not search the rest of the subject string. We'll know that the original regex\\n    // has failed if that last capture is `''` rather than `undefined` (i.e., if that last\\n    // capture participated in the match).\\n    fakeY = true;\\n    cacheKey += 'FakeY';\\n  }\\n\\n  regex[REGEX_DATA] = regex[REGEX_DATA] || {}; // Shares cached copies with `XRegExp.match`/`replace`\\n\\n  var r2 = regex[REGEX_DATA][cacheKey] || (regex[REGEX_DATA][cacheKey] = copyRegex(regex, {\\n    addG: true,\\n    addY: addY,\\n    source: fakeY ? \\\"\\\".concat(regex.source, \\\"|()\\\") : undefined,\\n    removeY: sticky === false,\\n    isInternalOnly: true\\n  }));\\n  pos = pos || 0;\\n  r2.lastIndex = pos; // Fixed `exec` required for `lastIndex` fix, named backreferences, etc.\\n\\n  match = fixed.exec.call(r2, str); // Get rid of the capture added by the pseudo-sticky matcher if needed. An empty string means\\n  // the original regexp failed (see above).\\n\\n  if (fakeY && match && match.pop() === '') {\\n    match = null;\\n  }\\n\\n  if (regex.global) {\\n    regex.lastIndex = match ? r2.lastIndex : 0;\\n  }\\n\\n  return match;\\n};\\n/**\\n * Executes a provided function once per regex match. Searches always start at the beginning of the\\n * string and continue until the end, regardless of the state of the regex's `global` property and\\n * initial `lastIndex`.\\n *\\n * @memberOf XRegExp\\n * @param {String} str String to search.\\n * @param {RegExp} regex Regex to search with.\\n * @param {Function} callback Function to execute for each match. Invoked with four arguments:\\n *   - The match array, with named backreference properties.\\n *   - The zero-based match index.\\n *   - The string being traversed.\\n *   - The regex object being used to traverse the string.\\n * @example\\n *\\n * // Extracts every other digit from a string\\n * const evens = [];\\n * XRegExp.forEach('1a2345', /\\\\d/, (match, i) => {\\n *   if (i % 2) evens.push(+match[0]);\\n * });\\n * // evens -> [2, 4]\\n */\\n\\n\\nXRegExp.forEach = function (str, regex, callback) {\\n  var pos = 0;\\n  var i = -1;\\n  var match;\\n\\n  while (match = XRegExp.exec(str, regex, pos)) {\\n    // Because `regex` is provided to `callback`, the function could use the deprecated/\\n    // nonstandard `RegExp.prototype.compile` to mutate the regex. However, since `XRegExp.exec`\\n    // doesn't use `lastIndex` to set the search position, this can't lead to an infinite loop,\\n    // at least. Actually, because of the way `XRegExp.exec` caches globalized versions of\\n    // regexes, mutating the regex will not have any effect on the iteration or matched strings,\\n    // which is a nice side effect that brings extra safety.\\n    callback(match, ++i, str, regex);\\n    pos = match.index + (match[0].length || 1);\\n  }\\n};\\n/**\\n * Copies a regex object and adds flag `g`. The copy maintains extended data, is augmented with\\n * `XRegExp.prototype` properties, and has a fresh `lastIndex` property (set to zero). Native\\n * regexes are not recompiled using XRegExp syntax.\\n *\\n * @memberOf XRegExp\\n * @param {RegExp} regex Regex to globalize.\\n * @returns {RegExp} Copy of the provided regex with flag `g` added.\\n * @example\\n *\\n * const globalCopy = XRegExp.globalize(/regex/);\\n * globalCopy.global; // -> true\\n */\\n\\n\\nXRegExp.globalize = function (regex) {\\n  return copyRegex(regex, {\\n    addG: true\\n  });\\n};\\n/**\\n * Installs optional features according to the specified options. Can be undone using\\n * `XRegExp.uninstall`.\\n *\\n * @memberOf XRegExp\\n * @param {Object|String} options Options object or string.\\n * @example\\n *\\n * // With an options object\\n * XRegExp.install({\\n *   // Enables support for astral code points in Unicode addons (implicitly sets flag A)\\n *   astral: true,\\n *\\n *   // Adds named capture groups to the `groups` property of matches\\n *   namespacing: true\\n * });\\n *\\n * // With an options string\\n * XRegExp.install('astral namespacing');\\n */\\n\\n\\nXRegExp.install = function (options) {\\n  options = prepareOptions(options);\\n\\n  if (!features.astral && options.astral) {\\n    setAstral(true);\\n  }\\n\\n  if (!features.namespacing && options.namespacing) {\\n    setNamespacing(true);\\n  }\\n};\\n/**\\n * Checks whether an individual optional feature is installed.\\n *\\n * @memberOf XRegExp\\n * @param {String} feature Name of the feature to check. One of:\\n *   - `astral`\\n *   - `namespacing`\\n * @returns {boolean} Whether the feature is installed.\\n * @example\\n *\\n * XRegExp.isInstalled('astral');\\n */\\n\\n\\nXRegExp.isInstalled = function (feature) {\\n  return !!features[feature];\\n};\\n/**\\n * Returns `true` if an object is a regex; `false` if it isn't. This works correctly for regexes\\n * created in another frame, when `instanceof` and `constructor` checks would fail.\\n *\\n * @memberOf XRegExp\\n * @param {*} value Object to check.\\n * @returns {boolean} Whether the object is a `RegExp` object.\\n * @example\\n *\\n * XRegExp.isRegExp('string'); // -> false\\n * XRegExp.isRegExp(/regex/i); // -> true\\n * XRegExp.isRegExp(RegExp('^', 'm')); // -> true\\n * XRegExp.isRegExp(XRegExp('(?s).')); // -> true\\n */\\n\\n\\nXRegExp.isRegExp = function (value) {\\n  return toString.call(value) === '[object RegExp]';\\n}; // isType(value, 'RegExp');\\n\\n/**\\n * Returns the first matched string, or in global mode, an array containing all matched strings.\\n * This is essentially a more convenient re-implementation of `String.prototype.match` that gives\\n * the result types you actually want (string instead of `exec`-style array in match-first mode,\\n * and an empty array instead of `null` when no matches are found in match-all mode). It also lets\\n * you override flag g and ignore `lastIndex`, and fixes browser bugs.\\n *\\n * @memberOf XRegExp\\n * @param {String} str String to search.\\n * @param {RegExp} regex Regex to search with.\\n * @param {String} [scope='one'] Use 'one' to return the first match as a string. Use 'all' to\\n *   return an array of all matched strings. If not explicitly specified and `regex` uses flag g,\\n *   `scope` is 'all'.\\n * @returns {String|Array} In match-first mode: First match as a string, or `null`. In match-all\\n *   mode: Array of all matched strings, or an empty array.\\n * @example\\n *\\n * // Match first\\n * XRegExp.match('abc', /\\\\w/); // -> 'a'\\n * XRegExp.match('abc', /\\\\w/g, 'one'); // -> 'a'\\n * XRegExp.match('abc', /x/g, 'one'); // -> null\\n *\\n * // Match all\\n * XRegExp.match('abc', /\\\\w/g); // -> ['a', 'b', 'c']\\n * XRegExp.match('abc', /\\\\w/, 'all'); // -> ['a', 'b', 'c']\\n * XRegExp.match('abc', /x/, 'all'); // -> []\\n */\\n\\n\\nXRegExp.match = function (str, regex, scope) {\\n  var global = regex.global && scope !== 'one' || scope === 'all';\\n  var cacheKey = (global ? 'g' : '') + (regex.sticky ? 'y' : '') || 'noGY';\\n  regex[REGEX_DATA] = regex[REGEX_DATA] || {}; // Shares cached copies with `XRegExp.exec`/`replace`\\n\\n  var r2 = regex[REGEX_DATA][cacheKey] || (regex[REGEX_DATA][cacheKey] = copyRegex(regex, {\\n    addG: !!global,\\n    removeG: scope === 'one',\\n    isInternalOnly: true\\n  }));\\n  var result = nativ.match.call(toObject(str), r2);\\n\\n  if (regex.global) {\\n    regex.lastIndex = scope === 'one' && result ? // Can't use `r2.lastIndex` since `r2` is nonglobal in this case\\n    result.index + result[0].length : 0;\\n  }\\n\\n  return global ? result || [] : result && result[0];\\n};\\n/**\\n * Retrieves the matches from searching a string using a chain of regexes that successively search\\n * within previous matches. The provided `chain` array can contain regexes and or objects with\\n * `regex` and `backref` properties. When a backreference is specified, the named or numbered\\n * backreference is passed forward to the next regex or returned.\\n *\\n * @memberOf XRegExp\\n * @param {String} str String to search.\\n * @param {Array} chain Regexes that each search for matches within preceding results.\\n * @returns {Array} Matches by the last regex in the chain, or an empty array.\\n * @example\\n *\\n * // Basic usage; matches numbers within <b> tags\\n * XRegExp.matchChain('1 <b>2</b> 3 <b>4 a 56</b>', [\\n *   XRegExp('(?is)<b>.*?</b>'),\\n *   /\\\\d+/\\n * ]);\\n * // -> ['2', '4', '56']\\n *\\n * // Passing forward and returning specific backreferences\\n * html = '<a href=\\\"http://xregexp.com/api/\\\">XRegExp</a>\\\\\\n *         <a href=\\\"http://www.google.com/\\\">Google</a>';\\n * XRegExp.matchChain(html, [\\n *   {regex: /<a href=\\\"([^\\\"]+)\\\">/i, backref: 1},\\n *   {regex: XRegExp('(?i)^https?://(?<domain>[^/?#]+)'), backref: 'domain'}\\n * ]);\\n * // -> ['xregexp.com', 'www.google.com']\\n */\\n\\n\\nXRegExp.matchChain = function (str, chain) {\\n  return function recurseChain(values, level) {\\n    var item = chain[level].regex ? chain[level] : {\\n      regex: chain[level]\\n    };\\n    var matches = [];\\n\\n    function addMatch(match) {\\n      if (item.backref) {\\n        var ERR_UNDEFINED_GROUP = \\\"Backreference to undefined group: \\\".concat(item.backref);\\n        var isNamedBackref = isNaN(item.backref);\\n\\n        if (isNamedBackref && XRegExp.isInstalled('namespacing')) {\\n          // `groups` has `null` as prototype, so using `in` instead of `hasOwnProperty`\\n          if (!(item.backref in match.groups)) {\\n            throw new ReferenceError(ERR_UNDEFINED_GROUP);\\n          }\\n        } else if (!match.hasOwnProperty(item.backref)) {\\n          throw new ReferenceError(ERR_UNDEFINED_GROUP);\\n        }\\n\\n        var backrefValue = isNamedBackref && XRegExp.isInstalled('namespacing') ? match.groups[item.backref] : match[item.backref];\\n        matches.push(backrefValue || '');\\n      } else {\\n        matches.push(match[0]);\\n      }\\n    }\\n\\n    var _iterator3 = _createForOfIteratorHelper(values),\\n        _step3;\\n\\n    try {\\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\\n        var value = _step3.value;\\n        (0, _forEach[\\\"default\\\"])(XRegExp).call(XRegExp, value, item.regex, addMatch);\\n      }\\n    } catch (err) {\\n      _iterator3.e(err);\\n    } finally {\\n      _iterator3.f();\\n    }\\n\\n    return level === chain.length - 1 || !matches.length ? matches : recurseChain(matches, level + 1);\\n  }([str], 0);\\n};\\n/**\\n * Returns a new string with one or all matches of a pattern replaced. The pattern can be a string\\n * or regex, and the replacement can be a string or a function to be called for each match. To\\n * perform a global search and replace, use the optional `scope` argument or include flag g if using\\n * a regex. Replacement strings can use `${n}` or `$<n>` for named and numbered backreferences.\\n * Replacement functions can use named backreferences via `arguments[0].name`. Also fixes browser\\n * bugs compared to the native `String.prototype.replace` and can be used reliably cross-browser.\\n *\\n * @memberOf XRegExp\\n * @param {String} str String to search.\\n * @param {RegExp|String} search Search pattern to be replaced.\\n * @param {String|Function} replacement Replacement string or a function invoked to create it.\\n *   Replacement strings can include special replacement syntax:\\n *     - $$ - Inserts a literal $ character.\\n *     - $&, $0 - Inserts the matched substring.\\n *     - $` - Inserts the string that precedes the matched substring (left context).\\n *     - $' - Inserts the string that follows the matched substring (right context).\\n *     - $n, $nn - Where n/nn are digits referencing an existent capturing group, inserts\\n *       backreference n/nn.\\n *     - ${n}, $<n> - Where n is a name or any number of digits that reference an existent capturing\\n *       group, inserts backreference n.\\n *   Replacement functions are invoked with three or more arguments:\\n *     - The matched substring (corresponds to $& above). Named backreferences are accessible as\\n *       properties of this first argument.\\n *     - 0..n arguments, one for each backreference (corresponding to $1, $2, etc. above).\\n *     - The zero-based index of the match within the total search string.\\n *     - The total string being searched.\\n * @param {String} [scope='one'] Use 'one' to replace the first match only, or 'all'. If not\\n *   explicitly specified and using a regex with flag g, `scope` is 'all'.\\n * @returns {String} New string with one or all matches replaced.\\n * @example\\n *\\n * // Regex search, using named backreferences in replacement string\\n * const name = XRegExp('(?<first>\\\\\\\\w+) (?<last>\\\\\\\\w+)');\\n * XRegExp.replace('John Smith', name, '$<last>, $<first>');\\n * // -> 'Smith, John'\\n *\\n * // Regex search, using named backreferences in replacement function\\n * XRegExp.replace('John Smith', name, (match) => `${match.last}, ${match.first}`);\\n * // -> 'Smith, John'\\n *\\n * // String search, with replace-all\\n * XRegExp.replace('RegExp builds RegExps', 'RegExp', 'XRegExp', 'all');\\n * // -> 'XRegExp builds XRegExps'\\n */\\n\\n\\nXRegExp.replace = function (str, search, replacement, scope) {\\n  var isRegex = XRegExp.isRegExp(search);\\n  var global = search.global && scope !== 'one' || scope === 'all';\\n  var cacheKey = (global ? 'g' : '') + (search.sticky ? 'y' : '') || 'noGY';\\n  var s2 = search;\\n\\n  if (isRegex) {\\n    search[REGEX_DATA] = search[REGEX_DATA] || {}; // Shares cached copies with `XRegExp.exec`/`match`. Since a copy is used, `search`'s\\n    // `lastIndex` isn't updated *during* replacement iterations\\n\\n    s2 = search[REGEX_DATA][cacheKey] || (search[REGEX_DATA][cacheKey] = copyRegex(search, {\\n      addG: !!global,\\n      removeG: scope === 'one',\\n      isInternalOnly: true\\n    }));\\n  } else if (global) {\\n    s2 = new RegExp(XRegExp.escape(String(search)), 'g');\\n  } // Fixed `replace` required for named backreferences, etc.\\n\\n\\n  var result = fixed.replace.call(toObject(str), s2, replacement);\\n\\n  if (isRegex && search.global) {\\n    // Fixes IE, Safari bug (last tested IE 9, Safari 5.1)\\n    search.lastIndex = 0;\\n  }\\n\\n  return result;\\n};\\n/**\\n * Performs batch processing of string replacements. Used like `XRegExp.replace`, but accepts an\\n * array of replacement details. Later replacements operate on the output of earlier replacements.\\n * Replacement details are accepted as an array with a regex or string to search for, the\\n * replacement string or function, and an optional scope of 'one' or 'all'. Uses the XRegExp\\n * replacement text syntax, which supports named backreference properties via `${name}` or\\n * `$<name>`.\\n *\\n * @memberOf XRegExp\\n * @param {String} str String to search.\\n * @param {Array} replacements Array of replacement detail arrays.\\n * @returns {String} New string with all replacements.\\n * @example\\n *\\n * str = XRegExp.replaceEach(str, [\\n *   [XRegExp('(?<name>a)'), 'z${name}'],\\n *   [/b/gi, 'y'],\\n *   [/c/g, 'x', 'one'], // scope 'one' overrides /g\\n *   [/d/, 'w', 'all'],  // scope 'all' overrides lack of /g\\n *   ['e', 'v', 'all'],  // scope 'all' allows replace-all for strings\\n *   [/f/g, ($0) => $0.toUpperCase()]\\n * ]);\\n */\\n\\n\\nXRegExp.replaceEach = function (str, replacements) {\\n  var _iterator4 = _createForOfIteratorHelper(replacements),\\n      _step4;\\n\\n  try {\\n    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\\n      var r = _step4.value;\\n      str = XRegExp.replace(str, r[0], r[1], r[2]);\\n    }\\n  } catch (err) {\\n    _iterator4.e(err);\\n  } finally {\\n    _iterator4.f();\\n  }\\n\\n  return str;\\n};\\n/**\\n * Splits a string into an array of strings using a regex or string separator. Matches of the\\n * separator are not included in the result array. However, if `separator` is a regex that contains\\n * capturing groups, backreferences are spliced into the result each time `separator` is matched.\\n * Fixes browser bugs compared to the native `String.prototype.split` and can be used reliably\\n * cross-browser.\\n *\\n * @memberOf XRegExp\\n * @param {String} str String to split.\\n * @param {RegExp|String} separator Regex or string to use for separating the string.\\n * @param {Number} [limit] Maximum number of items to include in the result array.\\n * @returns {Array} Array of substrings.\\n * @example\\n *\\n * // Basic use\\n * XRegExp.split('a b c', ' ');\\n * // -> ['a', 'b', 'c']\\n *\\n * // With limit\\n * XRegExp.split('a b c', ' ', 2);\\n * // -> ['a', 'b']\\n *\\n * // Backreferences in result array\\n * XRegExp.split('..word1..', /([a-z]+)(\\\\d+)/i);\\n * // -> ['..', 'word', '1', '..']\\n */\\n\\n\\nXRegExp.split = function (str, separator, limit) {\\n  return fixed.split.call(toObject(str), separator, limit);\\n};\\n/**\\n * Executes a regex search in a specified string. Returns `true` or `false`. Optional `pos` and\\n * `sticky` arguments specify the search start position, and whether the match must start at the\\n * specified position only. The `lastIndex` property of the provided regex is not used, but is\\n * updated for compatibility. Also fixes browser bugs compared to the native\\n * `RegExp.prototype.test` and can be used reliably cross-browser.\\n *\\n * @memberOf XRegExp\\n * @param {String} str String to search.\\n * @param {RegExp} regex Regex to search with.\\n * @param {Number} [pos=0] Zero-based index at which to start the search.\\n * @param {Boolean|String} [sticky=false] Whether the match must start at the specified position\\n *   only. The string `'sticky'` is accepted as an alternative to `true`.\\n * @returns {boolean} Whether the regex matched the provided value.\\n * @example\\n *\\n * // Basic use\\n * XRegExp.test('abc', /c/); // -> true\\n *\\n * // With pos and sticky\\n * XRegExp.test('abc', /c/, 0, 'sticky'); // -> false\\n * XRegExp.test('abc', /c/, 2, 'sticky'); // -> true\\n */\\n// Do this the easy way :-)\\n\\n\\nXRegExp.test = function (str, regex, pos, sticky) {\\n  return !!XRegExp.exec(str, regex, pos, sticky);\\n};\\n/**\\n * Uninstalls optional features according to the specified options. All optional features start out\\n * uninstalled, so this is used to undo the actions of `XRegExp.install`.\\n *\\n * @memberOf XRegExp\\n * @param {Object|String} options Options object or string.\\n * @example\\n *\\n * // With an options object\\n * XRegExp.uninstall({\\n *   // Disables support for astral code points in Unicode addons\\n *   astral: true,\\n *\\n *   // Don't add named capture groups to the `groups` property of matches\\n *   namespacing: true\\n * });\\n *\\n * // With an options string\\n * XRegExp.uninstall('astral namespacing');\\n */\\n\\n\\nXRegExp.uninstall = function (options) {\\n  options = prepareOptions(options);\\n\\n  if (features.astral && options.astral) {\\n    setAstral(false);\\n  }\\n\\n  if (features.namespacing && options.namespacing) {\\n    setNamespacing(false);\\n  }\\n};\\n/**\\n * Returns an XRegExp object that is the union of the given patterns. Patterns can be provided as\\n * regex objects or strings. Metacharacters are escaped in patterns provided as strings.\\n * Backreferences in provided regex objects are automatically renumbered to work correctly within\\n * the larger combined pattern. Native flags used by provided regexes are ignored in favor of the\\n * `flags` argument.\\n *\\n * @memberOf XRegExp\\n * @param {Array} patterns Regexes and strings to combine.\\n * @param {String} [flags] Any combination of XRegExp flags.\\n * @param {Object} [options] Options object with optional properties:\\n *   - `conjunction` {String} Type of conjunction to use: 'or' (default) or 'none'.\\n * @returns {RegExp} Union of the provided regexes and strings.\\n * @example\\n *\\n * XRegExp.union(['a+b*c', /(dogs)\\\\1/, /(cats)\\\\1/], 'i');\\n * // -> /a\\\\+b\\\\*c|(dogs)\\\\1|(cats)\\\\2/i\\n *\\n * XRegExp.union([/man/, /bear/, /pig/], 'i', {conjunction: 'none'});\\n * // -> /manbearpig/i\\n */\\n\\n\\nXRegExp.union = function (patterns, flags, options) {\\n  options = options || {};\\n  var conjunction = options.conjunction || 'or';\\n  var numCaptures = 0;\\n  var numPriorCaptures;\\n  var captureNames;\\n\\n  function rewrite(match, paren, backref) {\\n    var name = captureNames[numCaptures - numPriorCaptures]; // Capturing group\\n\\n    if (paren) {\\n      ++numCaptures; // If the current capture has a name, preserve the name\\n\\n      if (name) {\\n        return \\\"(?<\\\".concat(name, \\\">\\\");\\n      } // Backreference\\n\\n    } else if (backref) {\\n      // Rewrite the backreference\\n      return \\\"\\\\\\\\\\\".concat(+backref + numPriorCaptures);\\n    }\\n\\n    return match;\\n  }\\n\\n  if (!(isType(patterns, 'Array') && patterns.length)) {\\n    throw new TypeError('Must provide a nonempty array of patterns to merge');\\n  }\\n\\n  var parts = /(\\\\()(?!\\\\?)|\\\\\\\\([1-9]\\\\d*)|\\\\\\\\[\\\\s\\\\S]|\\\\[(?:[^\\\\\\\\\\\\]]|\\\\\\\\[\\\\s\\\\S])*\\\\]/g;\\n  var output = [];\\n\\n  var _iterator5 = _createForOfIteratorHelper(patterns),\\n      _step5;\\n\\n  try {\\n    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\\n      var pattern = _step5.value;\\n\\n      if (XRegExp.isRegExp(pattern)) {\\n        numPriorCaptures = numCaptures;\\n        captureNames = pattern[REGEX_DATA] && pattern[REGEX_DATA].captureNames || []; // Rewrite backreferences. Passing to XRegExp dies on octals and ensures patterns are\\n        // independently valid; helps keep this simple. Named captures are put back\\n\\n        output.push(nativ.replace.call(XRegExp(pattern.source).source, parts, rewrite));\\n      } else {\\n        output.push(XRegExp.escape(pattern));\\n      }\\n    }\\n  } catch (err) {\\n    _iterator5.e(err);\\n  } finally {\\n    _iterator5.f();\\n  }\\n\\n  var separator = conjunction === 'none' ? '' : '|';\\n  return XRegExp(output.join(separator), flags);\\n}; // ==--------------------------==\\n// Fixed/extended native methods\\n// ==--------------------------==\\n\\n/**\\n * Adds named capture support (with backreferences returned as `result.name`), and fixes browser\\n * bugs in the native `RegExp.prototype.exec`. Use via `XRegExp.exec`.\\n *\\n * @memberOf RegExp\\n * @param {String} str String to search.\\n * @returns {Array} Match array with named backreference properties, or `null`.\\n */\\n\\n\\nfixed.exec = function (str) {\\n  var origLastIndex = this.lastIndex;\\n  var match = nativ.exec.apply(this, arguments);\\n\\n  if (match) {\\n    // Fix browsers whose `exec` methods don't return `undefined` for nonparticipating capturing\\n    // groups. This fixes IE 5.5-8, but not IE 9's quirks mode or emulation of older IEs. IE 9\\n    // in standards mode follows the spec.\\n    if (!correctExecNpcg && match.length > 1 && (0, _includes[\\\"default\\\"])(match).call(match, '')) {\\n      var _context3;\\n\\n      var r2 = copyRegex(this, {\\n        removeG: true,\\n        isInternalOnly: true\\n      }); // Using `str.slice(match.index)` rather than `match[0]` in case lookahead allowed\\n      // matching due to characters outside the match\\n\\n      nativ.replace.call((0, _slice[\\\"default\\\"])(_context3 = String(str)).call(_context3, match.index), r2, function () {\\n        var len = arguments.length; // Skip index 0 and the last 2\\n\\n        for (var i = 1; i < len - 2; ++i) {\\n          if ((i < 0 || arguments.length <= i ? undefined : arguments[i]) === undefined) {\\n            match[i] = undefined;\\n          }\\n        }\\n      });\\n    } // Attach named capture properties\\n\\n\\n    var groupsObject = match;\\n\\n    if (XRegExp.isInstalled('namespacing')) {\\n      // https://tc39.github.io/proposal-regexp-named-groups/#sec-regexpbuiltinexec\\n      match.groups = (0, _create[\\\"default\\\"])(null);\\n      groupsObject = match.groups;\\n    }\\n\\n    if (this[REGEX_DATA] && this[REGEX_DATA].captureNames) {\\n      // Skip index 0\\n      for (var i = 1; i < match.length; ++i) {\\n        var name = this[REGEX_DATA].captureNames[i - 1];\\n\\n        if (name) {\\n          groupsObject[name] = match[i];\\n        }\\n      }\\n    } // Fix browsers that increment `lastIndex` after zero-length matches\\n\\n\\n    if (this.global && !match[0].length && this.lastIndex > match.index) {\\n      this.lastIndex = match.index;\\n    }\\n  }\\n\\n  if (!this.global) {\\n    // Fixes IE, Opera bug (last tested IE 9, Opera 11.6)\\n    this.lastIndex = origLastIndex;\\n  }\\n\\n  return match;\\n};\\n/**\\n * Fixes browser bugs in the native `RegExp.prototype.test`.\\n *\\n * @memberOf RegExp\\n * @param {String} str String to search.\\n * @returns {boolean} Whether the regex matched the provided value.\\n */\\n\\n\\nfixed.test = function (str) {\\n  // Do this the easy way :-)\\n  return !!fixed.exec.call(this, str);\\n};\\n/**\\n * Adds named capture support (with backreferences returned as `result.name`), and fixes browser\\n * bugs in the native `String.prototype.match`.\\n *\\n * @memberOf String\\n * @param {RegExp|*} regex Regex to search with. If not a regex object, it is passed to `RegExp`.\\n * @returns {Array} If `regex` uses flag g, an array of match strings or `null`. Without flag g,\\n *   the result of calling `regex.exec(this)`.\\n */\\n\\n\\nfixed.match = function (regex) {\\n  if (!XRegExp.isRegExp(regex)) {\\n    // Use the native `RegExp` rather than `XRegExp`\\n    regex = new RegExp(regex);\\n  } else if (regex.global) {\\n    var result = nativ.match.apply(this, arguments); // Fixes IE bug\\n\\n    regex.lastIndex = 0;\\n    return result;\\n  }\\n\\n  return fixed.exec.call(regex, toObject(this));\\n};\\n/**\\n * Adds support for `${n}` (or `$<n>`) tokens for named and numbered backreferences in replacement\\n * text, and provides named backreferences to replacement functions as `arguments[0].name`. Also\\n * fixes browser bugs in replacement text syntax when performing a replacement using a nonregex\\n * search value, and the value of a replacement regex's `lastIndex` property during replacement\\n * iterations and upon completion. Note that this doesn't support SpiderMonkey's proprietary third\\n * (`flags`) argument. Use via `XRegExp.replace`.\\n *\\n * @memberOf String\\n * @param {RegExp|String} search Search pattern to be replaced.\\n * @param {String|Function} replacement Replacement string or a function invoked to create it.\\n * @returns {string} New string with one or all matches replaced.\\n */\\n\\n\\nfixed.replace = function (search, replacement) {\\n  var isRegex = XRegExp.isRegExp(search);\\n  var origLastIndex;\\n  var captureNames;\\n  var result;\\n\\n  if (isRegex) {\\n    if (search[REGEX_DATA]) {\\n      captureNames = search[REGEX_DATA].captureNames;\\n    } // Only needed if `search` is nonglobal\\n\\n\\n    origLastIndex = search.lastIndex;\\n  } else {\\n    search += ''; // Type-convert\\n  } // Don't use `typeof`; some older browsers return 'function' for regex objects\\n\\n\\n  if (isType(replacement, 'Function')) {\\n    // Stringifying `this` fixes a bug in IE < 9 where the last argument in replacement\\n    // functions isn't type-converted to a string\\n    result = nativ.replace.call(String(this), search, function () {\\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\\n        args[_key] = arguments[_key];\\n      }\\n\\n      if (captureNames) {\\n        var groupsObject;\\n\\n        if (XRegExp.isInstalled('namespacing')) {\\n          // https://tc39.github.io/proposal-regexp-named-groups/#sec-regexpbuiltinexec\\n          groupsObject = (0, _create[\\\"default\\\"])(null);\\n          args.push(groupsObject);\\n        } else {\\n          // Change the `args[0]` string primitive to a `String` object that can store\\n          // properties. This really does need to use `String` as a constructor\\n          args[0] = new String(args[0]);\\n          groupsObject = args[0];\\n        } // Store named backreferences\\n\\n\\n        for (var i = 0; i < captureNames.length; ++i) {\\n          if (captureNames[i]) {\\n            groupsObject[captureNames[i]] = args[i + 1];\\n          }\\n        }\\n      } // ES6 specs the context for replacement functions as `undefined`\\n\\n\\n      return replacement.apply(void 0, args);\\n    });\\n  } else {\\n    // Ensure that the last value of `args` will be a string when given nonstring `this`,\\n    // while still throwing on null or undefined context\\n    result = nativ.replace.call(this == null ? this : String(this), search, function () {\\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\\n        args[_key2] = arguments[_key2];\\n      }\\n\\n      return nativ.replace.call(String(replacement), replacementToken, replacer);\\n\\n      function replacer($0, bracketed, angled, dollarToken) {\\n        bracketed = bracketed || angled; // Named or numbered backreference with curly or angled braces\\n\\n        if (bracketed) {\\n          // XRegExp behavior for `${n}` or `$<n>`:\\n          // 1. Backreference to numbered capture, if `n` is an integer. Use `0` for the\\n          //    entire match. Any number of leading zeros may be used.\\n          // 2. Backreference to named capture `n`, if it exists and is not an integer\\n          //    overridden by numbered capture. In practice, this does not overlap with\\n          //    numbered capture since XRegExp does not allow named capture to use a bare\\n          //    integer as the name.\\n          // 3. If the name or number does not refer to an existing capturing group, it's\\n          //    an error.\\n          var n = +bracketed; // Type-convert; drop leading zeros\\n\\n          if (n <= args.length - 3) {\\n            return args[n] || '';\\n          } // Groups with the same name is an error, else would need `lastIndexOf`\\n\\n\\n          n = captureNames ? (0, _indexOf[\\\"default\\\"])(captureNames).call(captureNames, bracketed) : -1;\\n\\n          if (n < 0) {\\n            throw new SyntaxError(\\\"Backreference to undefined group \\\".concat($0));\\n          }\\n\\n          return args[n + 1] || '';\\n        } // Else, special variable or numbered backreference without curly braces\\n\\n\\n        if (dollarToken === '$') {\\n          // $$\\n          return '$';\\n        }\\n\\n        if (dollarToken === '&' || +dollarToken === 0) {\\n          // $&, $0 (not followed by 1-9), $00\\n          return args[0];\\n        }\\n\\n        if (dollarToken === '`') {\\n          var _context4;\\n\\n          // $` (left context)\\n          return (0, _slice[\\\"default\\\"])(_context4 = args[args.length - 1]).call(_context4, 0, args[args.length - 2]);\\n        }\\n\\n        if (dollarToken === \\\"'\\\") {\\n          var _context5;\\n\\n          // $' (right context)\\n          return (0, _slice[\\\"default\\\"])(_context5 = args[args.length - 1]).call(_context5, args[args.length - 2] + args[0].length);\\n        } // Else, numbered backreference without braces\\n\\n\\n        dollarToken = +dollarToken; // Type-convert; drop leading zero\\n        // XRegExp behavior for `$n` and `$nn`:\\n        // - Backrefs end after 1 or 2 digits. Use `${..}` or `$<..>` for more digits.\\n        // - `$1` is an error if no capturing groups.\\n        // - `$10` is an error if less than 10 capturing groups. Use `${1}0` or `$<1>0`\\n        //   instead.\\n        // - `$01` is `$1` if at least one capturing group, else it's an error.\\n        // - `$0` (not followed by 1-9) and `$00` are the entire match.\\n        // Native behavior, for comparison:\\n        // - Backrefs end after 1 or 2 digits. Cannot reference capturing group 100+.\\n        // - `$1` is a literal `$1` if no capturing groups.\\n        // - `$10` is `$1` followed by a literal `0` if less than 10 capturing groups.\\n        // - `$01` is `$1` if at least one capturing group, else it's a literal `$01`.\\n        // - `$0` is a literal `$0`.\\n\\n        if (!isNaN(dollarToken)) {\\n          if (dollarToken > args.length - 3) {\\n            throw new SyntaxError(\\\"Backreference to undefined group \\\".concat($0));\\n          }\\n\\n          return args[dollarToken] || '';\\n        } // `$` followed by an unsupported char is an error, unlike native JS\\n\\n\\n        throw new SyntaxError(\\\"Invalid token \\\".concat($0));\\n      }\\n    });\\n  }\\n\\n  if (isRegex) {\\n    if (search.global) {\\n      // Fixes IE, Safari bug (last tested IE 9, Safari 5.1)\\n      search.lastIndex = 0;\\n    } else {\\n      // Fixes IE, Opera bug (last tested IE 9, Opera 11.6)\\n      search.lastIndex = origLastIndex;\\n    }\\n  }\\n\\n  return result;\\n};\\n/**\\n * Fixes browser bugs in the native `String.prototype.split`. Use via `XRegExp.split`.\\n *\\n * @memberOf String\\n * @param {RegExp|String} separator Regex or string to use for separating the string.\\n * @param {Number} [limit] Maximum number of items to include in the result array.\\n * @returns {!Array} Array of substrings.\\n */\\n\\n\\nfixed.split = function (separator, limit) {\\n  if (!XRegExp.isRegExp(separator)) {\\n    // Browsers handle nonregex split correctly, so use the faster native method\\n    return nativ.split.apply(this, arguments);\\n  }\\n\\n  var str = String(this);\\n  var output = [];\\n  var origLastIndex = separator.lastIndex;\\n  var lastLastIndex = 0;\\n  var lastLength; // Values for `limit`, per the spec:\\n  // If undefined: pow(2,32) - 1\\n  // If 0, Infinity, or NaN: 0\\n  // If positive number: limit = floor(limit); if (limit >= pow(2,32)) limit -= pow(2,32);\\n  // If negative number: pow(2,32) - floor(abs(limit))\\n  // If other: Type-convert, then use the above rules\\n  // This line fails in very strange ways for some values of `limit` in Opera 10.5-10.63, unless\\n  // Opera Dragonfly is open (go figure). It works in at least Opera 9.5-10.1 and 11+\\n\\n  limit = (limit === undefined ? -1 : limit) >>> 0;\\n  (0, _forEach[\\\"default\\\"])(XRegExp).call(XRegExp, str, separator, function (match) {\\n    // This condition is not the same as `if (match[0].length)`\\n    if (match.index + match[0].length > lastLastIndex) {\\n      output.push((0, _slice[\\\"default\\\"])(str).call(str, lastLastIndex, match.index));\\n\\n      if (match.length > 1 && match.index < str.length) {\\n        Array.prototype.push.apply(output, (0, _slice[\\\"default\\\"])(match).call(match, 1));\\n      }\\n\\n      lastLength = match[0].length;\\n      lastLastIndex = match.index + lastLength;\\n    }\\n  });\\n\\n  if (lastLastIndex === str.length) {\\n    if (!nativ.test.call(separator, '') || lastLength) {\\n      output.push('');\\n    }\\n  } else {\\n    output.push((0, _slice[\\\"default\\\"])(str).call(str, lastLastIndex));\\n  }\\n\\n  separator.lastIndex = origLastIndex;\\n  return output.length > limit ? (0, _slice[\\\"default\\\"])(output).call(output, 0, limit) : output;\\n}; // ==--------------------------==\\n// Built-in syntax/flag tokens\\n// ==--------------------------==\\n\\n/*\\n * Letter escapes that natively match literal characters: `\\\\a`, `\\\\A`, etc. These should be\\n * SyntaxErrors but are allowed in web reality. XRegExp makes them errors for cross-browser\\n * consistency and to reserve their syntax, but lets them be superseded by addons.\\n */\\n\\n\\nXRegExp.addToken(/\\\\\\\\([ABCE-RTUVXYZaeg-mopqyz]|c(?![A-Za-z])|u(?![\\\\dA-Fa-f]{4}|{[\\\\dA-Fa-f]+})|x(?![\\\\dA-Fa-f]{2}))/, function (match, scope) {\\n  // \\\\B is allowed in default scope only\\n  if (match[1] === 'B' && scope === defaultScope) {\\n    return match[0];\\n  }\\n\\n  throw new SyntaxError(\\\"Invalid escape \\\".concat(match[0]));\\n}, {\\n  scope: 'all',\\n  leadChar: '\\\\\\\\'\\n});\\n/*\\n * Unicode code point escape with curly braces: `\\\\u{N..}`. `N..` is any one or more digit\\n * hexadecimal number from 0-10FFFF, and can include leading zeros. Requires the native ES6 `u` flag\\n * to support code points greater than U+FFFF. Avoids converting code points above U+FFFF to\\n * surrogate pairs (which could be done without flag `u`), since that could lead to broken behavior\\n * if you follow a `\\\\u{N..}` token that references a code point above U+FFFF with a quantifier, or\\n * if you use the same in a character class.\\n */\\n\\nXRegExp.addToken(/\\\\\\\\u{([\\\\dA-Fa-f]+)}/, function (match, scope, flags) {\\n  var code = dec(match[1]);\\n\\n  if (code > 0x10FFFF) {\\n    throw new SyntaxError(\\\"Invalid Unicode code point \\\".concat(match[0]));\\n  }\\n\\n  if (code <= 0xFFFF) {\\n    // Converting to \\\\uNNNN avoids needing to escape the literal character and keep it\\n    // separate from preceding tokens\\n    return \\\"\\\\\\\\u\\\".concat(pad4(hex(code)));\\n  } // If `code` is between 0xFFFF and 0x10FFFF, require and defer to native handling\\n\\n\\n  if (hasNativeU && (0, _includes[\\\"default\\\"])(flags).call(flags, 'u')) {\\n    return match[0];\\n  }\\n\\n  throw new SyntaxError('Cannot use Unicode code point above \\\\\\\\u{FFFF} without flag u');\\n}, {\\n  scope: 'all',\\n  leadChar: '\\\\\\\\'\\n});\\n/*\\n * Empty character class: `[]` or `[^]`. This fixes a critical cross-browser syntax inconsistency.\\n * Unless this is standardized (per the ES spec), regex syntax can't be accurately parsed because\\n * character class endings can't be determined.\\n */\\n\\nXRegExp.addToken(/\\\\[(\\\\^?)\\\\]/, // For cross-browser compatibility with ES3, convert [] to \\\\b\\\\B and [^] to [\\\\s\\\\S].\\n// (?!) should work like \\\\b\\\\B, but is unreliable in some versions of Firefox\\n\\n/* eslint-disable no-confusing-arrow */\\nfunction (match) {\\n  return match[1] ? '[\\\\\\\\s\\\\\\\\S]' : '\\\\\\\\b\\\\\\\\B';\\n},\\n/* eslint-enable no-confusing-arrow */\\n{\\n  leadChar: '['\\n});\\n/*\\n * Comment pattern: `(?# )`. Inline comments are an alternative to the line comments allowed in\\n * free-spacing mode (flag x).\\n */\\n\\nXRegExp.addToken(/\\\\(\\\\?#[^)]*\\\\)/, getContextualTokenSeparator, {\\n  leadChar: '('\\n});\\n/*\\n * Whitespace and line comments, in free-spacing mode (aka extended mode, flag x) only.\\n */\\n\\nXRegExp.addToken(/\\\\s+|#[^\\\\n]*\\\\n?/, getContextualTokenSeparator, {\\n  flag: 'x'\\n});\\n/*\\n * Dot, in dotall mode (aka singleline mode, flag s) only.\\n */\\n\\nXRegExp.addToken(/\\\\./, function () {\\n  return '[\\\\\\\\s\\\\\\\\S]';\\n}, {\\n  flag: 's',\\n  leadChar: '.'\\n});\\n/*\\n * Named backreference: `\\\\k<name>`. Backreference names can use the characters A-Z, a-z, 0-9, _,\\n * and $ only. Also allows numbered backreferences as `\\\\k<n>`.\\n */\\n\\nXRegExp.addToken(/\\\\\\\\k<([\\\\w$]+)>/, function (match) {\\n  var _context6, _context7;\\n\\n  // Groups with the same name is an error, else would need `lastIndexOf`\\n  var index = isNaN(match[1]) ? (0, _indexOf[\\\"default\\\"])(_context6 = this.captureNames).call(_context6, match[1]) + 1 : +match[1];\\n  var endIndex = match.index + match[0].length;\\n\\n  if (!index || index > this.captureNames.length) {\\n    throw new SyntaxError(\\\"Backreference to undefined group \\\".concat(match[0]));\\n  } // Keep backreferences separate from subsequent literal numbers. This avoids e.g.\\n  // inadvertedly changing `(?<n>)\\\\k<n>1` to `()\\\\11`.\\n\\n\\n  return (0, _concat[\\\"default\\\"])(_context7 = \\\"\\\\\\\\\\\".concat(index)).call(_context7, endIndex === match.input.length || isNaN(match.input[endIndex]) ? '' : '(?:)');\\n}, {\\n  leadChar: '\\\\\\\\'\\n});\\n/*\\n * Numbered backreference or octal, plus any following digits: `\\\\0`, `\\\\11`, etc. Octals except `\\\\0`\\n * not followed by 0-9 and backreferences to unopened capture groups throw an error. Other matches\\n * are returned unaltered. IE < 9 doesn't support backreferences above `\\\\99` in regex syntax.\\n */\\n\\nXRegExp.addToken(/\\\\\\\\(\\\\d+)/, function (match, scope) {\\n  if (!(scope === defaultScope && /^[1-9]/.test(match[1]) && +match[1] <= this.captureNames.length) && match[1] !== '0') {\\n    throw new SyntaxError(\\\"Cannot use octal escape or backreference to undefined group \\\".concat(match[0]));\\n  }\\n\\n  return match[0];\\n}, {\\n  scope: 'all',\\n  leadChar: '\\\\\\\\'\\n});\\n/*\\n * Named capturing group; match the opening delimiter only: `(?<name>`. Capture names can use the\\n * characters A-Z, a-z, 0-9, _, and $ only. Names can't be integers. Supports Python-style\\n * `(?P<name>` as an alternate syntax to avoid issues in some older versions of Opera which natively\\n * supported the Python-style syntax. Otherwise, XRegExp might treat numbered backreferences to\\n * Python-style named capture as octals.\\n */\\n\\nXRegExp.addToken(/\\\\(\\\\?P?<([\\\\w$]+)>/, function (match) {\\n  var _context8;\\n\\n  // Disallow bare integers as names because named backreferences are added to match arrays\\n  // and therefore numeric properties may lead to incorrect lookups\\n  if (!isNaN(match[1])) {\\n    throw new SyntaxError(\\\"Cannot use integer as capture name \\\".concat(match[0]));\\n  }\\n\\n  if (!XRegExp.isInstalled('namespacing') && (match[1] === 'length' || match[1] === '__proto__')) {\\n    throw new SyntaxError(\\\"Cannot use reserved word as capture name \\\".concat(match[0]));\\n  }\\n\\n  if ((0, _includes[\\\"default\\\"])(_context8 = this.captureNames).call(_context8, match[1])) {\\n    throw new SyntaxError(\\\"Cannot use same name for multiple groups \\\".concat(match[0]));\\n  }\\n\\n  this.captureNames.push(match[1]);\\n  this.hasNamedCapture = true;\\n  return '(';\\n}, {\\n  leadChar: '('\\n});\\n/*\\n * Capturing group; match the opening parenthesis only. Required for support of named capturing\\n * groups. Also adds explicit capture mode (flag n).\\n */\\n\\nXRegExp.addToken(/\\\\((?!\\\\?)/, function (match, scope, flags) {\\n  if ((0, _includes[\\\"default\\\"])(flags).call(flags, 'n')) {\\n    return '(?:';\\n  }\\n\\n  this.captureNames.push(null);\\n  return '(';\\n}, {\\n  optionalFlags: 'n',\\n  leadChar: '('\\n});\\nvar _default = XRegExp;\\nexports[\\\"default\\\"] = _default;\\nmodule.exports = exports.default;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"_createForOfIteratorHelper\",\"o\",\"allowArrayLike\",\"it\",\"_symbol\",\"_getIteratorMethod2\",\"_isArray\",\"_unsupportedIterableToArray\",\"length\",\"i\",\"F\",\"s\",\"n\",\"done\",\"value\",\"e\",\"_e\",\"f\",\"TypeError\",\"normalCompletion\",\"didErr\",\"err\",\"_getIterator2\",\"step\",\"next\",\"_e2\",\"minLen\",\"_context9\",\"_arrayLikeToArray\",\"_slice\",\"Object\",\"prototype\",\"toString\",\"call\",\"constructor\",\"name\",\"_from\",\"test\",\"arr\",\"len\",\"arr2\",\"Array\",\"hasNativeFlag\",\"flag\",\"isSupported\",\"RegExp\",\"replace\",\"gy\",\"exception\",\"augment\",\"regex\",\"captureNames\",\"xSource\",\"xFlags\",\"isInternalOnly\",\"_context\",\"REGEX_DATA\",\"__proto__\",\"XRegExp\",\"p\",\"source\",\"flags\",\"_sort\",\"split\",\"join\",\"clipDuplicates\",\"str\",\"nativ\",\"copyRegex\",\"options\",\"_context2\",\"isRegExp\",\"xData\",\"hasFlagsProp\",\"_flags\",\"exec\",\"flagsToAdd\",\"flagsToRemove\",\"xregexpSource\",\"xregexpFlags\",\"removeG\",\"removeY\",\"concat\",\"addG\",\"addY\",\"undefined\",\"dec\",\"hex\",\"_parseInt2\",\"getContextualTokenSeparator\",\"match\",\"scope\",\"_includes\",\"pattern\",\"pos\",\"isType\",\"type\",\"pad4\",\"prepareFlags\",\"SyntaxError\",\"$0\",\"$1\",\"_iterator\",\"_step\",\"registeredFlags\",\"prepareOptions\",\"_forEach\",\"registerFlag\",\"Error\",\"toObject\",\"String\",\"isInstalled\",\"patternCache\",\"context\",\"hasNamedCapture\",\"defaultScope\",\"output\",\"applied\",\"appliedPattern\",\"appliedFlags\",\"tokens\",\"leadChar\",\"result\",\"t\",\"matchLength\",\"handler\",\"reparse\",\"_XRegExp$exec\",\"nativeTokens\",\"token\",\"_XRegExp$exec2\",\"_slicedToArray2\",\"classScope\",\"captures\",\"generated\",\"_interopRequireDefault\",\"_Object$defineProperty\",\"_concat\",\"_indexOf\",\"_create\",\"features\",\"astral\",\"namespacing\",\"fixed\",\"regexCache\",\"replacementToken\",\"correctExecNpcg\",\"_ref\",\"hasNativeU\",\"hasNativeY\",\"g\",\"m\",\"u\",\"y\",\"version\",\"_clipDuplicates\",\"_hasNativeFlag\",\"_dec\",\"_hex\",\"_pad4\",\"addToken\",\"XRegExp.addToken\",\"optionalFlags\",\"_iterator2\",\"_step2\",\"push\",\"cache\",\"flush\",\"XRegExp.cache\",\"XRegExp.cache.flush\",\"cacheName\",\"escape\",\"XRegExp.escape\",\"XRegExp.exec\",\"sticky\",\"cacheKey\",\"fakeY\",\"r2\",\"lastIndex\",\"pop\",\"forEach\",\"XRegExp.forEach\",\"callback\",\"index\",\"globalize\",\"XRegExp.globalize\",\"install\",\"XRegExp.install\",\"on\",\"XRegExp.isInstalled\",\"feature\",\"XRegExp.isRegExp\",\"XRegExp.match\",\"matchChain\",\"XRegExp.matchChain\",\"chain\",\"recurseChain\",\"values\",\"level\",\"addMatch\",\"item\",\"backref\",\"ERR_UNDEFINED_GROUP\",\"isNamedBackref\",\"isNaN\",\"groups\",\"ReferenceError\",\"hasOwnProperty\",\"backrefValue\",\"matches\",\"_iterator3\",\"_step3\",\"XRegExp.replace\",\"search\",\"replacement\",\"isRegex\",\"s2\",\"replaceEach\",\"XRegExp.replaceEach\",\"replacements\",\"_iterator4\",\"_step4\",\"r\",\"XRegExp.split\",\"separator\",\"limit\",\"XRegExp.test\",\"uninstall\",\"XRegExp.uninstall\",\"union\",\"XRegExp.union\",\"patterns\",\"rewrite\",\"paren\",\"numCaptures\",\"numPriorCaptures\",\"conjunction\",\"parts\",\"_iterator5\",\"_step5\",\"fixed.exec\",\"origLastIndex\",\"apply\",\"arguments\",\"_context3\",\"groupsObject\",\"fixed.test\",\"fixed.match\",\"fixed.replace\",\"_len\",\"args\",\"_key\",\"_len2\",\"_key2\",\"replacer\",\"bracketed\",\"angled\",\"dollarToken\",\"_context4\",\"_context5\",\"fixed.split\",\"lastLastIndex\",\"lastLength\",\"code\",\"_context6\",\"_context7\",\"endIndex\",\"input\",\"_context8\",\"default\"]\n}\n"]