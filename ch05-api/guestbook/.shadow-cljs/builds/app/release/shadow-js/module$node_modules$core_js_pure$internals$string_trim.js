["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/core-js-pure/internals/string-trim.js"],"~:js","shadow$provide[245]=function(f,d,h,l){f=d(18);var k=d(29),n=d(101);d=d(244);var q=f(\"\".replace);d=\"[\"+d+\"]\";var r=RegExp(\"^\"+d+d+\"*\"),v=RegExp(d+d+\"*$\");d=function(w){return function(t){t=n(k(t));w&1&&(t=q(t,r,\"\"));w&2&&(t=q(t,v,\"\"));return t}};h.exports={start:d(1),end:d(2),trim:d(3)}}","~:source","shadow$provide[245] = function(global,require,module,exports) {\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\nvar toString = require('../internals/to-string');\nvar whitespaces = require('../internals/whitespaces');\n\nvar replace = uncurryThis(''.replace);\nvar whitespace = '[' + whitespaces + ']';\nvar ltrim = RegExp('^' + whitespace + whitespace + '*');\nvar rtrim = RegExp(whitespace + whitespace + '*$');\n\n// `String.prototype.{ trim, trimStart, trimEnd, trimLeft, trimRight }` methods implementation\nvar createMethod = function (TYPE) {\n  return function ($this) {\n    var string = toString(requireObjectCoercible($this));\n    if (TYPE & 1) string = replace(string, ltrim, '');\n    if (TYPE & 2) string = replace(string, rtrim, '');\n    return string;\n  };\n};\n\nmodule.exports = {\n  // `String.prototype.{ trimLeft, trimStart }` methods\n  // https://tc39.es/ecma262/#sec-string.prototype.trimstart\n  start: createMethod(1),\n  // `String.prototype.{ trimRight, trimEnd }` methods\n  // https://tc39.es/ecma262/#sec-string.prototype.trimend\n  end: createMethod(2),\n  // `String.prototype.trim` method\n  // https://tc39.es/ecma262/#sec-string.prototype.trim\n  trim: createMethod(3)\n};\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$core_js_pure$internals$function_uncurry_this","~$module$node_modules$core_js_pure$internals$whitespaces","~$module$node_modules$core_js_pure$internals$require_object_coercible","~$shadow.js","~$module$node_modules$core_js_pure$internals$to_string"]],"~:properties",["^5",["trim","start","end"]],"~:compiled-at",1668766213469,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$core_js_pure$internals$string_trim.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAe,GAAf,CAAA,CAAsB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAC1DC,CAAAA,CAAcH,CAAA,CAAQ,EAAR,CAClB,KAAII,EAAyBJ,CAAA,CAAQ,EAAR,CAA7B,CACIK,EAAWL,CAAA,CAAQ,GAAR,CACXM,EAAAA,CAAcN,CAAA,CAAQ,GAAR,CAElB,KAAIO,EAAUJ,CAAA,CAAYI,EAAZ,CAAeA,OAAf,CACVC,EAAAA,CAAa,GAAbA,CAAmBF,CAAnBE,CAAiC,GACrC,KAAIC,EAAQC,MAAA,CAAO,GAAP,CAAaF,CAAb,CAA0BA,CAA1B,CAAuC,GAAvC,CAAZ,CACIG,EAAQD,MAAA,CAAOF,CAAP,CAAoBA,CAApB,CAAiC,IAAjC,CAGRI,EAAAA,CAAeA,QAAS,CAACC,CAAD,CAAO,CACjC,MAAO,SAAS,CAACC,CAAD,CAAQ,CAClBC,CAAAA,CAASV,CAAA,CAASD,CAAA,CAAuBU,CAAvB,CAAT,CACTD,EAAJ,CAAW,CAAX,GAAcE,CAAd,CAAuBR,CAAA,CAAQQ,CAAR,CAAgBN,CAAhB,CAAuB,EAAvB,CAAvB,CACII,EAAJ,CAAW,CAAX,GAAcE,CAAd,CAAuBR,CAAA,CAAQQ,CAAR,CAAgBJ,CAAhB,CAAuB,EAAvB,CAAvB,CACA,OAAOI,EAJe,CADS,CASnCd,EAAA,CAAOC,OAAP,CAAiB,CAGfc,MAAOJ,CAAA,CAAa,CAAb,CAHQ,CAMfK,IAAKL,CAAA,CAAa,CAAb,CANU,CASfM,KAAMN,CAAA,CAAa,CAAb,CATS,CArB6C;\",\n\"sources\":[\"node_modules/core-js-pure/internals/string-trim.js\"],\n\"sourcesContent\":[\"shadow$provide[245] = function(global,require,module,exports) {\\nvar uncurryThis = require('../internals/function-uncurry-this');\\nvar requireObjectCoercible = require('../internals/require-object-coercible');\\nvar toString = require('../internals/to-string');\\nvar whitespaces = require('../internals/whitespaces');\\n\\nvar replace = uncurryThis(''.replace);\\nvar whitespace = '[' + whitespaces + ']';\\nvar ltrim = RegExp('^' + whitespace + whitespace + '*');\\nvar rtrim = RegExp(whitespace + whitespace + '*$');\\n\\n// `String.prototype.{ trim, trimStart, trimEnd, trimLeft, trimRight }` methods implementation\\nvar createMethod = function (TYPE) {\\n  return function ($this) {\\n    var string = toString(requireObjectCoercible($this));\\n    if (TYPE & 1) string = replace(string, ltrim, '');\\n    if (TYPE & 2) string = replace(string, rtrim, '');\\n    return string;\\n  };\\n};\\n\\nmodule.exports = {\\n  // `String.prototype.{ trimLeft, trimStart }` methods\\n  // https://tc39.es/ecma262/#sec-string.prototype.trimstart\\n  start: createMethod(1),\\n  // `String.prototype.{ trimRight, trimEnd }` methods\\n  // https://tc39.es/ecma262/#sec-string.prototype.trimend\\n  end: createMethod(2),\\n  // `String.prototype.trim` method\\n  // https://tc39.es/ecma262/#sec-string.prototype.trim\\n  trim: createMethod(3)\\n};\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"uncurryThis\",\"requireObjectCoercible\",\"toString\",\"whitespaces\",\"replace\",\"whitespace\",\"ltrim\",\"RegExp\",\"rtrim\",\"createMethod\",\"TYPE\",\"$this\",\"string\",\"start\",\"end\",\"trim\"]\n}\n"]